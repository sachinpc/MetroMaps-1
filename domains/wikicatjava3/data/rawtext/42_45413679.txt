nim programming language nim formerly named nimrod is an imperative multiparadigm compiled programming language designed and developed by andreas rumpf it is designed to be efficient expressive and elegant supporting metaprogramming functional message passing procedural and objectoriented programming styles by providing several features such as compile time code generation algebraic data types an elegant foreign function interface ffi with c and compiling to javascript description nim is statically typed with a simple syntax it supports compiletime metaprogramming features such as syntactic macros and term rewriting macros term rewriting macros enable library implementations of common data structures such as bignums and matrixes to be implemented with an efficiency as if they would have been builtin language facilities iterators are supported and can be used as first class entities in the language as can functions these features allow for functional programming to be used objectoriented programming is supported by inheritance and multiple dispatch functions can be generic and can also be overloaded generics are further enhanced by the support for type classes operator overloading is also supported nim includes automatic garbage collection based on deferred reference counting with cycle detection andrew binstock editorinchief of dr dobbs says nim formerly known as nimrod presents a most original design that straddles pascal and python and compiles to c code or javascript history the initial development of nim began in  by andreas rumpf the nim compiler was written in pascal in  a version of the compiler written in nim was released the compiler is open source and is being developed by a group of volunteers in addition to andreas rumpf language design compiler the compiler emits optimized c code and defers compiling to an external compiler many compilers are supported including clang and gnu compiler collection gcc to leverage their optimizing and portability abilities the compiler can also emit c objectivec and javascript code to allow easy interfacing with application programming interfaces apis written in those languages this allows writing applications for ios and android package system nimble is the package manager used by nim to package the nim modules it uses nimscript for the configuration nimble works on git repositories as its primary source of packages its list of packages is stored in a json file which is freely accessible in the nimlangpackages repository this json file provides nimble with the required git url to clone the package and install it tools cnim helps to generate new bindings by translating ansi c code to nim code the output is humanreadable nim code that is meant to be tweaked by hand after the translation process libraries a nim program can use any library which can be used in a c program language bindings exist for many libraries for example gtk sdl cairo opengl winapi zlib libzip openssl and curl nim works with postgresql mysql and sqlite databases nim can interface with the lua and python interpreter examples the following code examples are valid as of nim  syntax and semantics may change in subsequent versions hello world the hello world program in nim echo hello world reversing a string a simple demonstration showing many of nims features proc reverses string string  var str  reverse this echo reversed  reversestr one of the more exotic features is the implicit codice variable every procedure in nim with a nonvoid return type has an implicit result variable that represents the value that will be returned in the for loop we see an invocation of codice which is an iterator if an iterator is omitted then the compiler will attempt to use an codice iterator if one is defined for the type that was specified in the for loop metaprogramming this is an example of metaprogramming in nim using its template facilities template gentypename fieldname expr fieldtype typedesc  gentypetest foo int var x  testfoo  echoxfoo   the codice is invoked at compiletime and a codice type is created wrapping c functions the following program demonstrates the ease with which existing c code can be directly used in nim proc printfformatstr cstring printfs dn foo  in this code the well known codice function is imported into nim and subsequently used community the language has a bug tracker with wiki hosted by github and a forum a presentation at oreilly open source convention oscon in  took place oreilly community essential languages nim scala python