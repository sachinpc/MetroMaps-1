handelc handelc is a highlevel programming language which targets lowlevel hardware most commonly used in the programming of fpgas it is a rich subset of c with nonstandard extensions to control hardware instantiation with an emphasis on parallelism handelc is to hardware design what the first highlevel programming languages were to programming cpus unlike many other design languages that target a specific architecture handelc can be compiled to a number of design languages and then synthesised to the corresponding hardware this frees developers to concentrate on the programming task at hand rather than the idiosyncrasies of a specific design language and architecture additional features the subset of c includes all common c language features necessary to describe complex algorithms like many embedded c compilers floating point data types were omitted floating point arithmetic is supported through external libraries that are very efficient parallel programs in order to facilitate a way to describe parallel behaviour some of the csp keywords are used along with the general file structure of occam for example channels channels provide a mechanism for message passing between parallel threads channels can be defined as asynchronous or synchronous with or without an inferred storage element respectively a thread writing to a synchronous channel will be immediately blocked until the corresponding listening thread is ready to receive the message likewise the receiving thread will block on a read statement until the sending thread executes the next send thus they may be used as a means of synchronizing threads asynchronous channels provide a specified amount of storage for data passing through them in the form of a fifo whilst this fifo neither full nor empty both sending and receiving threads may proceed without being blocked however when the fifo is empty the receiving thread will block at the next read when it is full the sending thread will block at the next send a channel with actors in differing clock domains is automatically asynchronous due to the need for at least one element of storage to mitigate metastability a thread may simultaneously wait on multiple channels synchronous or asynchronous acting upon the first one available given a specified order of priority or optionally executing an alternate path if none is ready scope and variable sharing the scope of declarations are limited to the code blocks codice in which they were declared the scope is hierarchical in nature as declarations are in scope within sub blocks for example extensions to the c language in addition to the effects the standard semantics of c have on the timing of the program the following keywords are reserved for describing the practicalities of the fpga environment or for the language elements sourced from occam scheduling in handelc assignment and the delay command take one cycle all other operations are free this allows programmers to manually schedule tasks and create effective pipelines by arranging loops in parallel with the correct delays pipelines can massively increase data throughput at the expense of increased hardware resource use history the historical roots of handelc are in a series of oxford university computing laboratory hardware description languages developed by the hardware compilation group handel hdl evolved into handelc around early  the technology developed at oxford was spun off to mature as a cornerstone product for embedded solutions limited esl in  esl was renamed celoxica in september  handelc was adopted by many university hardware research groups after its release by esl as a result was able to establish itself as a hardware design tool of choice within the academic community especially in the united kingdom in early  celoxicas esl business was acquired by agility which developed and sold among other products esl tools supporting handelc in early  agility ceased operations after failing to obtain further capital investments or credit in january  mentor graphics acquired agilitys c synthesis assets other subset c hdls that developed around the same time are transmogrifier c in  at university of toronto now the fpgac open source project and streamsc at los alamos national laboratory now licensed to impulse accelerated technologies under the name impulse c