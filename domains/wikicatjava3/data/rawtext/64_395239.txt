mobile information device profile mobile information device profile midp is a specification published for the use of java on embedded devices such as mobile phones and pdas midp is part of the java platform micro edition java me framework and sits on top of connected limited device configuration cldc a set of lower level programming interfaces midp was developed under the java community process the first midp devices were launched in april  general apis the core application programming interfaces are defined by the underlying connected limited device configuration system javaxmicroeditionio contains the java mespecific classes used for io operations javaxmicroeditionlcdui contains the java mespecific classes used for the gui lcdui has a simple screen based approach where a single displayable is always active at a time in the application user interface lcdui api provides a small set of displayables common in mobile device user interfaces list alert textbox form and canvas for all displayables the device midp implementation has control over the presentation and layout of the displayable canvas is a lowlevel graphics surface for which an application has full control over what is rendered to it although normally some space is reserved for system areas like screen title and indicators common in mobile device uis since midp  canvas also supports a fullscreen mode that allows use of full screen graphics which is especially useful for games lcdui also has a quite unique approach of abstract operations called commands the placement of commands added to a displayable is completely up to the device implementation of this toolkit the application programmer uses api specified command types to indicate the usage or purpose of the command in an application user interface common types are back exit item screen the idea of the command abstraction is to make applications more portable across various mobile devices application developers should use the command types properly to indicate the purpose of an operation and device implementation then places the operation to the common location for a given type in a devices specific user interface style this may be eg a specific key like a back navigation key for back commands or a button on screen lcdui acronym the acronym lcdui was actually an inhouse joke within the jcp expert group though undefined in the midp specifications it denotes limited capability device user interface the joke was that noone else really knew what it stood for later the book programming wireless devices with the java  platform micro edition gave this as the definition other common pseudodefinitions have appeared liquid crystal display user interface would reflect the fact that mobile phones normally use lcds however the api is not specifically tailored to this particular display technology it is also said that lcd ui stands for lowest common denominator due to the fact the specific ui has the simplest possible design javaxmicroeditionrms provides a form of persistent storage for java me a database for the mobile device javaxmicroeditionmidlet contains the base classes for java me applications and allows applications to be notified of changes to their state optional jsrs the following java specification requests are a selection of the optional jsrs which can be added on top of a midp implementation to add extra functionalities as optional jsrs there is no guarantee that a midp handset will implement such apis javaxmicroeditionmessaging wireless messaging api optional for sending sms and mms messages javaxmicroeditionpim personal information management api optional access the devices address book todo list calendar javaxmicroeditioniofile the file connection optional package fcop is one of two optional packages defined by jsr  through the java community process the fileconnection api specified in jsr  gives access to the local file systems on devices like pda in order to overcome security issues midlet needs to include requested file permission in its jad file under midletpermission property development tools there are several different ways to create midp applications code can be written in a plain text editor or one can use a more advanced ide such as netbeans intellij with bundled java me plugin or eclipse with plugins such as eclipseme which has a user interface for graphically laying out any forms you create as well as providing many other advanced features not available in a simple text editor some limitations may be avoided by using a vendorspecific api or midp  which obviously reduces the portability of the application history midp was developed under the java community process midp is now succeeded by meep as of java me 