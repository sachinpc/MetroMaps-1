ada programming language ada is a structured statically typed imperative widespectrum and objectoriented highlevel computer programming language extended from pascal and other languages it has builtin language support for designbycontract extremely strong typing explicit concurrency offering tasks synchronous message passing protected objects and nondeterminism ada improves code safety and maintainability by using the compiler to find errors in favor of runtime errors ada is an international standard the current version known as ada  is defined by isoiec  ada was originally designed by a team led by jean ichbiah of cii honeywell bull under contract to the united states department of defense dod from  to  to supersede over  programming languages used by the dod at that time ada was named after ada lovelace  who is credited with being the first computer programmer features ada was originally targeted at embedded and realtime systems the ada revision designed by s tucker taft of intermetrics between  and  improved support for systems numerical financial and objectoriented programming oop features of ada include strong typing modularity mechanisms packages runtime checking parallel processing tasks synchronous message passing protected objects and nondeterministic select statements exception handling and generics ada added support for objectoriented programming including dynamic dispatch the syntax of ada minimizes choices of ways to perform basic operations and prefers english keywords such as or else and and then to symbols such as  and  ada uses the basic arithmetical operators    and  but avoids using other symbols code blocks are delimited by words such as declare begin and end where the end in most cases is followed by the identifier of the block it closes eg if  end if loop  end loop in the case of conditional blocks this avoids a dangling else that could pair with the wrong nested ifexpression in other languages like c or java ada is designed for development of very large software systems ada packages can be compiled separately ada package specifications the package interface can also be compiled separately without the implementation to check for consistency this makes it possible to detect problems early during the design phase before implementation starts a large number of compiletime checks are supported to help avoid bugs that would not be detectable until runtime in some other languages or would require explicit checks to be added to the source code for example the syntax requires explicitly named closing of blocks to prevent errors due to mismatched end tokens the adherence to strong typing allows detection of many common software errors wrong parameters range violations invalid references mismatched types etc either during compiletime or otherwise during runtime as concurrency is part of the language specification the compiler can in some cases detect potential deadlocks compilers also commonly check for misspelled identifiers visibility of packages redundant declarations etc and can provide warnings and useful suggestions on how to fix the error ada also supports runtime checks to protect against access to unallocated memory buffer overflow errors range violations offbyone errors array access errors and other detectable bugs these checks can be disabled in the interest of runtime efficiency but can often be compiled efficiently it also includes facilities to help program verification for these reasons ada is widely used in critical systems where any anomaly might lead to very serious consequences eg accidental death injury or severe financial loss examples of systems where ada is used include avionics atc railways banking military and space technology adas dynamic memory management is highlevel and typesafe ada does not have generic or untyped pointers nor does it implicitly declare any pointer type instead all dynamic memory allocation and deallocation must take place through explicitly declared access types each access type has an associated storage pool that handles the lowlevel details of memory management the programmer can either use the default storage pool or define new ones this is particularly relevant for nonuniform memory access it is even possible to declare several different access types that all designate the same type but use different storage pools also the language provides for accessibility checks both at compile time and at run time that ensures that an access value cannot outlive the type of the object it points to though the semantics of the language allow automatic garbage collection of inaccessible objects most implementations do not support it by default as it would cause unpredictable behaviour in realtime systems ada does support a limited form of regionbased memory management also creative use of storage pools can provide for a limited form of automatic garbage collection since destroying a storage pool also destroys all the objects in the pool ada was designed to resemble the english language in its syntax for comments a doubledash  resembling an em dash denotes comment text comments stop at end of line so there is no danger of unclosed comments accidentally voiding whole sections of source code prefixing each line or column with  will skip all that code while being clearly denoted as a column of repeated  down the page there is no limit to the nesting of comments thereby allowing prior code with commentedout sections to be commentedout as even larger sections all unicode characters are allowed in comments such as for symbolic formulas emc to the compiler the doubledash is treated as endofline allowing continued parsing of the language as a contextfree grammar the semicolon  is a statement terminator and the null or nooperation statement is codice a single codice without a statement to terminate is not allowed unlike most iso standards the ada language definition known as the ada reference manual or arm or sometimes the language reference manual or lrm is free content thus it is a common reference for ada programmers and not just programmers implementing ada compilers apart from the reference manual there is also an extensive rationale document which explains the language design and the use of various language constructs this document is also widely used by programmers when the language was revised a new rationale document was written one notable free software tool that is used by many ada programmers to aid them in writing ada source code is the gnat programming studio history in the s the us department of defense dod was concerned by the number of different programming languages being used for its embedded computer system projects many of which were obsolete or hardwaredependent and none of which supported safe modular programming in  a working group the high order language working group holwg was formed with the intent to reduce this number by finding or creating a programming language generally suitable for the departments and uk ministry of defence requirements after many iterations beginning with an original straw man proposal the eventual programming language was named ada the total number of highlevel programming languages in use for such projects fell from over  in  to  by  requests for proposals for a new programming language were issued and four contractors were hired to develop their proposals under the names of red intermetrics led by benjamin brosgol green cii honeywell bull led by jean ichbiah blue softech led by john goodenough and yellow sri international led by jay spitzen in april  after public scrutiny the red and green proposals passed to the next phase in may  the green proposal designed by jean ichbiah at cii honeywell bull was chosen and given the name adaafter augusta ada countess of lovelace this proposal was influenced by the programming language lis that ichbiah and his group had developed in the s the preliminary ada reference manual was published in acm sigplan notices in june  the military standard reference manual was approved on december   ada lovelaces birthday and given the number milstd in honor of ada lovelaces birth year in  c a r hoare took advantage of his turing award speech to criticize ada for being overly complex and hence unreliable but subsequently seemed to recant in the foreword he wrote for an ada textbook ada attracted much attention from the programming community as a whole during its early days its backers and others predicted that it might become a dominant language for general purpose programming and not just defenserelated work ichbiah publicly stated that within ten years only two programming languages would remain ada and lisp early ada compilers struggled to implement the large complex language and both compiletime and runtime performance tended to be slow and tools primitive compiler vendors expended most of their efforts in passing the massive languageconformancetesting governmentrequired acvc validation suite that was required in another novel feature of the ada language effort the first validated ada implementation was the nyu adaed translator certified on april   nyu adaed is implemented in the highlevel set language setl a number of commercial companies began offering ada compilers and associated development tools including alsys telesoft ddci advanced computer techniques tartan laboratories tld systems verdix and others in  the us department of defense began to require the use of ada the ada mandate for all software though exceptions to this rule were often granted the department of defense ada mandate was effectively removed in  as the dod began to embrace cots technology similar requirements existed in other nato countries by the late s and early s ada compilers had improved in performance but there were still barriers to full exploitation of adas abilities including a tasking model that was different from what most realtime programmers were used to because of adas safetycritical support features it is now used not only for military applications but also in commercial projects where a software bug can have severe consequences eg avionics and air traffic control commercial rockets eg ariane  and  satellites and other space systems railway transport and banking for example the airplane information management system the flybywire system software in the boeing  was written in ada developed by honeywell air transport systems in collaboration with consultants from ddci it became arguably the bestknown of any ada project civilian or military the canadian automated air traffic system was written in  million lines of ada sloc count it featured advanced distributed processing a distributed ada database and objectoriented design ada is also used in other air traffic systems eg the uks nextgeneration interim future area control tools support ifacts air traffic control system is designed and implemented using spark ada it is also used in the french tvm incab signalling system on the tgv highspeed rail system and the metro suburban trains in paris london hong kong and new york city standardization the language became an ansi standard in  ansimilstd a and without any further changes became an iso standard in  iso this version of the language is commonly known as ada from the date of its adoption by ansi but is sometimes referred to also as ada from the date of its adoption by iso ada the joint isoansi standard iso was published in february  making ada the first iso standard objectoriented programming language to help with the standard revision and future acceptance the us air force funded the development of the gnat compiler presently the gnat compiler is part of the gnu compiler collection work has continued on improving and updating the technical content of the ada programming language a technical corrigendum to ada was published in october  and a major amendment isoiec amd  was published on march   at the adaeurope  conference in stockholm the ada resource association ara and adaeurope announced the completion of the design of the latest version of the ada programming language and the submission of the reference manual to the international organization for standardization iso for approval isoiec  was published in december  other related standards include iso  information processing systemscomputer graphicsgraphical kernel system gks language bindingspart  ada language constructs ada is an algollike programming language featuring control structures with reserved words such as if then else while for and so on however ada also has many data structuring facilities and other abstractions which were not included in the original algol  such as type definitions records pointers enumerations such constructs were in part inherited or inspired from pascal hello world in ada a common example of a languages syntax is the hello world program with adatextio use adatextio procedure hello is begin end hello this program can be compiled by using the freely available open source compiler gnat by executing gnatmake helloadb data types adas type system is not based on a set of predefined primitive types but allows users to declare their own types this declaration in turn is not based on the internal representation of the type but on describing the goal which should be achieved this allows the compiler to determine a suitable memory size for the type and to check for violations of the type definition at compile time and run time ie range violations buffer overruns type consistency etc ada supports numerical types defined by a range modulo types aggregate types records and arrays and enumeration types access types define a reference to an instance of a specified type untyped pointers are not permitted special types provided by the language are task types and protected types for example a date might be represented as type daytype is range    type monthtype is range    type yeartype is range    type hours is mod  type weekday is monday tuesday wednesday thursday friday saturday sunday type date is types can be refined by declaring subtypes subtype workinghours is hours range     at most  hours to work a day subtype workingday is weekday range monday  friday  days to work workload constant arrayworkingday of workinghours  implicit type declaration types can have modifiers such as limited abstract private etc private types can only be accessed and limited types can only be modified or copied within the scope of the package that defines them ada  adds additional features for objectoriented extension of types control structures ada is a structured programming language meaning that the flow of control is structured into standard statements all standard constructs and deep level early exit are supported so the use of the also supported go to commands is seldom needed  while a is not equal to b loop while a  b loop end loop if a  b then else end if for i in    loop end loop loop end loop case i is end case for aweekday in weekdayrange loop  loop over an enumeration end loop packages procedures and functions among the parts of an ada program are packages procedures and functions example package specification exampleads package example is end example package body exampleadb with adatextio package body example is  package initialization executed when the package is elaborated begin end example this program can be compiled eg by using the freely available open source compiler gnat by executing gnatmake z exampleadb packages procedures and functions can nest to any depth and each can also be the logical outermost block each package procedure or function can have its own declarations of constants types variables and other procedures functions and packages which can be declared in any order concurrency ada has language support for taskbased concurrency the fundamental concurrent unit in ada is a task which is a builtin limited type tasks are specified in two parts  the task declaration defines the task interface similar to a type declaration the task body specifies the implementation of the task depending on the implementation ada tasks are either mapped to operating system threads or processes or are scheduled internally by the ada runtime tasks can have entries for synchronisation a form of synchronous message passing task entries are declared in the task specification each task entry can have one or more accept statements within the task body if the control flow of the task reaches an accept statement the task is blocked until the corresponding entry is called by another task similarly a calling task is blocked until the called task reaches the corresponding accept statement task entries can have parameters similar to procedures allowing tasks to synchronously exchange data in conjunction with select statements it is possible to define guards on accept statements similar to dijkstras guarded commands ada also offers protected objects for mutual exclusion protected objects are a monitorlike construct but use guards instead of conditional variables for signaling similar to conditional critical regions protected objects combine the data encapsulation and safe mutual exclusion from monitors and entry guards from conditional critical regions the main advantage over classical monitors is that conditional variables are not required for signaling avoiding potential deadlocks due to incorrect locking semantics like tasks the protected object is a builtin limited type and it also has a declaration part and a body a protected object consists of encapsulated private data which can only be accessed from within the protected object and procedures functions and entries which are guaranteed to be mutually exclusive with the only exception of functions which are required to be side effect free and can therefore run concurrently with other functions a task calling a protected object is blocked if another task is currently executing inside the same protected object and released when this other task leaves the protected object blocked tasks are queued on the protected object ordered by time of arrival protected object entries are similar to procedures but additionally have guards if a guard evaluates to false a calling task is blocked and added to the queue of that entry now another task can be admitted to the protected object as no task is currently executing inside the protected object guards are reevaluated whenever a task leaves the protected object as this is the only time when the evaluation of guards can have changed calls to entries can be requeued to other entries with the same signature a task that is requeued is blocked and added to the queue of the target entry this means that the protected object is released and allows admission of another task the select statement in ada can be used to implement nonblocking entry calls and accepts nondeterministic selection of entries also with guards timeouts and aborts the following example illustrates some concepts of concurrent programming in ada with adatextio use adatextio procedure traffic is begin end traffic pragmas a pragma is a compiler directive that conveys information to the compiler to allow specific manipulation of compiled output certain pragmas are built into the language while other are implementationspecific examples of common usage of compiler pragmas would be to disable certain features such as runtime type checking or array subscript boundary checking or to instruct the compiler to insert object code in lieu of a function call as cc does with inline functions