fortran fortran formerly fortran derived from formula translation is a generalpurpose imperative programming language that is especially suited to numeric computation and scientific computing originally developed by ibm in the s for scientific and engineering applications fortran came to dominate this area of programming early on and has been in continuous use for over half a century in computationally intensive areas such as numerical weather prediction finite element analysis computational fluid dynamics computational physics crystallography and computational chemistry it is a popular language for highperformance computing and is used for programs that benchmark and rank the worlds fastest supercomputers fortran encompasses a lineage of versions each of which evolved to add extensions to the language while usually retaining compatibility with prior versions successive versions have added support for structured programming and processing of characterbased data fortran  array programming modular programming and generic programming fortran  high performance fortran fortran  objectoriented programming fortran  and concurrent programming fortran  naming the names of earlier versions of the language through fortran  were conventionally spelled in allcapitals fortran  was the last version in which the use of lowercase letters in keywords was strictly nonstandard the capitalization has been dropped in referring to newer versions beginning with fortran  the official language standards now refer to the language as fortran rather than allcaps fortran history in late  john w backus submitted a proposal to his superiors at ibm to develop a more practical alternative to assembly language for programming their ibm  mainframe computer backus historic fortran team consisted of programmers richard goldberg sheldon f best harlan herrick peter sheridan roy nutt robert nelson irving ziller lois haibt and david sayre its concepts included easier entry of equations into a computer an idea developed by j halcombe laning and demonstrated in the laning and zierler system of  a draft specification for the ibm mathematical formula translating system was completed by mid the first manual for fortran appeared in october  with the first fortran compiler delivered in april  this was the first optimizing compiler because customers were reluctant to use a highlevel programming language unless its compiler could generate code with performance comparable to that of handcoded assembly language while the community was skeptical that this new method could possibly outperform handcoding it reduced the number of programming statements necessary to operate a machine by a factor of  and quickly gained acceptance john backus said during a  interview with think the ibm employee magazine much of my work has come from being lazy i didnt like writing programs and so when i was working on the ibm  writing programs for computing missile trajectories i started work on a programming system to make it easier to write programs the language was widely adopted by scientists for writing numerically intensive programs which encouraged compiler writers to produce compilers that could generate faster and more efficient code the inclusion of a complex number data type in the language made fortran especially suited to technical applications such as electrical engineering by  versions of fortran were available for the ibm    and  computers significantly the increasing popularity of fortran spurred competing computer manufacturers to provide fortran compilers for their machines so that by  over  fortran compilers existed for these reasons fortran is considered to be the first widely used programming language supported across a variety of computer architectures the development of fortran paralleled the early evolution of compiler technology and many advances in the theory and design of compilers were specifically motivated by the need to generate efficient code for fortran programs fortran the initial release of fortran for the ibm  contained  statements including the arithmetic codice statement was similar to a threeway branch instruction on the ibm  however the  branch instructions all contained only one destination address eg tze transfer ac zero tnz transfer ac not zero tpl transfer ac plus tmi transfer ac minus the machine and its successors in the  series did have a threeway skip instruction cas compare ac with storage but using this instruction to implement the codice would consume  instruction words require the constant zero in a word of storage and take  machine cycles to execute using the transfer instructions to implement the codice could be done in  to  instruction words required no constants in storage and take  to  machine cycles to execute an optimizing compiler like fortran would most likely select the more compact and usually faster transfers instead of the compare use of transfers also allowed the codice statement to optimize codices which could not be done using the compare also the compare considered  and  to be different values while the transfer zero and transfer not zero considered them to be the same the codice statement in fortran was used originally and optionally to give branch probabilities for the three branch cases of the arithmetic if statement the first fortran compiler used this weighting to perform at compile time a monte carlo simulation of the generated code the results of which were used to optimize the placement of basic blocks in memory a very sophisticated optimization for its time the monte carlo technique is documented in backus et als paper on this original implementation the fortran automatic coding system the fundamental unit of program is the basic block a basic block is a stretch of program which has one entry point and one exit point the purpose of section  is to prepare for section  a table of predecessors pred table which enumerates the basic blocks and lists for every basic block each of the basic blocks which can be its immediate predecessor in flow together with the absolute frequency of each such basic block link this table is obtained by running the program once in montecarlo fashion in which the outcome of conditional transfers arising out of iftype statements and computed go tos is determined by a random number generator suitably weighted according to whatever frequency statements have been provided many years later the codice statement had no effect on the code and was treated as a comment statement since the compilers no longer did this kind of compiletime simulation a similar fate has befallen compiler hints in several other programming languages for example cs codice keyword fixed layout and punched cards before the development of disk files text editors and terminals programs were most often entered on a keypunch keyboard onto column punched cards one line to a card the resulting deck of cards would be fed into a card reader to be compiled punchedcard codes included no lowercase letters or many special characters and special versions of the ibm  keypunch were offered that would correctly print the repurposed special characters used in fortran reflecting punchedcard input practice fortran programs were originally written in a fixedcolumn format with the first  columns read into twelve bit words a letter c in column  caused the entire card to be treated as a comment and ignored by the compiler otherwise the columns of the card were divided into four fields columns  to  could therefore be used for identification information such as punching a sequence number which could be used to reorder cards if a stack of cards was dropped though in practice this was reserved for stable production programs an ibm  could be used to copy a program deck and add sequence numbers some early compilers eg the ibm s had additional restrictions due to limitations on their card readers keypunches could be programmed to tab to column  and skip out after column  later compilers relaxed most fixedformat restrictions and the requirement was eliminated in the fortran  standard within the statement field whitespace characters blanks were ignored outside a text literal this allowed omitting spaces between tokens for brevity or including spaces within identifiers for clarity for example avg of x was a valid identifier equivalent to avgofx and doi was a valid statement equivalent to  do  i    because the zero in column  is treated as if it were a space  while doi was instead  doi   the assignment of  to a variable called doi note the slight visual difference between a comma and a period hollerith strings originally allowed only in format and data statements were prefixed by a character count and the letter h eg hthis is alphanumeric data allowing blanks to be retained within the character string miscounts were a problem fortran ii ibms fortran ii appeared in  the main enhancement was to support procedural programming by allowing userwritten subroutines and functions which returned values with parameters passed by reference the common statement provided a way for subroutines to access common or global variables six new statements were introduced over the next few years fortran ii would also add support for the codice and codice data types early fortran compilers supported no recursion in subroutines early computer architectures supported no concept of a stack and when they did directly support subroutine calls the return location was often stored in one fixed location adjacent to the subroutine code which does not permit a subroutine to be called again before a prior call of the subroutine has returned although not specified in fortran  many f compilers supported recursion as an option while it became a standard in fortran  simple fortran ii program this program for herons formula reads data on a tape reel containing three digit integers a b and c as input if a b and c cannot represent the sides of a triangle in plane geometry then the programs execution will end with an error code of stop  otherwise an output line will be printed showing the input values for a b and c followed by the computed area of the triangle as a floatingpoint number with  digits after the decimal point c area of a triangle with a standard square root function c input  tape reader unit  integer input c output  line printer unit  real output c input error display error output code  in job control listing c ia ib and ic may not be negative c furthermore the sum of two sides of a triangle c must be greater than the third side so we check for that too c using herons formula we calculate the c area of the triangle fortran iii ibm also developed a fortran iii in  that allowed for inline assembly code among other features however this version was never released as a product like the  fortran and fortran ii fortran iii included machinedependent features that made code written in it unportable from machine to machine early versions of fortran provided by other vendors suffered from the same disadvantage ibm  fortran fortran was provided for the ibm  computer by an innovative phase compiler that ran entirely in its core memory of only  bit characters the compiler could be run from tape or from a card deck it used no further tape or disk storage it kept the program in memory and loaded overlays that gradually transformed it in place into executable form as described by haines and in ibm document c the executable form was not entirely machine language rather floatingpoint arithmetic subscripting inputoutput and function references were interpreted anticipating ucsd pascal pcode by two decades ibm later provided a fortran iv compiler for the  series of computers described in ibm document c fortran iv starting in  as a result of customer demands ibm began development of a fortran iv that removed the machinedependent features of fortran ii such as codice while adding new features such as a codice data type logical boolean expressions and the logical if statement as an alternative to the arithmetic if statement fortran iv was eventually released in  first for the ibm  stretch computer followed by versions for the ibm  ibm  and later for the ibm  in  by  fortran iv was supposed to be compliant with the standard being developed by the american standards association x fortran working group at about this time fortran iv had started to become an important educational tool and implementations such as the university of waterloos watfor and watfiv were created to simplify the complex compile and link processes of earlier compilers fortran  perhaps the most significant development in the early history of fortran was the decision by the american standards association now american national standards institute ansi to form a committee sponsored by bema the business equipment manufacturers association to develop an american standard fortran the resulting two standards approved in march  defined two languages fortran based on fortran iv which had served as a de facto standard and basic fortran based on fortran ii but stripped of its machinedependent features the fortran defined by the first standard officially denoted x became known as fortran  although many continued to term it fortran iv the language on which the standard was largely based fortran  effectively became the first industrystandard version of fortran fortran  included fortran  after the release of the fortran  standard compiler vendors introduced several extensions to standard fortran prompting ansi committee xj in  to begin work on revising the  standard under sponsorship of cbema the computer business equipment manufacturers association formerly bema final drafts of this revised standard circulated in  leading to formal approval of the new fortran standard in april  the new standard called fortran  and officially denoted x added a number of significant features to address many of the shortcomings of fortran  in this revision of the standard a number of features were removed or altered in a manner that might invalidate formerly standardconforming programs removal was the only allowable alternative to xj at that time since the concept of deprecation was not yet available for ansi standards while most of the  items in the conflict list see appendix a of x addressed loopholes or pathological cases permitted by the prior standard but rarely used a small number of specific capabilities were deliberately removed such as dimension a variants minnesota fortran control data corporation computers had another version of fortran  called minnesota fortran mnf designed especially for student use with variations in output constructs special uses of commons and data statements optimizations code levels for compiling and detailed error listings extensive warning messages and debugs transition to ansi standard fortran the development of a revised standard to succeed fortran  would be repeatedly delayed as the standardization process struggled to keep up with rapid changes in computing and programming practice in the meantime as the standard fortran for nearly fifteen years fortran  would become the historically most important dialect an important practical extension to fortran  was the release of milstd in  this specification developed by the us department of defense standardized a number of features implemented by most fortran  compilers but not included in the ansi fortran  standard these features would eventually be incorporated into the fortran  standard the ieee  posix standard released in  provided a simple means for fortran  programmers to issue posix system calls over  calls were defined in the document allowing access to posixcompatible process control signal handling file system control device control procedure pointing and stream io in a portable manner fortran  the much delayed successor to fortran  informally known as fortran  and prior to that fortran x was finally released as isoiec standard  in  and an ansi standard in  in addition to changing the official spelling from fortran to fortran this major revision added many new features to reflect the significant changes in programming practice that had evolved since the  standard obsolescence and deletions unlike the prior revision fortran  removed no features appendix b says the list of deleted features in this standard is empty any standardconforming fortran  program is also standardconforming under fortran  and either standard should be usable to define its behavior a small set of features were identified as obsolescent and expected to be removed in a future standard hello world example program helloworld end program helloworld fortran  fortran  published officially as isoiec  was a minor revision mostly to resolve some outstanding issues from the fortran  standard nevertheless fortran  also added a number of extensions notably from the high performance fortran specification a number of intrinsic functions were extended for example a codice argument was added to the codice intrinsic several features noted in fortran  to be obsolescent were removed from fortran  an important supplement to fortran  was the iso technical report tr enhanced data type facilities informally known as the allocatable tr this specification defined enhanced use of codice arrays prior to the availability of fully fortran compliant fortran compilers such uses include codice arrays as derived type components in procedure dummy argument lists and as function return values codice arrays are preferable to codicebased arrays because codice arrays are guaranteed by fortran  to be deallocated automatically when they go out of scope eliminating the possibility of memory leakage in addition elements of allocatable arrays are contiguous and aliasing is not an issue for optimization of array references allowing compilers to generate faster code than in the case of pointers another important supplement to fortran  was the iso technical report tr floatingpoint exception handling informally known as the ieee tr this specification defined support for ieee floatingpoint arithmetic and floating point exception handling conditional compilation and varying length strings in addition to the mandatory base language defined in isoiec    the fortran  language also includes two optional modules which together compose the multipart international standard isoiec  according to the standards developers the optional parts describe selfcontained features which have been requested by a substantial body of users andor implementors but which are not deemed to be of sufficient generality for them to be required in all standardconforming fortran compilers nevertheless if a standardconforming fortran does provide such options then they must be provided in accordance with the description of those facilities in the appropriate part of the standard fortran  fortran  officially published as isoiec  is a major revision introducing many new features a comprehensive summary of the new features of fortran  is available at the fortran working group isoiec jtcscwg official web site from that article the major enhancements for this revision include an important supplement to fortran  was the iso technical report tr enhanced module facilities in fortran this report provided submodules which make fortran modules more similar to modula modules they are similar to ada private child subunits this allows the specification and implementation of a module to be expressed in separate program units which improves packaging of large libraries allows preservation of trade secrets while publishing definitive interfaces and prevents compilation cascades fortran  the most recent standard isoiec  informally known as fortran  was approved in september  as with fortran  this is a minor upgrade incorporating clarifications and corrections to fortran  as well as introducing a select few new capabilities the new capabilities include the final draft international standard fdis is available as document n an important supplement to fortran  is the iso technical specification ts  on further interoperability of fortran with c which has been submitted to iso in may  for approval the specification adds support for accessing the array descriptor from c and allows ignoring the type and rank of arguments fortran  the next revision of the language fortran  is intended to be a minor revision and is planned for release in mid it is currently planned to include further interoperability between fortran and c additional parallel features and the removal of simple deficiencies in and discrepancies between existing facilities fortran and supercomputers although a  journal article by the authors of basic already described fortran as oldfashioned since fortran has been in use for many decades there is a vast body of fortran software in daily use throughout the scientific and engineering communities jay pasachoff wrote in  that physics and astronomy students simply have to learn fortran so much exists in fortran that it seems unlikely that scientists will change to pascal modula or whatever in  cecil e leith called fortran the mother tongue of scientific computing adding that its replacement by any other possible language may remain a forlorn hope it is the primary language for some of the most intensive supercomputing tasks such as astronomy weather and climate modeling numerical linear algebra lapack numerical libraries imsl and nag structural engineering hydrological modeling optimization satellite simulation and data analysis computational fluid dynamics computational chemistry computational economics and computational physics many of the floatingpoint benchmarks to gauge the performance of new computer processors such as cfp the floatingpoint component of the spec cpu benchmarks are written in fortran on the other hand more modern code generally uses large program libraries such as petsc or trilinos for linear algebra capabilities metis for graph partitioning dealii or fenics for mesh and finite element support and other generic libraries since the late s almost all of the most widely used support libraries have been written in c and more often c consequently a growing fraction of scientific code is also written in these languages for this reason facilities for interoperation with c were added to fortran  and enhanced by isoiec technical specification  which will be incorporated into fortran  this shift is also evident in the selection of applications between the spec cpu  and spec cpu  floating point benchmarks language features the precise characteristics and syntax of fortran  are discussed in fortran  language features portability portability was a problem in the early days because there was no agreed standard not even ibms reference manual and computer companies vied to differentiate their offerings from others by providing incompatible features standards have improved portability the  standard provided a reference syntax and semantics but vendors continued to provide incompatible extensions although careful programmers were coming to realize that use of incompatible extensions caused expensive portability problems and were therefore using programs such as the pfort verifier it was not until after the  standard when the national bureau of standards now nist published fips pub  that processors purchased by the us government were required to diagnose extensions of the standard rather than offer two processors essentially every compiler eventually had at least an option to diagnose extensions incompatible extensions were not the only portability problem for numerical calculations it is important to take account of the characteristics of the arithmetic this was addressed by fox et al in the context of the  standard by the port library the ideas therein became widely used and were eventually incorporated into the  standard by way of intrinsic inquiry functions the widespread now almost universal adoption of the ieee  standard for binary floatingpoint arithmetic has essentially removed this problem access to the computing environment eg the programs command line environment variables textual explanation of error conditions remained a problem until it was addressed by the  standard large collections of library software that could be described as being loosely related to engineering and scientific calculations such as graphics libraries have been written in c and therefore access to them presented a portability problem this has been addressed by incorporation of c interoperability into the  standard it is now possible and relatively easy to write an entirely portable program in fortran even without recourse to a preprocessor variants fortran  fortran  was marketed by data general corp in the late s and early s for the nova eclipse and mv line of computers it had an optimizing compiler that was quite good for minicomputers of its time the language most closely resembles fortran  the name is a pun on the earlier fortran iv fortran v fortran v was distributed by control data corporation in  for the cdc  series the language was based upon fortran iv univac also offered a compiler for the  series known as fortran v a spinoff of univac fortran v was athena fortran fortran  fortran  or visual fortran  was licensed to compaq by microsoft they have licensed compaq visual fortran and have provided the visual studio  environment interface for compaq v up to v specific variants vendors of highperformance scientific computers eg burroughs control data corporation cdc cray honeywell ibm texas instruments and univac added extensions to fortran to take advantage of special hardware features such as instruction cache cpu pipelines and vector arrays for example one of ibms fortran compilers h extended iup had a level of optimization which reordered the machine code instructions to keep multiple internal arithmetic units busy simultaneously another example is cfd a special variant of fortran designed specifically for the illiac iv supercomputer running at nasas ames research center ibm research labs also developed an extended fortranbased language called vectran for processing vectors and matrices objectoriented fortran was an objectoriented extension of fortran in which data items can be grouped into objects which can be instantiated and executed in parallel it was available for sun iris ipsc and ncube but is no longer supported such machinespecific extensions have either disappeared over time or have had elements incorporated into the main standards the major remaining extension is openmp which is a crossplatform extension for shared memory programming one new extension coarray fortran is intended to support parallel programming for transit for the ibm  for transit was the name of a reduced version of the ibm  fortran language which was implemented for the ibm  using a translator program developed at carnegie in the late s the following comment appears in the ibm reference manual for transit automatic coding system c copyright   by ibm the fortran system was designed for a more complex machine than the  and consequently some of the  statements found in the fortran programmers reference manual are not acceptable to the for transit system in addition certain restrictions to the fortran language have been added however none of these restrictions make a source program written for for transit incompatible with the fortran system for the  the permissible statements were up to ten subroutines could be used in one program for transit statements were limited to columns  through  only punched cards were used for input and output on the ibm  three passes were required to translate source code to the it language then to compile the it statements into soap assembly language and finally to produce the object program which could then be loaded into the machine to run the program using punched cards for data input and outputting results onto punched cards two versions existed for the s with a  word memory drum for transit i s and for transit ii the latter for machines equipped with indexing registers and automatic floating point decimal biquinary arithmetic appendix a of the manual included wiring diagrams for the ibm  card readerpunch control panel fortranbased languages prior to fortran  a number of preprocessors were commonly used to provide a friendlier language with the advantage that the preprocessed code could be compiled on any machine with a standard fortran compiler these preprocessors would typically support structured programming variable names longer than six characters additional data types conditional compilation and even macro capabilities popular preprocessors included flecs iftran mortran sftran sfortran ratfor and ratfiv ratfor and ratfiv for example implemented a clike language outputting preprocessed code in standard fortran  despite advances in the fortran language preprocessors continue to be used for conditional compilation and macro substitution one of the earliest versions of fortran introduced in the s was popularly used in colleges and universities developed supported and distributed by the university of waterloo watfor was based largely on fortran iv a watfor student could submit their batch fortran job and if there were no syntax errors the program would move straight to execution this simplification allowed students to concentrate on their programs syntax and semantics or execution logic flow rather than dealing with submission job control language jcl the compilelinkeditexecution successive processes or other complexities of the mainframeminicomputer environment a down side to this simplified environment was that watfor was not a good choice for programmers needing the expanded abilities of their host processors eg watfor typically had very limited access to io devices watfor was succeeded by watfiv and its later versions lrltran was developed at the lawrence radiation laboratory to provide support for vector arithmetic and dynamic storage among other extensions to support systems programming the distribution included the ltss operating system the fortran standard includes an optional part  which defines an optional conditional compilation capability this capability is often referred to as coco many fortran compilers have integrated subsets of the c preprocessor into their systems simscript is an application specific fortran preprocessor for modeling and simulating large discrete systems the f programming language was designed to be a clean subset of fortran  that attempted to remove the redundant unstructured and deprecated features of fortran such as the codice statement f retains the array features added in fortran  and removes control statements that were made obsolete by structured programming constructs added to both fortran  and fortran  f is described by its creators as a compiled structured array programming language especially well suited to education and scientific computing lahey and fujitsu teamed up to create fortran for the microsoft net framework silverfrost ftn is also capable of creating net code code examples the following program illustrates dynamic memory allocation and arraybased operations two features introduced with fortran  particularly noteworthy is the absence of codice loops and codicecodice statements in manipulating the array mathematical operations are applied to the array as a whole also apparent is the use of descriptive variable names and general code formatting that conform with contemporary programming style this example computes an average over data entered interactively program average end program average humor during the same fortran standards committee meeting at which the name fortran  was chosen a satirical technical proposal was incorporated into the official distribution bearing the title letter o considered harmful this proposal purported to address the confusion that sometimes arises between the letter o and the numeral zero by eliminating the letter from allowable variable names however the method proposed was to eliminate the letter from the character set entirely thereby retaining  as the number of lexical characters which the colon had increased to  this was considered beneficial in that it would promote structured programming by making it impossible to use the notorious codice statement as before troublesome codice statements would also be eliminated it was noted that this might invalidate some existing programs but that most of these probably were nonconforming anyway during the standards committee battle over whether the minimum trip count for the fortran  codice statement should be zero allowing no execution of the block or one the plungeahead codice another facetious alternative was proposed by loren meissner to have the minimum be two since there is no need for a loop if it is only executed once when assumedlength arrays were being added there was a dispute as to the appropriate character to separate upper and lower bounds in a comment examining these arguments dr walt brainerd penned an article entitled astronomy vs gastroenterology because some proponents had suggested using the star or asterisk  while others favored the colon  in fortran  variable names beginning with the letters in had a default type of integer while variables starting with any other letters defaulted to real although programmers could override the defaults with an explicit declaration this led to the joke in fortran god is real unless declared integer