speakeasy computational environment speakeasy is a numerical computing interactive environment also featuring an interpreted programming language it was initially developed for internal use at the physics division of argonne national laboratory by the theoretical physicist stanley cohen he eventually founded speakeasy computing corporation to make the program available commercially speakeasy is a very longlasting numerical package in fact the original version of the environment was built around a core dynamic data repository called named storage developed in the early s while the most recent version has been released in  speakeasy was aimed to make the computational work of the physicists at the argonne national laboratory easier it was initially conceived to work on mainframes the only kind of computers at that time and was subsequently ported to new platforms minicomputers personal computers as they became available the porting of the same code on different platforms was made easier by using mortran metalanguage macros to face systems dependencies and compilers deficiencies and differences speakeasy is currently available on several platforms  pcs running windows os x linux departmental computers and workstations running several flavors of linux aix or solaris speakeasy was also among the first interactive numerical computing environments having been implemented in such a way on a cdc  system and later on ibm tso machines as one was in betatesting at the argonne national laboratory at the time almost since the beginning as the dynamic linking functionality was made available in the operating systems speakeasy features the capability of expanding its operational vocabulary using separated modules dynamically linked to the core processor as they are needed for that reason such modules were called linkules linkablemodules they are functions with a generalized interface which can be written in fortran or in c the independence of each of the new modules from the others and from the main processor is of great help in improving the system especially it was in the old days this easy way of expanding the functionalities of the main processor was often exploited by the users to develop their own specialized packages besides the programs functions and subroutines the user can write in the speakeasys own interpreted language linkules add functionalities carried out with the typical performances of compiled programs among the packages developed by the users one of the most important is modeleasy originally developed as fedeasy in the early s at the research department of the federal reserve board of governors in washington dc modeleasy implements special objects and functions for large econometric models estimation and simulation its evolution led eventually to its distribution as an independent product syntax the symbol  colonunderscore is both the speakeasy logo and the prompt of the interactive session the dollar sign is used for delimiting comments the ampersand is used to continue a statement on the following physical line in which case the prompt becomes  colonampersand a semicolon can separate statements written on the same physical line as its own name tells speakeasy was aimed to expose a syntax as friendly as possible to the user and as close as possible to the spoken language the best example of that is given by the set of commands for readingwriting data fromto the permanent storage eg the languages keywords are in upper case to clarify the point variables ie speakeasy objects are given a name up to  character long when longname option is on up to  characters otherwise for backward compatibility they are dynamically typed depending on the value assigned to them arguments of functions are usually not required to be surrounded by parenthesis or separated by commas provided that the context remains clear and unambiguous for example can be written  or even many other syntax simplifications are possible for example to define an object named a valued to a tenelements array of zeroes one can write any of the following statements speakeasy is a vectororiented language giving a structured argument to a function of a scalar the result is usually an object with the same structure of the argument in which each element is the result of the function applied to the corresponding element of the argument in the example given above the result of function sin applied to the array let us call it x generated by the function grid is the array answer whose element answeri equals sinxi for each i from  to noelsx the number of elements of x in other words the statement is equivalent to the following fragment of program the vectororiented statements avoid writing programs for such loops and are much faster than them work area and objects by the very first statement of the session the user can define the size of the named storage or work area or allocator which is allocated once and for all at the beginning of the session within this fixedsize work area the speakeasy processor dynamically creates and destroys the work objects as needed a usertunable garbage collection mechanism is provided to maximize the size of the free block in the work area packing the defined objects in the low end or in the high end of the allocator at any time the user can ask about used or remaining space in the work area raw object orientation within reasonable conformity and compatibility constraints the speakeasy objects can be operated on using the same algebraic syntax from this point of view and considering the dynamic and structured nature of the data held in the named storage it is possible to say that speakeasy since the beginning implemented a very raw form of operator overloading and a pragmatic approach to some features of what was later called object oriented programming although it did not evolve further in that direction the object families speakeasy provides a bunch of predefined families of data objects scalars arrays up to  dimensions matrices sets time series the elemental data can be of kind real bytes complex xbytes characterliteral or nameliteral  matrices elements can be real or complex time series values can only be real  time series missing values for time series processing five types of missing values are provided they are denoted by na not available nc not computable nd not defined along with nb and ne the meaning of which is not predetermined and is left available for the linkules developer they are internally represented by specific and very small numeric values acting as codes all the time series operations take care of the presence of missing values propagating them appropriately in the results depending on a specific setting missing values can be represented by the above notation by a question mark symbol or a blank useful in tables when used in input the question mark is interpreted as an na missing value in numerical objects other than time series the concept of missing values is meaningless and the numerical operations on them use the actual numeric values regardless they correspond to missing values codes or not although missing values codes can be input and shown as such note that in other contexts a question mark may have a different meaning for example when used as the first and possibly only character of a command line it means the request to show more pieces of a long error message which ends with a  symbol logical values some support is provided for logical values relational operators the fortran syntax can be used and logical expressions logical values are stored actually as numeric values with  meaning false and nonzero  on output meaning true programming special objects such as program subroutine and function objects collectively referred to as procedures can be defined for operations automation another way for running several instructions with a single command is to store them into a usefile and make the processor read them by mean of the use command usefiles useing a usefile is the simplest way for performing several instruction with minimal typed input this operation roughly corresponds to what sourceing a file is in other scripting languages a usefile is an alternate input source to the standard console and can contain all the commands a user can input by the keyboard hence no multiline flow control construct is allowed the processor reads and executes usefiles one line at a time usefile execution can be concatenated but not nested ie the control does not return to the caller at the completion of the called usefile procedures full programming capability is achieved using procedures they are actually speakeasy objects which must be defined in the work area to be executed an option is available in order to make the procedures being automatically retrieved and loaded from the external storage as they are needed procedures can contain any of the execution flow control constructs available in the speakeasy programming language programs a program can be run simply invoking its name or using it as the argument of the command execute in the latter case a further argument can identify a label from which the execution will begin speakeasy programs differs from the other procedures for being executed at the same scoping level they are referenced to hence they have full visibility of all the objects defined at that level and all the objects created during their execution will be left there for subsequent uses for that reason no argument list is needed subroutines and functions subroutines and functions are executed at a new scoping level which is removed when they finish the communication with the calling scoping level is carried out through the argument list in both directions this implements data hiding ie objects created within a subroutine or a function are not visible to other subroutine and functions but through argument lists a global level is available for storing object which must be visible from within any procedure eg the procedures themselves the functions differ from the subroutines because they also return a functional value reference to them can be part of more complex statement and are replaced by the returned functional value when evaluating the statement in some extent speakeasy subroutines and functions are very similar to the fortran procedures of the same name flow control an ifthenelse construct is available for conditional execution and two forms of fornext construct are provided for looping a go to label statement is provided for jumping while a fortranlike computed go to statement can be used fort multiple branching an on error mechanism with several options provides a means for error handling linkule writing linkules are functions usually written in fortran  or unsupportedly in c  with the aid of mortran or c macros and an api library they can interface the speakeasy workarea for retrieving defining manipulating any speakeasy object most of the speakeasy operational vocabulary is implemented via linkules they can be statically linked to the core engine or dynamically loaded as they are needed provided they are properly compiled as shared objects unix or dll windows