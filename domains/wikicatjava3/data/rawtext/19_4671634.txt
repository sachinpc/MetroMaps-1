atlas transformation language atl atl transformation language is a model transformation language and toolkit developed and maintained by obeo and atlanmod it was initiated by the atlanmod team previously called atlas group in the field of modeldriven engineering mde atl provides ways to produce a set of target models from a set of source models released under the terms of the eclipse public license atl is an mm eclipse component inside of the eclipse modeling project emp overview atl is a model transformation language mtl developed by obeo and inria to answer the qvt request for proposal qvt is an object management group standard for performing model transformations it can be used to do syntactic or semantic translation atl is built on top of a model transformation virtual machine atl is the atlas inria  lina research group answer to the omg mofqvt rfp it is a model transformation language specified both as a metamodel and as a textual concrete syntax it is a hybrid of declarative and imperative the preferred style of transformation writing is declarative which means simple mappings can be expressed simply however imperative constructs are provided so that some mappings too complex to be declaratively handled can still be specified an atl transformation program is composed of rules that define how source model elements are matched and navigated to create and initialize the elements of the target models architecture a modeltransformationoriented virtual machine has been defined and implemented to provide execution support for atl while maintaining a certain level of flexibility as a matter of fact atl becomes executable simply because a specific transformation from its metamodel to the virtual machine bytecode exists extending atl is therefore mainly a matter of specifying the new language features execution semantics in terms of simple instructions basic actions on models elements creations and properties assignments example an atl program tatl here will take model maxmi as input and will produce model mbxmi as output both models may be expressed in the omg xmi standard the model ma conforms to metamodel mmakm model mb conforms to metamodel mmbkm the km notation is a simple and neutral metamodel specification language the atl program itself tatl here is also a model so it conforms to a metamodel the atl metamodel not presented here an atl program is composed of a header of a set of sideeffect free functions called helpers and of a set of rules implementations there is an associated atl development toolkit plugin available in open source from the gmt eclipse modeling project emp that implements the atl transformation language which is inspired by the mof queryviewtransformation language qvt a large library of transformations is available from  mof qvt is a domain specific language for model transformation it supports models conforming to ecore emof km a specific domain specific language for metamodel specification etc atl is also running on mdrnetbeans