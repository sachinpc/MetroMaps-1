ateji px ateji px is an objectoriented programming language extension for java it is intended to facilliate parallel computing on multicore processors gpu grid and cloud ateji px can be integrated with the eclipse ide requires minimal learning of the additional parallel constructs and does not alter the development process code examples hello world each codice symbol introduces a parallel branch running this program will print either or depending on how the parallel branches happen to be scheduled data parallelism the quantification codice creates one parallel branch for each value of codice the effect of this code is to increment all elements of codice in parallel this code is equivalent to more complex quantifications are possible the following example quantifies over the upper left triangle of a square matrix code that performs a similar and typically small operation on a large collection of elements is called data parallel and appears often in highperformance scientific applications a typical representative of dataparallel languages for the cc or fortran ecosystems is openmp data parallelism features can also be implemented by libraries using dedicated data structures such as parallel arrays task parallelism the term task parallelism is used when work can conceptually be decomposed into a number of logical tasks in this example tasks are created recursively task parallelism is implemented in languages such as cilk and in libraries similar to the codice pair of unix system calls messagepassing parallel branches have two ways of communicating either by concurrently reading and writing shared variables or by sending explicit messages the operators codice and codice respectively send and receive a message on a channel in this example two parallel branches communicate via explicit message passing dataflow a program is said to be dataflow when computation is initiated and synchronized by the availability of data in a flow a typical example is an adder it has two inputs one output and whenever the two inputs are ready it sends their sum on the output note the parallel read codice it means that the two input values can come in any order without it the code may deadlock if values were coming in the wrong order this shows that parallel primitives in a programming language are not only about performance but also about the behavior of programs the adder by itself doesnt do anything since it reacts on input data it needs to be put in a context where other parts feed input values and read output values the way to express this is to compose all pieces in a large parallel block anything that can be thought of as a combination of logical gates or electrical circuits can readily be expressed in this way as a dataflow program