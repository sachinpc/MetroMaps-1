classpath java classpath is a parameter in the java virtual machine or the java compiler that specifies the location of userdefined classes and packages the parameter may be set either on the commandline or through an environment variable overview and architecture similar to the classic dynamic loading behavior when executing java programs the java virtual machine finds and loads classes lazily it loads the bytecode of a class only when the class is first used the classpath tells java where to look in the filesystem for files defining these classes the virtual machine searches for and loads classes in this order by default only the packages of the jdk standard api and extension packages are accessible without needing to set where to find them the path for all userdefined packages and libraries must be set in the commandline or in the manifest associated with the jar file containing the classes setting the path to execute java programs supplying as application argument suppose we have a package called orgmypackage containing the classes and the files defining this package are stored physically under the directory dmyprogram on windows or homeusermyprogram on linux the file structure looks like this when we invoke java we specify the name of the application to run orgmypackagehelloworld however we must also tell java where to look for the files and directories defining our package so to launch the program we use the following command where setting the path through an environment variable the environment variable named codice may be alternatively used to set the classpath for the above example we could also use on windows the rule is that codice option when used to start the java application overrides the codice environment variable if none are specified the current working directory is used as classpath this means that when our working directory is codice on linux codice we would not need to specify the classpath explicitly when overriding however it is advised to include current folder codice into the classpath in the case when loading classes from current folder is desired the same applies not only to java launcher but also to javac the java compiler setting the path of a jar file if a program uses a supporting library enclosed in a jar file called supportlibjar physically in the directory dmyprogramlib and the corresponding physical file structure is the following commandline option is needed or alternatively adding all jar files in a directory in java  and higher one can add all jarfiles in a specific directory to the classpath using wildcard notation windows example linux example this works for both codice options and environment classpaths setting the path in a manifest file if a program has been enclosed in a jar file called helloworldjar located directly in the directory dmyprogram the directory structure is as follows the manifest file defined in helloworldjar has this definition the manifest file should end with either a new line or carriage return the program is launched with the following command this automatically starts orgmypackagehelloworld specified in class mainclass with the arguments the user cannot replace this class name using the invocation  classpath describes the location of supportlibjar relative to the location of the library helloworldjar neither absolute file path which is permitted in parameter on the command line nor jarinternal paths are supported this means that if the main class file is contained in a jar orgmypackagehelloworldclass must be a valid path on the root within the jar multiple classpath entries are separated with spaces os specific notes being closely associated with the file system the commandline classpath syntax depends on the operating system for example this does not apply when the classpath is defined in manifest files where each file path must be separated by a space  regardless of the operating system