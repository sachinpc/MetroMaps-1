simula simula is the name of two simulation programming languages simula i and simula  developed in the s at the norwegian computing center in oslo by olejohan dahl and kristen nygaard syntactically it is a fairly faithful superset of algol  simula  introduced objects classes inheritance and subclasses virtual procedures coroutines and discrete event simulation and features garbage collection also other forms of subtyping besides inheriting subclasses were introduced in simula derivatives simula is considered the first objectoriented programming language as its name suggests simula was designed for doing simulations and the needs of that domain provided the framework for many of the features of objectoriented languages today simula has been used in a wide range of applications such as simulating vlsi designs process modeling protocols algorithms and other applications such as typesetting computer graphics and education the influence of simula is often understated and simulatype objects are reimplemented in c object pascal java c and several other languages the creator of c bjarne stroustrup has acknowledged that simula  was the greatest influence on him to develop c to bring the kind of productivity enhancements offered by simula to the raw computational speed offered by lower level languages like bcpl history the following account is based on jan rune holmeviks historical essay kristen nygaard started writing computer simulation programs in  nygaard saw a need for a better way to describe the heterogeneity and the operation of a system to go further with his ideas on a formal computer language for describing a system nygaard realized that he needed someone with more computer programming skills than he had olejohan dahl joined him on his work january  the decision of linking the language up to algol  was made shortly after by may  the main concepts for a simulation language were set simula i was born a special purpose programming language for simulating discrete event systems kristen nygaard was invited to univac late may  in connection with the marketing of their new univac  computer at that visit nygaard presented the ideas of simula to robert bemer the director of systems programming at univac bemer was a sworn algol fan and found the simula project compelling bemer was also chairing a session at the second international conference on information processing hosted by ifip he invited nygaard who presented the paper simula  an extension of algol to the description of discreteevent networks norwegian computing center got a univac  august  at a considerable discount on which dahl implemented the simula i under contract with univac the implementation was based on the univac algol  compiler simula i was fully operational on the univac  by january  in the following couple of years dahl and nygaard spent a lot of time teaching simula simula spread to several countries around the world and simula i was later implemented on burroughs b computers and the russian ural computer in  c a r hoare introduced the concept of record class construct which dahl and nygaard extended with the concept of prefixing and other features to meet their requirements for a generalized process concept dahl and nygaard presented their paper on class and subclass declarations at the ifip working conference on simulation languages in oslo may  this paper became the first formal definition of simula  in june  a conference was held to standardize the language and initiate a number of implementations dahl proposed to unify the type and the class concept this led to serious discussions and the proposal was rejected by the board simula  was formally standardized on the first meeting of the simula standards group ssg in february  simula was influential in the development of smalltalk and later objectoriented programming languages it also helped inspire the actor model of concurrent computation although simula only supports coroutines and not true concurrency in the late sixties and the early seventies there were four main implementations of simula these implementations were ported to a wide range of platforms the tops implemented the concept of public protected and private member variables and procedures that later was integrated into simula  simula  is the latest standard and is ported to a wide range of platforms there are mainly three implementations in november  dahl and nygaard were awarded the ieee john von neumann medal by the institute of electrical and electronic engineers for the introduction of the concepts underlying objectoriented programming through the design and implementation of simula  in february  they received the  a m turing award by the association for computing machinery acm with the citation for ideas fundamental to the emergence of object oriented programming through their design of the programming languages simula i and simula  unfortunately neither dahl nor nygaard could make it to the acm turing award lecture scheduled to be delivered at the oopsla  conference in seattle as they both died within two months of each other in june and august respectively simula research laboratory is a research institute named after the simula language and nygaard held a parttime position there from the opening in  the new computer science building at the university of oslo is named ole johan dahls house after one of the two inventors of simula the main auditorium in ole johan dahls house is named simula simula is still used for various types of university courses for instance jarek sklenar teaches simula to students at university of malta sample code minimal program the empty computer file is the minimal program in simula measured by the size of the source code it consists of one thing only a dummy statement however the minimal program is more conveniently represented as an empty block it begins executing and immediately terminates the language does not have any return value from the program itself classic hello world an example of a hello world program in simula simula is caseinsensitive classes subclasses and virtual procedures a more realistic example with use of classes subclasses and virtual procedures the above example has one super class glyph with two subclasses char and line there is one virtual procedure with two implementations the execution starts by executing the main program simula does not have the concept of abstract classes since classes with pure virtual procedures can be instantiated this means that in the above example all classes can be instantiated calling a pure virtual procedure will however produce a runtime error call by name simula supports call by name so the jensens device can easily be implemented however the default transmission mode for simple parameter is call by value contrary to algol which used call by name the source code for the jensens device must therefore specify call by name for the parameters when compiled by a simula compiler another much simpler example is the summation function formula which can be implemented as follows the above code uses call by name for the controlling variable k and the expression u this allows the controlling variable to be used in the expression note that the simula standard allows for certain restrictions on the controlling variable in a for loop the above code therefore uses a while loop for maximum portability the following formula can then be implemented as follows simulation simula includes a simulation package for doing discrete event simulations this simulation package is based on simulas object oriented features and its coroutine concept sam sally and andy are shopping for clothes they have to share one fitting room each one of them is browsing the store for about  minutes and then uses the fitting room exclusively for about three minutes each following a normal distribution a simulation of their fitting room experience is as follows the main block is prefixed with codice for enabling simulation the simulation package can be used on any block and simulations can even be nested when simulating someone doing simulations the fitting room object uses a queue codice for getting access to the fitting room when someone requests the fitting room and its in use they must wait in this queue codice when someone leaves the fitting room the first one if any is released from the queue codice and accordingly removed from the door queue codice person is a subclass of process and its activity is described using hold time for browsing the store and time spent in the fitting room and calls procedures in the fitting room object for requesting and leaving the fitting room the main program creates all the objects and activates all the person objects to put them into the event queue the main program holds for  minutes of simulated time before the program terminates