opengl shading language opengl shading language abbreviated glsl or glslang is a highlevel shading language based on the syntax of the c programming language it was created by the opengl arb opengl architecture review board to give developers more direct control of the graphics pipeline without having to use arb assembly language or hardwarespecific languages background with advances in graphics cards new features have been added to allow for increased flexibility in the rendering pipeline at the vertex and fragment level programmability at this level is achieved with the use of fragment and vertex shaders originally this functionality was achieved by writing shaders in arb assembly language  a complex and unintuitive task the opengl arb created the opengl shading language to provide a more intuitive method for programming the graphics processing unit while maintaining the open standards advantage that has driven opengl throughout its history originally introduced as an extension to opengl  glsl was formally included into the opengl  core in  by the opengl arb it was the first major revision to opengl since the creation of opengl  in  some benefits of using glsl are versions glsl versions have evolved alongside specific versions of the opengl api it is only with opengl versions  and above that the glsl and opengl major and minor version numbers match these versions for glsl and opengl are related in the following table operators glsl contains the operators in c and c with the exception of pointers bitwise operators were added in version  functions and control structures similar to the c programming language glsl supports loops and branching for instance ifelse for switch etc recursion is forbidden userdefined functions are supported and builtin functions are provided the graphics card manufacturer may optimize builtin functions at the hardware level many of these functions are similar to those in the math library of the c programming language while others are specific to graphics programming compilation and execution glsl shaders are not standalone applications they require an application that utilizes the opengl api which is available on many different platforms eg gnulinux mac os x windows there are language bindings for c c c delphi java and many more glsl shaders themselves are simply a set of strings that are passed to the hardware vendors driver for compilation from within an application using the opengl apis entry points shaders can be created from within an application or readin as text files but must be sent to the driver in the form of a string the set of apis used to compile link and pass parameters to glsl programs are specified in three opengl extensions and became part of core opengl as of opengl version  the api was expanded with geometry shaders in opengl  tessellation shaders in opengl  and compute shaders in opengl  these opengl apis are found in the extensions