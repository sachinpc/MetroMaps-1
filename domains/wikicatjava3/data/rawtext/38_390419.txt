gnu classpath gnu classpath is a project aiming to create a free software implementation of the standard class library for the java programming language despite the massive size of the library to be created the majority of the task is already done including swing corba and other major parts the classpath developers have implemented almost all of the classes from jse  and  classpath can thus be used to run popular javabased software such as vuze and eclipse gnu classpath has been one of the high priority directions of the gnu project while the source code of the official implementation from sun microsystems was available the license did not allow distribution of any alterations this was a major obstacle for many projects that could not progress without altering this code the gnu classpath development community includes institutions focused on research of java virtual machines as well as companies interested in providing alternative java runtimes gnu classpath is a part of the free software foundation it was originally developed in parallel with libgcj due to license incompatibilities but later the two projects merged license gnu classpath is licensed under the gnu general public license with a linking exception this is a free software license all code is formally owned by the free software foundation and this owner is bound by its own contractual obligations to the developers uses gnu classpath is used by many free java runtimes like kaffe sablevm jamvm cacao jikes rvm vmkit because every fullfeatured java virtual machine must provide an implementation of the standard class libraries some other uses include history gnu classpath development started in  with five developers during the history it merged several times with other projects having similar goals kaffe libgcj in the past gnu classpath supplied its own virtual machine japhar as classpath was becoming a base library shared with a lot of different projects this virtual machine received less and less attention and is now no longer supported after implementing the majority of the official java  api the work in the project became more bug oriented rather than api coverage oriented on october   the implementation of the last missing  class htmlwriter was committed the development speed computed mathematically as the average number of the new lines of code per day reached its highest ever in  the name gnu classpath was originally suggested by bradley m kuhn to one of the first developers paul fisher at the time there was great concern in the free java implementations community about enforcement of suns trademark on java against free implementations kuhn suggested the name classpath which is the environment variable used by most java systems to indicate where the java libraries reside on the computer since classpath often expanded to a path name that included the word java such as codice it was a way to evoke the name java without actually saying it fisher and other developers didnt like the unsightly use of the  and all capital letters and settled on classpath development team the maintainer takes care of the legal side of the project prepares the regular project releases and does some quality management the maintainer also grants the cvs access permissions gnu classpath has no formal hierarchy the work is done by the most technically capable and there is no strict work division either all code changes are first posted to the discussion list as patches where they can be opposed if needed the project typically receives between five and eight patches per day the gnu classpath library code coverage progress can be tracked against openjdk and openjdk virtual machine integration gnu classpath contains classes from the official java api namespace where calls to native code are necessary or highly desired this is done from a small number of vm classes the name of such a vm class matches the name of the class requiring native methods plus the additional vm prefix vmobject vmstring and so on vm classes stored separately from the rest of code are package private and final the methods of these classes contain the keyword native indicating the necessity of the supporting native library such libraries are provided by the authors of a java virtual machine hence gnu classpath can be connected to nearly any java virtual machine if the sources of such virtual machine are available and can be modified support for the new language features in java  before version  each gnu classpath release consisted of two separate release tarballs one that represented the state of the main development branch and another that contained the contents of a more experimental branch supporting the additions such as generics enumerations and annotations present in java  since version  java  additions like generics have been fully integrated into the main branch the branch can be built by using the eclipse compiler ecj to compile java  source code to bytecode in the case of gcj it uses ecj to perform this initial stage then converts the bytecode to native code from  onwards gnu classpath also supports compiling and running the newly gpled opensource javac compiler using gnu classpath and also allows the gnu classpath class library tools and examples to be compiled with javac itself classes from the omgorg domain gnu classpath does not accept any code that has a nonfree license or that was automatically generated from code with a nonfree license the standard java api contains numerous classes from the omgorg domain that are normally generated from the idl files released by the object management group the use but no modify license of these files counts as nonfree for this reason the mentioned classes in the gnu classpath project were written from scratch using only the official printed omg specifications hence this part of gnu classpath is as free as any other code in the project