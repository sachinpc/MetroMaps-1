inversion of control in software engineering inversion of control ioc is a design principle in which customwritten portions of a computer program receive the flow of control from a generic framework a software architecture with this design inverts control as compared to traditional procedural programming in traditional programming the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks but with inversion of control it is the framework that calls into the custom or taskspecific code inversion of control is used to increase modularity of the program and make it extensible and has applications in objectoriented programming and other programming paradigms the term was popularized by robert c martin and martin fowler the term is related to but different from the dependency inversion principle which concerns itself with decoupling dependencies between highlevel and lowlevel layers through shared abstractions the general concept is also related to eventdriven programming in that it is often implemented using ioc so that the custom code is commonly only concerned with handling of events whereas the event loop and dispatch of eventsmessages is handled by the framework or the runtime environment overview as an example with traditional programming the main function of an application might make function calls into a menu library to display a list of available commands and query the user to select one the library thus would return the chosen option as the value of the function call and the main function uses this value to execute the associated command this style was common in text based interfaces for example an email client may show a screen with commands to load new mails answer the current mail start a new mail etc and the program execution would block until the user presses a key to select a command with inversion of control on the other hand the program would be written using a software framework that knows common behavioral and graphical elements such as windowing systems menus controlling the mouse and so on the custom code fills in the blanks for the framework such as supplying a table of menu items and registering a code subroutine for each item but it is the framework that monitors the users actions and invokes the subroutine when a menu item is selected in the mail client example the framework could follow both the keyboard and mouse inputs and call the command invoked by the user by either means and at the same time monitor the network interface to find out if new messages arrive and refresh the screen when some network activity is detected the same framework could be used as the skeleton for a spreadsheet program or a text editor conversely the framework knows nothing about web browsers spreadsheets or text editors implementing their functionality takes custom code inversion of control carries the strong connotation that the reusable code and the problemspecific code are developed independently even though they operate together in an application software frameworks callbacks schedulers event loops and dependency injection are examples of design patterns that follow the inversion of control principle although the term is most commonly used in the context of objectoriented programming inversion of control serves the following design purposes inversion of control is sometimes facetiously referred to as the hollywood principle dont call us well call you background inversion of control is not a new term in computer science martin fowler traces the etymology of the phrase back to  dependency injection is a specific type of ioc using contextualized lookup a service locator such as the java naming and directory interface jndi is similar in an article by loek bergman it is presented as an architectural principle in an article by robert c martin the dependency inversion principle and abstraction by layering come together his reason to use the term inversion is in comparison with traditional software development methods he describes the uncoupling of services by the abstraction of layers when he is talking about dependency inversion the principle is used to find out where system borders are in the design of the abstraction layers description in traditional programming the flow of the business logic is determined by objects that are statically bound to one another with inversion of control the flow depends on the object graph that is built up during program execution such a dynamic flow is made possible by object interactions being defined through abstractions this runtime binding is achieved by mechanisms such as dependency injection or a service locator in ioc the code could also be linked statically during compilation but finding the code to execute by reading its description from external configuration instead of with a direct reference in the code itself in dependency injection a dependent object or module is coupled to the object it needs at run time which particular object will satisfy the dependency during program execution typically cannot be known at compile time using static analysis while described in terms of object interaction here the principle can apply to other programming methodologies besides objectoriented programming in order for the running program to bind objects to one another the objects must possess compatible interfaces for example class codice may delegate behavior to interface codice which is implemented by class codice the program instantiates codice and codice and then injects codice into codice implementation techniques in objectoriented programming there are several basic techniques to implement inversion of control these are in an original article by martin fowler the first three different techniques are discussed in a description about inversion of control types the last one is mentioned often the contextualized lookup will be accomplished using a service locator more important than the applied technique however is the optimization of the purposes examples most frameworks such as net or enterprise javabeans display this pattern this basic outline in java gives an example of code following the ioc methodology it is important however that in the a lot of assumptions are made about the data returned by the data access object dao although all these assumptions might be valid at some time they couple the implementation of the to the dao implementation designing the application in the manner of inversion of control would hand over the control completely to the dao object the code would then become the example shows that the way the method is constructed determines if ioc is used it is the way that parameters are used that define ioc this resembles the messagepassing style that some objectoriented programming languages use