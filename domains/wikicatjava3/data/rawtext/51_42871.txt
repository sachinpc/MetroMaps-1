java platform standard edition java platform standard edition or java se is a widely used platform for development and deployment of portable code for desktop and server environments java se uses the objectoriented java programming language it is part of the java softwareplatform family java se defines a wide range of generalpurpose apis  such as java apis for the java class library  and also includes the java language specification and the java virtual machine specification one of the most wellknown implementations of java se is oracle corporations java development kit jdk nomenclature standards and specifications java se was known as java  platform standard edition or jse from version  until version  the se is used to distinguish the base platform from the enterprise edition java ee and micro edition java me platforms the  was originally intended to emphasize the major changes introduced in version  but was removed in version  the naming convention has been changed several times over the java version history starting with jse  merlin java se has been developed under the java community process which produces descriptions of proposed and final specifications for the java platform called java specification requests jsr jsr  was the umbrella specification for jse  and jsr  specified jse  tiger java se  mustang was released under jsr  java platform enterprise edition java ee is a related specification that includes all the classes in java se plus a number that are more useful to programs that run on servers as opposed to workstations java platform micro edition java me is a related specification intended to provide a certified collection of java apis for the development of software for small resourceconstrained devices such as cell phones pdas and settop boxes the java runtime environment jre and java development kit jdk are the actual files downloaded and installed on a computer to run or develop java programs respectively general purpose packages javalang the java package contains fundamental classes and interfaces closely tied to the language and runtime system this includes the root classes that form the class hierarchy types tied to the language definition basic exceptions math functions threading security functions as well as some information on the underlying native system this package contains  of  codice classes provided in jdk  the main classes and interfaces in codice are classes in codice are automatically imported into every source file javalangref the package provides more flexible types of references than are otherwise available permitting limited interaction between the application and the java virtual machine jvm garbage collector it is an important package central enough to the language for the language designers to give it a name that starts with javalang but it is somewhat specialpurpose and not used by a lot of developers this package was added in jse  java has an expressive system of references and allows for special behavior for garbage collection a normal reference in java is known as a strong reference the codice package defines three other types of references  soft weak and phantom references each type of reference is designed for a specific use each of these reference types extends the class which provides the method to return a strong reference to the referent object or codice if the reference has been cleared or if the reference type is phantom and the method to clear the reference the codice also defines the class  which can be used in each of the applications discussed above to keep track of objects that have changed reference type when a codice is created it is optionally registered with a reference queue the application polls the reference queue to get references that have changed reachability state javalangreflect reflection is a constituent of the java api that lets java code examine and reflect on java components at runtime and use the reflected members classes in the package along with codice and accommodate applications such as debuggers interpreters object inspectors class browsers and services such as object serialization and javabeans that need access to either the public members of a target object based on its runtime class or the members declared by a given class this package was added in jdk  reflection is used to instantiate classes and invoke methods using their names a concept that allows for dynamic programming classes interfaces methods fields and constructors can all be discovered and used at runtime reflection is supported by metadata that the jvm has about the program techniques there are basic techniques involved in reflection discovery discovery typically starts with an object and calling the method to get the objects codice the codice object has several methods for discovering the contents of the class for example use by name the codice object can be obtained either through discovery by using the class literal eg codice or by using the name of the class eg  with a codice object member codice codice or codice objects can be obtained using the symbolic name of the member for example codice codice and codice objects can be used to dynamically access the represented member of the class for example arrays and proxies the codice package also provides an class that contains static methods for creating and manipulating array objects and since jse  a class that supports dynamic creation of proxy classes that implement specified interfaces the implementation of a codice class is provided by a supplied object that implements the interface the codices method is called for each method invoked on the proxy objectthe first parameter is the proxy object the second parameter is the codice object representing the method from the interface implemented by the proxy and the third parameter is the array of parameters passed to the interface method the codice method returns an codice result that contains the result returned to the code that called the proxy interface method javaio the package contains classes that support input and output the classes in the package are primarily streamoriented however a class for random access files is also provided the central classes in the package are and  which are abstract base classes for reading from and writing to byte streams respectively the related classes and are abstract base classes for reading from and writing to character streams respectively the package also has a few miscellaneous classes to support interactions with the host file system streams the stream classes follow the decorator pattern by extending the base subclass to add features to the stream classes subclasses of the base stream classes are typically named for one of the following attributes the stream subclasses are named using the naming pattern codice where codice is the name describing the feature and codice is one of codice codice codice or codice the following table shows the sourcesdestinations supported directly by the codice package other standard library packages provide stream implementations for other destinations such as the codice returned by the method or the java ee class data type handling and processing or filtering of stream data is accomplished through stream filters the filter classes all accept another compatible stream object as a parameter to the constructor and decorate the enclosed stream with additional features filters are created by extending one of the base filter classes    or  the codice and codice classes are really just byte streams with additional processing performed on the data stream to convert the bytes to characters they use the default character encoding for the platform which as of jse  is represented by the returned by the static method the class converts an codice to a codice and the class converts an codice to a codice both these classes have constructors that support specifying the character encoding to use if no encoding is specified the program uses the default encoding for the platform the following table shows the other processes and filters that the codice package directly supports all these classes extend the corresponding codice class random access the class supports random access reading and writing of files the class uses a file pointer that represents a byteoffset within the file for the next read or write operation the file pointer is moved implicitly by reading or writing and explicitly by calling the or methods the current position of the file pointer is returned by the method file system the class represents a file or directory path in a file system codice objects support the creation deletion and renaming of files and directories and the manipulation of file attributes such as readonly and last modified timestamp codice objects that represent directories can be used to get a list of all the contained files and directories the class is a file descriptor that represents a source or sink destination of bytes typically this is a file but can also be a console or network socket codice objects are used to create codice streams they are obtained from codice streams and codice sockets and datagram sockets javanio in jse  the package nio or new io was added to support memorymapped io facilitating io operations closer to the underlying hardware with sometimes dramatically better performance the codice package provides support for a number of buffer types the subpackage provides support for different character encodings for character data the subpackage provides support for channels which represent connections to entities that are capable of performing io operations such as files and sockets the codice package also provides support for finegrained locking of files javamath the package supports multiprecision arithmetic including modular arithmetic operations and provides multiprecision prime number generators used for cryptographic key generation the main classes of the package are javanet the package provides special io routines for networks allowing http requests as well as other common transactions javatext the package implements parsing routines for strings and supports various humanreadable languages and localespecific parsing javautil data structures that aggregate objects are the focus of the package included in the package is the collections api an organized data structure hierarchy influenced heavily by the design patterns considerations special purpose packages javaapplet created to support java applet creation the package lets applications be downloaded over a network and run within a guarded sandbox security restrictions are easily imposed on the sandbox a developer for example may apply a digital signature to an applet thereby labeling it as safe doing so allows the user to grant the applet permission to perform restricted operations such as accessing the local hard drive and removes some or all the sandbox restrictions digital certificates are issued by certificate authorities javabeans included in the package are various classes for developing and manipulating beans reusable components defined by the javabeans architecture the architecture provides mechanisms for manipulating properties of components and firing events when those properties change the apis in codice are intended for use by a bean editing tool in which beans can be combined customized and manipulated one type of bean editor is a gui designer in an integrated development environment javaawt the  or abstract window toolkit provides access to a basic set of gui widgets based on the underlying native platforms widget set the core of the gui event subsystem and the interface between the native windowing system and the java application it also provides several basic layout managers a datatransfer package for use with the clipboard and drag and drop the interface to input devices such as mice and keyboards as well as access to the system tray on supporting systems this package along with codice contains the largest number of enums  in all in jdk  javarmi the package provides java remote method invocation to support remote procedure calls between two java applications running in different jvms javasecurity support for security including the message digest algorithm is included in the package javasql an implementation of the jdbc api used to access sql databases is grouped into the package javaxrmi the package provides the support for the remote communication between applications using the rmi over iiop protocol this protocol combines rmi and corba features java se core technologies  corba  rmiiiop javaxswing swing is a collection of routines that build on codice to provide a platform independent widget toolkit uses the d drawing routines to render the user interface components instead of relying on the underlying native operating system gui support this package contains the largest number of classes  in all in jdk  this package along with codice also contains the largest number of enums  in all in jdk  it supports pluggable looks and feels plafs so that widgets in the gui can imitate those from the underlying native system design patterns permeate the system especially a modification of the modelviewcontroller pattern which loosens the coupling between function and appearance one inconsistency is that as of jse  fonts are drawn by the underlying native system and not by java limiting text portability workarounds such as using bitmap fonts do exist in general layouts are used and keep elements within an aesthetically consistent gui across platforms javaxswingtexthtmlparser the package provides the error tolerant html parser that is used for writing various web browsers and web bots javaxxmlbindannotation the package contains the largest number of annotation types  in all in jdk  it defines annotations for customizing java program elements to xml schema mapping omg packages orgomgcorba the package provides the support for the remote communication between applications using the general interorb protocol and supports other features of the common object request broker architecture same as rmi and rmiiiop this package is for calling remote methods of objects on other virtual machines usually via network this package contains the largest number of codice classes  in all in jdk  from all communication possibilities corba is portable between various languages however with this comes more complexity orgomgportableinterceptor the package contains the largest number of interfaces  in all in jdk  it provides a mechanism to register orb hooks through which orb services intercept the normal flow of execution of the orb critical security issues with the java se plugin several critical security vulnerabilities have been reported the most recent in january  security alerts from oracle announce critical securityrelated patches to java se