spark programming language spark is a formally defined computer programming language based on the ada programming language intended for the development of high integrity software used in systems where predictable and highly reliable operation is essential it facilitates the development of applications that demand safety security or business integrity originally there were three versions of the spark language spark spark spark based on ada  ada  and ada  respectively a fourth version of the spark language spark  based on ada  was released on april   spark  is a complete redesign of the language and supporting verification tools the spark language consists of a welldefined subset of the ada language that uses contracts to describe the specification of components in a form that is suitable for both static and dynamic verification in spark the contracts are encoded in ada comments and so are ignored by any standard ada compiler but are processed by the spark examiner and its associated tools spark  in contrast uses ada s builtin aspect syntax to express contracts bringing them into the core of the language the main tool for spark  gnatprove is based on the gnatgcc infrastructure and reuses almost the entirety of the gnat ada  frontend technical overview spark aims to exploit the strengths of ada while trying to eliminate all its potential ambiguities and insecurities spark programs are by design meant to be unambiguous and their behavior is required to be unaffected by the choice of ada compiler these goals are achieved partly by omitting some of adas more problematic features such as unrestricted parallel tasking and partly by introducing contracts which encode the application designers intentions and requirements for certain components of a program the combination of these approaches is meant to allow spark to meet its design objectives which are contract examples consider the ada subprogram specification below what does this subprogram actually do in pure ada it could do virtually anything it might increment the codice by one or one thousand or it might set some global counter to codice and return the original value of the counter in codice or it might do absolutely nothing with codice at all with spark  contracts are added to the code to provide additional information regarding what a subprogram actually does for example we may alter the above specification to say this specification tells us that the increment procedure does not update or read from any global variables and that the only data item used in calculating the new value of x is x itself alternatively the designer might specify the second specification tells us that codice will use some global variable called codice in the same package as codice and that the exported value of codice is dependent on the imported values of codice and codice but that exported value of codice does not depend on any variables at all it will be derived simply from constant data if gnatprove is then run on the specification and corresponding body of a subprogram it will analyse the body of the subprogram to build up a model of the information flow this model is then compared against that which has been specified by the annotations and any discrepancies reported to the user we can further extend these specifications by asserting various properties that either need to hold when a subprogram is called preconditions or that will hold once execution of the subprogram has completed postconditions for example we could say the following this specification now says that not only is codice only derived from itself but that before codice is called codice must be strictly less than the last possible value of its type and that afterwards codice will be equal to the initial value of codice plus one no more and no less verification conditions gnatprove can also generate a set of verification conditions or vcs vcs are used to attempt to establish certain properties hold for a given subprogram at a minimum the gnatprove will generate vcs attempting to establish that all runtime errors cannot occur within a subprogram such as if a postcondition or other assertions are added to a subprogram gnatprove will also generate vcs that require the user to show that these properties hold for all possible paths through the subprogram under the hood gnatprove uses the why intermediate language and vc generator and the altergo theorem prover to discharge vcs use of other provers including interactive proof checkers is also possible through other components of the why toolset history the first version of spark based on ada  was produced at the university of southampton with uk ministry of defence sponsorship by bernard carr and trevor jennings subsequently the language was progressively extended and refined first by program validation limited and then by praxis critical systems limited in  praxis critical systems limited changed its name to praxis high integrity systems limited in january  the company became altran praxis in early  praxis formed a partnership with adacore and released spark pro under the terms of the gpl this was followed in june  by the spark gpl edition  aimed at the floss and academic communities in june  altranpraxis announced that the spark programming language would be used in the software of us lunar project cubesat expected to be completed in  in january  altranpraxis changed its name to altran the first pro release of spark  was announced on april   and was quickly followed by the spark  gpl edition aimed at the floss and academic communities industrial applications safety related systems spark has been used in several high profile safetycritical systems covering commercial aviation rollsroyce trent series jet engines the arinc acams system the lockheed martin cj military aviation eurofighter typhoon harrier gr aermacchi m airtraffic management uk nats ifacts system rail numerous signalling applications medical the lifeflow ventricular assist device and space applications the vermont technical college cubesat project security related systems spark has also been used in secure systems development users include rockwell collins turnstile and secureone crossdomain solutions the development of the original multos ca the nsa tokeneer demonstrator the secunet multilevel workstation and the muen separation kernel in august  rod chapman principal engineer of altran praxis implemented skein one of candidates for sha in spark he wanted to compare the performance of the spark and c implementations after careful optimization he managed to have the spark version only about  to  slower than c later improvement to the ada middleend in gcc implemented by eric botcazou of adacore closed the gap with the spark code matching the c in performance exactly