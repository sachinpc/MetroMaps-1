general graphics interface general graphics interface ggi is a project that aims to develop a reliable stable and fast computer graphics system that works everywhere the intent is to allow for any program using ggi to run on any computing platform supported by it requiring at most a recompilation ggi is free and opensource software subject to the requirements of the mit license goals the project was originally started to make switching back and forth between virtual consoles svgalib and the x display server subsystems on linux more reliable the goals are the ggi framework is implemented by a set of portable userspace libraries with an array of different backends or targets eg framebuffer x quartz directx of which the two most fundamental are libgii for inputhandling and libggi for graphical output all other packages add features to these core libraries and so depend on one or both of them some targets talk to other targets these are called pseudo targets pseudo targets can be combined and work like a pipeline one example displaypalemu for example emulates palette mode on truecolor modes this allows users to run applications in palette mode even on machines where no palette mode would be available otherwise displaytile splits large virtual display into many smaller pieces you can spread them on multiple monitors or even forward them over a network history andreas beck and steffen seeger founded the ggi project in  after some experimental precursors that were called scrdrv development of scrdrv was motivated by the problems caused by coexisting but not very well cooperating graphics environments mainly x and svgalib under the linux operating system at this time which frequently lead to lockups requiring a reboot the first scrdrv design was heavily influenced by the graphics subsystem of the dj dos extender and some concepts from the sane project the basic problem that scrdrv solved was that it provided a kernel mode driver that knew enough of the video hardware to set up modes thus allowing to get into a sane state even from a messedup or crashed graphics application the first official version appeared in  about  ggi  was released under the lgpl license ggi only consisted of the core lib named libggi it included input handling a set of d graphic primitives and some userspace drivers for graphic boards along with a linux kernel patch with the userspace interface for the drivers the patch was known as kgi the kernel graphics interface in  ggi went into a complete redesign many new ideas and a decision from linux made ggi to what it became in ggi  released in august  under the mit release in  there was a big flame war on the linux kernel mailing list about getting kgi into the kernel linus torvalds explained his concerns about ggi stating i think that x is good enough and expressing concern regarding the overall direction of ggi during this time another design idea called evstack also added to the flamewar evstack was a pretty much complete redesign of the input and output subsystem that allowed for events thus the ev to flow through a stack of modules that can be configured to manipulate them evstack is a very powerful concept allowing eg to have two keyboards attached to the same machine one operating a text console on one graphics adapter and one operating a graphics console on the other as was demonstrated on the linuxkongre  and even allows for having different keyboard layouts on different virtual consoles or attaching keyboards via network however this came at the price of a huge patch to the input subsystem which did not seem acceptable the modern linux input event system allows programs eg xorg to receive keyboard events other than through the console keyboard allowing multiseat operation a set of talks about ggi kgi and evstack were given at linuxexpo  for ggi  kgi was split off and became its own project named the kgi project ggi  consisted of a set of libraries during the  beta phase in late  the license of the libraries was changed from lgpl to a mitstyle license much work was also done on the buildsystem to support more operating systems it worked on freebsd code for openbsd netbsd and even mswindows were there as well as some support for more hardware platforms input handling was moved into a library called libgii generic ggi code was in libgg a sublib within libgii the core graphic library libggi has a lightweight set of graphic primitives that was common enough to write any kind of graphic application while higherlevel api went into other libraries on top of libggi these were called ggi extensions libggi support a set of targets most of them were linux specific fbdev x aa vcsa terminfo and some pseudo targets such as tile multi palemu and trueemu the ggi extensions featured higherlevel api libggiwmh provides functionality for windowed only targets at that time this was only x libggimisc provided some basic stuff like vga splitline ggi  was released in december  the most user visible change was from the scratch redesigned x backend another noticeable change was the huge documentation improvement last but not least the release cycles changed from this release on there was a development and a stable tree the stable tree is open for bugfixes only the development tree got the name following the bsd scheme current november  the last bugfix from the ggi x stable tree was released in favour for a new ggi x stable tree ggi x runs on many operating systems gnu hurd linux bsd system v mac os x and ms windows support for more hardware platforms has been added netbsd even created a binary package for netbsdvax a new ggi library on top of libgii called libgiigic has been added it allows to combine user actions with events at run time ggi  was released in december  the target auto detection has been reworked and was no longer linux centric ggi replaced its own integer datatypes with ansi c types for more portability a target for quartz has been added mac os x users no longer depend on x but still can use the x backend the most user visible change however was the support for static linked in targets latest release is ggi  a bugfix release in the ggi x stable series it was released in january  current status the ggi project is moving onward to the ggi  release libgii has been redesigned the input handling has been replaced with a reactor event model which is more flexible than using select on a file descriptor this also simplified the inputdrivers in general particularly for those who dont use file descriptors such as inputquartz libgg has been moved out into a separate library libggi merged some targets into one sublib multi with tile and mono text with palemu libggi also got a new vnc target which allows to run any application as a vnc server in ggi  the extension mechanism has been redesigned from scratch to simplify interactions between the extensions and the core libs this required a little api change