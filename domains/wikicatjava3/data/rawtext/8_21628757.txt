falcon programming language falcon is an open source multiparadigm programming language design and implementation is led by giancarlo niccolai a native of bologna italy and information technology graduate from pistoia falcon translates computer source code to virtual machine instructions for evaluation the virtual machine is intended to be both a standalone interpreter as well as for integration in thirdparty embedding applications a core design consideration for the falcon programming language is to provide acceptably high performing scripting plugins to multi threaded data acquisition reporting and dispersion applications as programming languages go falcon design leans more towards conciseness of code and expressiveness than general readability the falcon implementation does provide facilities for source level documentation and this documentation may become important as the mixed paradigm potential of falcon scripting attempts to meet the problems faced with programming in the large history a small project haste developed in  in an attempt to create a small fast virtual machine soon evolved into the falcon programming language in early  the package was first shipped under open source licensing as a package in ubuntu and included in the kde  scripting framework philosophy rather than focusing on one programming style or paradigm falcon merges several different styles into a single framework at the same time it targets multiple application domains standalone embedded into other applications and serverside dynamic pages merging them into a single hood of a common architectural design at the implementation level falcon is driven by the concept of service where the scripting engine is seen as a service for scripts modules and in embedded applications when not used as a standalone tool hello world example although there are various forms of basic io an example hello world program using fast print  hello world supporting unicode below is an internationalized example of introductions which when evaluated displays paradigms falcon merges six major programming paradigms procedural procedural programming is supported through classic function declarations and calls every function supports implicitly variable parameter calls and namedpositional parameters a set of procedural style statements eg for while if switch statements is provided the following is a complete procedural program if the above is saved to a text file as nicedayfal a command line of falcon nicedayfal produces on standard output functional falcon has an evaluation engine called sigmareductor which allows programmers to write completely functional programs without the need to use any procedural construct not differently from what is seen in lisp the intermixed programming style allows use of different paradigms such as oop or procedural approaches in functional sequences or to use functional evaluations during the course of otherwise procedural programs functional sequences are represented by standard language arrays this means that sequences can be created inspected and changed dynamically by the program itself either across different evaluations or during the course of a sigmareduction evaluation the following example does that by changing a special variable reference called late binding in a list loop standard arrays can be called as functions if their first member is itself a callable item as in the following example onelevel functional sequences as in the above example can be conceptually treated as cached calls and once assigned to a variable they are morphologically equivalent to a function symbol the functional paradigm includes an outofband item marker items can receive an oob flag marker which can be tested through language operators and functions and indicate a special meaning for values traveling in functional sequences for example many functional loops as floop and times can perform loop restarts or can be interrupted by returning either an outofband  or  from any of the involved functions the map function transforming all the values in an array through a mapping function will ignore the returned value discarding it if its an outofband nil in this way it is possible to perform mapandfilter operations in place classbased objectorientation the falcon programming language provides an oop paradigm with classes an inheritance model classstatic members property initializers and instance constructor multiple inheritance is supported under the condition that at most one underlying ancestor class is reflecting native data access to base class members is supported instance structure is fixed and immutable but due to falcons functional nature where functions are seen as just a special kind of data it is possible to set instance members to plain data or functions making them methods dynamically functional sequences can be assigned to properties in which case they become functional methods for the given oop instance falcon supports standalone objects which can be either classless or derived by class ancestors which are instantiated and readied before the virtual machine executes the main script instance resolution order is tracked by the falcon linker to ensure proper initialization of standalone objects which may refer one another in program modules class instances can be created through functional sequences as instancing a class is morphologically equivalent to calling its symbol and so evaluating a functional sequence whose first element is a class has the effect of creating an instance falcon oop model is completed by operator overloading which allows to create classes on which the mathematical and logical operators have a special behavior the c classes that build the falcon engine are doxygen indexed at falconplorg prototypebased objectorientation prototype oop is similar to classic classbased oop but it drops the concept of classes instances are all classless and their structure can be dynamically changed falcon language dictionaries ordered keyvalue pair collections can include functions dictionaries can then be blessed to inform the language that they are to be treated as classless instances and applying dot accessor causes their values to be treated as properties or methods in the following example a dictionary becomes an object bindings in arrays works similarly messageoriented messageoriented programming allows indirect calls to one or more registered listeners when a message is broadcast the contents of the message are arbitrary and can include any language item including but not limited to classes from which to create instances functional sequences or tables listeners can either compete to receive the message and exclude the others or participate in building a common reply to the message in ordered steps messages can be broadcast and require an immediate reply or can be left in the environment to be received and processed by latecomers termed assertions in falcon message oriented programming has a direct interface into the virtual machine on which external native modules and embedding applications can interact for example a multithreaded application may throw into the virtual machine messages coming from different threads for serialized processing at script level and later broadcast of processed solutions directly from within the scripts tabular tabular programming can be seen as a special extension of oop programming where a class is represented by a table whose columns are properties and where each row is an instance other than keeping all the instances together and allowing each instance to work on the surrounding rows of the parent table modification on the table are dynamically reflected into every instance tables offer a means to select behaviors between a finite set of choices or to mix behaviors and merge them providing fuzzy logic engines as each row actually a falcon array can contain both tablespecific data and logic or private logic via array bindings an entity selected in a table via global selection logic can provide specialized working abilities features along with the multiple paradigms falcon presents a variety of different features for programmers list comprehensions base types and classes exposing the sequence interface to the internal engine offer a comp method which offers all the functionality of a list comprehension construct the comp method takes a mandatory source parameter which can be another sequence an item of range type or a generator function returning one item at a time and a special marker at termination a function or in general a callable item can be provided as second optional parameter and acts both as a filter and modifier associative pair sequences as ie dictionaries are supported as well the following is a simple example using a range to create a list comprehension the result is an array of even numbers  this generates a list of random integer numbers in the range  the list terminates when the random number is  that is each item as  probability to be the last the next more complete example uses a generator to fill a set of exactly  unique random numbers chosen in the  range in this occasion the role of determining the end of the comprehension is delegated to the filter the comp method returns the same object it operates on so it is possible to apply it on an already existing sequence to add more data to it similarly the mfcomp generic method allows to create list comprehensions using more input sets as in the following example the resulting array in sums contains the values obtained summing each element in the first set x with each element of the second set y template documents falcon allows scripts to be part of text documents with the preprocessor or directive scripts saved as ftd files are treated as text documents and simply echoed until one of those processor directives is encountered inbound scripts are executed as in the following ftd example ftd documents can be merged with normal falcon scripts to form applications where the presentation logic is in dynamic templates the ftd files and the application logic is stored in falcon modules ftd documents can be used in driving dynamic websites some popular webservers currently apache  have modules which directly parse and execute fal and ftd scripts providing an api which integrates in the webserver engine it is also possible to use dynamic ftd pages along with cgi scripts exceptions falcon supports error handling via the raise try and catch statements the raise statement can throw any falcon item including nil numbers strings objects and so on library functions and external modules will usually raise instances of the error class or instances of a class derived from that the catch statement can be used to catch any type of item a certain type ie strings or integers or instances from a certain class caught classes are organized on a hierarchical base so that it is possible to provide more generic error handlers like the following example typeerror is a library class derived from error the in clause of the catch statement is optional this means that the error itself may be discarded the catch statement mimics the select statement which can be used to switch on the type or class of a given variable explicit string expansion falcon includes an  unary string expansion operator that returns a string with inline  variable references replaced this operation allows for formatting during the substitution for example which prints embeddable runtime falcon is designed for embedding into and extending other systems with a linkable runtime library libfalcon documentation generator falcon ships with an integrated documentation system called faldoc which is specifically designed to provide falcon based libraries be they native c code or module sets written in falcon with maintainable documentation virtual filesystem all io operations happening at engine or at virtual machine script execution level are delegated to a centralized virtual filesystem provider to which external modules or embedding application facilities are allowed to register dynamically subscribed virtual filesystems abstract io operations as directory read file creation and stream opening and can be addressed from within scripts by uri this makes it possible to load modules or open resources from any vfs as network resources or compressedcrypted archives which may include special virtual locations provided by third party modules andor by applications embedding the engine concurrency support in versions x the separate threading module provides full multithreading to scripts while starting from version x the threading module is integrated in the standard modules and threading support is provided directly inside the main engine the multithreading model is agent oriented and data across threads must be explicitly shared through several possible sharing mechanisms each thread runs a different virtual machine which runs separately from any operation happening in the others as ie garbage collection this allows for efficient parallel processing and zero contention outside the control of the script developer coroutines falcon supports quasiparallel coroutining coroutines are code executed in time slices or during idle times by the virtual machine they provide a lighter parallel approach than the full threading model and allow full visibility of program global data through different coroutines explicit cooperation of each coroutine is required ie each coroutine must check for data availability before blocking reads metacompiler the falcon compiler contains a metacompiler that supports macro expansions a falcon virtual machine in the standard compiler drives the metacompiler output generated from the metacompiler is sent to the language lexer as if part of the original source using escape sequences it is possible to dynamically write the contents of the program being compiled by printing it the keyword macro provides a simplified candygrammar interface to compiletime metaprogramming native internationalization strings prefixed with an i are recognized as exported international strings declaring the language used in a module through the directive statement it is possible to indicate which is the native language in which strings are written as in the following example a command line tool called fallc is provided to export i strings into xml definition files which can be used as templates to provide translations into different languages the translated string table is applied to the modules at load time feathers standard library supporting modular programming falcon ships with feathers the standard module suite which integrates the builtin core module containing the basic io and languageintegrated base functions classes and objects feather modules currently include implementation the core vm and official modules including feather modules and other community provided support modules are all written in c some very low level module and engine elements are written in c and assembly supported platforms falcon is distributed through installers on mac os x and windows systems where building and installing is a more articulated process or through selfbuilding source packages on various open systems as linux or opensolaris on the latter systems falcon is usually supported and generally kept up to date on various distributions among which falcon is available on solaris based os distributions through the blastwave project and through the dragonfly bsd system falcon programming language license the falcon programming language license is the free software license applied to the falcon programming language and also available to be used in other projects the original fpll  was described by its creator as being  mainly an apache license modified to extend the openness of the license to the embedding application and to the scripts version  has been redesigned not to extend to the scripts