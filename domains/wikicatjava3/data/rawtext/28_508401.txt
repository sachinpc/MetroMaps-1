groovy programming language apache groovy is an objectoriented programming language for the java platform it is a dynamic language with features similar to those of python ruby perl and smalltalk it can be used as a scripting language for the java platform is dynamically compiled to java virtual machine jvm bytecode and interoperates with other java code and libraries groovy uses a javalike curlybracket syntax most java code is also syntactically valid groovy although semantics may be different groovy  was released on january   and groovy  in july  since version  groovy can also be compiled statically offering type inference and performance very close to that of java groovy  was the last major release under pivotal softwares sponsorship which ended in march  groovy has since changed its governance structure to a project management committee pmc in the apache software foundation history james strachan first talked about the development of groovy on his blog in august  several versions were released between  and  after the java community process jcp standardization process began the version numbering changed and a version called  was released on january   after various betas and release candidates numbered  on december   groovy  final was released and immediately rebranded as groovy  as a reflection of the many changes made in  groovy won the first prize at jax  innovation award in  grails a groovy web framework won the second prize at jax  innovation award in november  springsource acquired the groovy and grails company gone in august  vmware acquired springsource in july  strachan wrote on his blog i can honestly say if someone had shown me the programming in scala book by martin odersky lex spoon  bill venners back in  id probably have never created groovy strachan had left the project silently a year before the groovy  release in  in march  groovy had been submitted to the jcp as jsr  and accepted by ballot after  years of inactivity the spec lead changed its status to dormant in april  on july   groovy  was released which among other new features added static compilation and a static type checker to groovy when the pivotal joint venture was spunoff by emc and vmware in april  groovy and grails formed part of its product portfolio pivotal ceased sponsoring groovy and grails from april  that same month groovy changed its governance structure from a codehaus repository to a project management committee pmc in the apache software foundation via its incubator features most valid java files are also valid groovy files although the two languages are similar groovy code can be more compact because it does not require all the elements that java requires this makes it possible for java programmers to learn groovy gradually by starting with familiar java syntax before acquiring more groovy idioms groovy features not available in java include both static and dynamic typing with the def keyword operator overloading native syntax for lists and associative arrays maps native support for regular expressions polymorphic iteration expressions embedded inside strings additional helper methods and the safe navigation operator  to check automatically for nulls for example variablemethod or variablefield since version  groovy also supports modularity being able to ship only the needed jars according to the project needs thus reducing the size of groovys lib type checking static compilation project coin syntax enhancements multicatch blocks and ongoing performance enhancements using jdks invoke dynamic instruction groovy provides native support for various markup languages such as xml and html accomplished via an inline dom syntax this feature enables the definition and manipulation of many types of heterogeneous data assets with a uniform and concise syntax and programming methodology unlike java a groovy source code file can be executed as an uncompiled script if it contains code outside any class definition if it is a class with a main method or if it is a runnable or groovytestcase a groovy script is fully parsed compiled and generated before execution similar to perl and ruby this occurs under the hood and the compiled version is not saved as an artifact of the process groovybeans  properties groovybeans are groovys version of javabeans groovy implicitly generates getters and setters in the following code setcolorstring color and getcolor are implicitly generated and the last two lines which appear to access color directly are actually calling the implicitly generated methods groovy offers simple consistent syntax for handling lists and maps reminiscent of javas array syntax prototype extension groovy offers support for prototype extension through expandometaclass extension modules only in groovy  objectiveclike categories and delegatingmetaclass expandometaclass offers a domainspecific language dsl to express the changes in the class easily similar to rubys open class concept groovys changes in code through prototyping are not visible in java since each attributemethod invocation in groovy goes through the metaclass registry the changed code can only be accessed from java by going to the metaclass registry groovy also allows overriding methods as codice codice among others enabling the developer to intercept calls to an object and specify an action for them in a simplified aspectoriented way the following code enables the class codice to respond to the codice property the grails framework uses metaprogramming extensively to enable gorm dynamic finders like codice and others dot and parentheses groovys syntax permits omitting parentheses and dots in some situations the following groovy code can be written as enabling the development of domainspecific languages dsls which look like plain english functional programming although groovy is mostly an objectoriented language it also offers functional features closures according to groovys documentation closures in groovy work similar to a method pointer enabling code to be written and run in a later point in time groovys closures support free variables ie variables which have not been explicitly passed as a parameter to it but exist in its declaration context partial application which it terms currying delegation implicit typed and untyped parameters when working on collections of a determined type the closure passed to an operation on the collection can be inferred a group of expressions can be written in a closure block without reference to an implementation and the responding object can be assigned at a later point using delegation curry usually called partial application this groovy feature allows closures parameters to be set to a default parameter in any of their arguments creating a new closure with the bound value if you supply one argument to the curry method you will fix the first argument if you supply n arguments you will fix arguments n curry can also be used in the reversed direction fixing arguments n to n using rcurry groovy also supports lazy evaluation reducefold infinite structures and immutability among others xml and json processing on xml and json processing groovy employs the builder pattern making the production of the data structure less verbose for example the following xml can be generated through the following groovy code and also can be processed in a streaming way through codice to change the implementation to json we can just swap the codice to codice to parse it and search for a functional language we can use groovys codice method string interpolation in groovy we can interpolate the string with variables and expressions by using gstrings gstrings containing variables and expressions must be declared using double quotes a complex expression must be enclosed in curly brackets this prevents parts of it from being interpreted as belonging to the surrounding string instead of to the expression expression evaluation can be deferred by employing arrow syntax ast abstract syntax tree transformation according to groovys own documentation when the groovy compiler compiles groovy scripts and classes at some point in the process the source code will end up being represented in memory in the form of a concrete syntax tree then transformed into an abstract syntax tree the purpose of ast transformations is to let developers hook into the compilation process to be able to modify the ast before it is turned into bytecode that will be run by the jvm ast transformations provides groovy with improved compiletime metaprogramming capabilities allowing powerful flexibility at the language level without a runtime performance penalty examples of asts in groovy are among others traits according to groovys documentation traits are a structural construct of the language which allow composition of behaviors runtime implementation of interfaces behavior overriding and compatibility with static type checkingcompilation traits can be seen as interfaces carrying both default implementations and state a trait is defined using the trait keyword then it can be used like a normal interface using the implements keyword traits allow a wide range of capabilities from simple composition to testing ide support many integrated development environments and text editors support groovy