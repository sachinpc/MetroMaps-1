rust programming language rust is a generalpurpose multiparadigm compiled programming language sponsored by mozilla research it is designed to be a safe concurrent practical language supporting functional and imperativeprocedural paradigms the language grew out of a personal project by mozilla employee graydon hoare mozilla began sponsoring the project in  and announced it in  the same year work shifted from the initial compiler written in ocaml to the selfhosting compiler written in rust known as  it successfully compiled itself in  uses llvm as its back end the first numbered prealpha release of the rust compiler occurred in january  rust  the first stable release was released on may   although its development is sponsored by mozilla it is an open community project the design of the language has been refined through the experiences of writing the servo web browser layout engine and the rust compiler a large portion of current commits are from community members rust won the first place for most loved programming language of  in the stack overflow developer survey the language is believed to take its name from the rust family of fungi design the goal of rust is to be a language suited to creating highly concurrent and highly safe systems and programming in the large this has led to a feature set with an emphasis on safety control of memory layout and concurrency performance of idiomatic rust is comparable to the performance of idiomatic c the syntax of rust is similar to c and c with blocks of code delimited by curly brackets and control flow keywords such as codice codice codice and codice not all c or c keywords are present however while some rust keywords such as codice for multidirectional branching similar to codice in other languages will be less familiar to programmers coming from these languages despite the syntactic resemblance rust is semantically very different from c and c the system is designed to be memory safe and it does not permit null pointers or dangling pointers data values can only be initialized through a fixed set of forms all of which require their inputs to be already initialized the type system supports a mechanism similar to type classes called traits inspired directly by the haskell language this is a facility for adhoc polymorphism achieved by adding constraints to type variable declarations other features from haskell such as higherkinded polymorphism are not yet supported rust does not use an automated garbage collection system like those used by go java or net framework but instead resource acquisition is initialization raii as in c rust features type inference for variables declared with the codice keyword such variables do not require a value to be initially assigned to determine their type a compile time error results if any branch of code fails to assign a value to the variable functions can be given generic parameters but they must be explicitly bounded by traits there is no way to leave off type signatures while still making use of methods and operators on the parameters the object system within rust is based around implementations traits and structured types implementations fulfill a role similar to that of classes within other languages and are defined with the codice keyword inheritance and polymorphism are provided by traits they allow methods to be defined and mixed in to implementations structured types are used to define fields implementations and traits cannot define fields themselves and only traits can provide inheritance to prevent the diamond problem of multiple inheritance as in c history in addition to conventional static typing before version  rust also supported typestates the typestate system modeled assertions before and after program statements through use of a special codice statement discrepancies could be discovered at compile time rather than when a program was running as might be the case with assertions in c or c code the typestate concept was not unique to rust as it was first introduced in the language nil typestates were removed because in practice they found little use though the same functionality can still be achieved with branding patterns the style of the object system changed considerably within versions   and  of rust version  introduced classes for the first time with version  adding a number of features including destructors and polymorphism through the use of interfaces in rust  traits were added as a means to provide inheritance interfaces were unified with traits and removed as a separate feature classes were also removed replaced by a combination of implementations and structured types starting in rust  and ending in rust  rust had two builtin pointer types codice and codice simplifying the core memory model it reimplemented those pointer types in the standard library as codice and the now removed codice in january  the editorinchief of dr dobbs andrew binstock commented on rusts chances to become a competitor to c as well as to the other upcoming languages d go and nim then nimrod according to binstock while rust was widely viewed as a remarkably elegant language adoption of it stayed behind because the language kept changing between versions the first stable version of the rust version  was released in may  rust was the third most loved programming language in the  stack overflow annual survey and jumped to the first place in  stack overflow annual survey examples hello world this program prints the string hello world to standard output and exits fn main  factorial this is a factorial function implemented recursively the branches in this function exhibit rusts optional implicit return values which can be utilized where a more functional style is preferred unlike c and related languages rusts codice construct is an expression rather than a statement and thus has a return value of its own fn factorialrecursiven u  u  and heres an iterative implementation fn factorialiterativen u  u  this implementation uses an iterator instead fn factorialiteratorn u  u  concurrency a demonstration of rusts concurrency capabilities use stdthread  this function creates ten threads that all execute concurrently  to verify this run the program several times and observe the irregular  order in which each threads output is printed fn main  miscellaneous a demonstration of rusts builtin unique smart pointers along with tagged unions and methods use intlistnode empty  this program defines a recursive data structure and implements methods upon it  recursive data structures require a layer of indirection which is provided here  by a unique pointer constructed via the boxnew constructor these are  analogous to the c library type stduniqueptr though with more static  safety guarantees fn main   enum defines a tagged union that may be one of several different kinds of values at runtime  the type here will either contain no value or a value and a pointer to another intlist enum intlist   an impl block allows methods to be defined on a type impl intlist 