java native access java native access jna is a communitydeveloped library that provides java programs easy access to native shared libraries without using the java native interface jnas design aims to provide native access in a natural way with a minimum of effort no boilerplate or generated glue code is required architecture the jna library uses a small native library called foreign function interface library libffi to dynamically invoke native code the jna library uses native functions allowing code to load a library by name and retrieve a pointer to a function within that library and uses libffi library to invoke it all without static bindings header files or any compile phase the developer uses a java interface to describe functions and structures in the target native library this makes it quite easy to take advantage of native platform features without incurring the high development overhead of configuring and building jni code jna is built and tested on mac os x microsoft windows freebsd  openbsd solaris linux aix windows mobile and android it is also possible to tweak and recompile the native build configurations to make it work on most other platforms that run java mapping types the following table shows an overview of types mapping between java and native code and supported by the jna library note the meaning of tchar changes between char and wchart according to some preprocessor definitions lpctstr follows memory byte alignment for data structures native libraries have no standardized memory byte alignment flavor jna defaults to an os platform specific setting that can be overridden by a library specific custom alignment if the alignment details are not given in the documentation of the native library the correct alignment must be determined by trial and error during implementation of the java wrapper example the following program loads the local c standard library implementation and uses it to call the printf function note the following code is portable and works the same on windows and linux  unix  mac os x platforms the following program loads the c posix library and uses it to call the standard mkdir function note the following code is portable and works the same on posix standards platforms the program below loads the kerneldll and uses it to call the beep and sleep functions note the following code works only on windows platforms adoption java native access is known to be used in