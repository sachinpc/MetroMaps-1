lua programming language lua   from meaning moon is a lightweight multiparadigm programming language designed primarily for embedded systems and clients lua is crossplatform since it is written in ansi c and has a relatively simple c api lua was originally designed in  as a language for extending software applications to meet the increasing demand for customization at the time it provided the basic facilities of most procedural programming languages but more complicated or domainspecific features were not included rather it included mechanisms for extending the language allowing programmers to implement such features as lua was intended to be a general embeddable extension language the designers of lua focused on improving its speed portability extensibility and easeofuse in development history lua was created in  by roberto ierusalimschy luiz henrique de figueiredo and waldemar celes members of the computer graphics technology group tecgraf at the pontifical catholic university of rio de janeiro in brazil from  until  brazil had a policy of strong trade barriers called a market reserve for computer hardware and software in that atmosphere tecgrafs clients could not afford either politically or financially to buy customized software from abroad those reasons led tecgraf to implement the basic tools it needed from scratch luas historical father and mother were the datadescriptionconfiguration languages sol simple object language and del dataentry language they had been independently developed at tecgraf in  to add some flexibility into two different projects both were interactive graphical programs for engineering applications at petrobras company there was a lack of any flowcontrol structures in sol and del and petrobras felt a growing need to add full programming power to them as the languages authors wrote in the evolution of lua lua  was designed in such a way that its object constructors being then slightly different from the current light and flexible style incorporated the datadescription syntax of sol hence the name lua  sol is portuguese for sun lua is moon lua syntax for control structures was mostly borrowed from modula if while repeatuntil but also had taken influence from clu multiple assignments and multiple returns from function calls as a simpler alternative to reference parameters or explicit pointers c neat idea of allowing a local variable to be declared only where we need it snobol and awk associative arrays in an article published in dr dobbs journal luas creators also state that lisp and scheme with their single ubiquitous data structure mechanism the list were a major influence on their decision to develop the table as the primary data structure of lua lua semantics have been increasingly influenced by scheme over time especially with the introduction of anonymous functions and full lexical scoping versions of lua prior to version  were released under a license similar to the bsd license from version  onwards lua has been licensed under the mit license both are permissive free software licences and are almost identical features lua is commonly described as a multiparadigm language providing a small set of general features that can be extended to fit different problem types rather than providing a more complex and rigid specification to match a single paradigm lua for instance does not contain explicit support for inheritance but allows it to be implemented with metatables similarly lua allows programmers to implement namespaces classes and other related features using its single table implementation firstclass functions allow the employment of many techniques from functional programming and full lexical scoping allows finegrained information hiding to enforce the principle of least privilege in general lua strives to provide flexible metafeatures that can be extended as needed rather than supply a featureset specific to one programming paradigm as a result the base language is light  the full reference interpreter is only about kb compiled  and easily adaptable to a broad range of applications lua is a dynamically typed language intended for use as an extension or scripting language and is compact enough to fit on a variety of host platforms it supports only a small number of atomic data structures such as boolean values numbers doubleprecision floating point by default and strings typical data structures such as arrays sets lists and records can be represented using luas single native data structure the table which is essentially a heterogeneous associative array lua implements a small set of advanced features such as firstclass functions garbage collection closures proper tail calls coercion automatic conversion between string and number values at run time coroutines cooperative multitasking and dynamic module loading by including only a minimum set of data types lua attempts to strike a balance between power and size example code the classic hello world program can be written as follows printhello world it can also be written as iowritehello worldn or the example given on the lua website iowritehello world from  version n comments use the following syntax similar to that of ada eiffel haskell sql and vhdl  a comment in lua starts with a doublehyphen and runs to the end of the line  multiline strings  comments  comments like this can have other comments nested  the factorial function is implemented as a function in this example function factorialn end loops lua has four types of loops the while loop the repeat loop similar to a do while loop the numeric for loop and the generic for loop condition  true while condition do end repeat until condition for i  firstlastdelta do delta may be negative allowing the for loop to count down or up end the generic for loop for key value in pairsg do end would iterate over the table g using the standard iterator function pairs until it returns nil functions luas treatment of functions as firstclass values is shown in the following example where the print functions behavior is modified do end any future calls to print will now be routed through the new function and because of luas lexical scoping the old print function will only be accessible by the new modified print lua also supports closures as demonstrated below function addtox end fourplus  addto printfourplus  prints  this can also be achieved by calling the function in the following way printaddto  this is because we are calling the returned function from addto with the argument  directly a new closure for the variable x is created every time addto is called so that each new anonymous function returned will always access its own x parameter the closure is managed by luas garbage collector just like any other object tables tables are the most important data structures and by design the only builtin composite data type in lua and are the foundation of all usercreated types they are conceptually similar to associative arrays in php dictionaries in python and hashes in ruby or perl a table is a collection of key and data pairs where the data is referenced by key in other words its a hashed heterogeneous associative array a key index can be any value but nil and nan a numeric key of  is considered distinct from a string key of  tables are created using the codice constructor syntax atable    creates a new empty table tables are always passed by reference see call by sharing atable  x    creates a new table with one entry mapping x to the number  printatablex  prints the value associated with the string key in this case  btable  atable btablex    the value in the table has been changed to  printbtablex  prints  printatablex  also prints  because atable and btable both refer to the same table as record a table is often used as structure or record by using strings as keys because such use is very common lua features a special syntax for accessing such fields example point   x   y     create new table printpointx  prints  printpointx  has exactly the same meaning as line above the easiertoread quoting the lua  reference manual the syntax varname is just syntactic sugar for varname as namespace by using a table to store related functions it can act as a namespace pointnew  functionx y end pointsetx  functionpoint x end as array by using a numerical key the table resembles an array data type lua arrays are based the first index is  rather than  as it is for many other programming languages though an explicit index of  is allowed a simple array of strings array   a b c d   indices are assigned automatically printarray  prints b automatic indexing in lua starts at  printarray  prints   is the length operator for tables and strings array  z  zero is a legal index printarray  still prints  as lua arrays are based the length of a table t is defined to be any integer index n such that tn is not nil and tn is nil moreover if t is nil n can be zero for a regular array with nonnil values from  to a given n its length is exactly that n the index of its last value if the array has holes that is nil values between other nonnil values then t can be any of the indices that directly precedes a nil value that is it may consider any such nil value as the end of the array a two dimensional table exampletable  printexampletable  prints  printexampletable  prints  an array of objects function pointx y  point object constructor end array   point  point  point    creates array of points printarrayy  prints  using a hash map to emulate an array normally is slower than using an actual array however lua tables are optimized for use as arrays to help avoid this issue metatables extensible semantics is a key feature of lua and the metatable concept allows luas tables to be customized in powerful ways the following example demonstrates an infinite table for any formula fibsn will give the formula fibonacci number using dynamic programming and memoization fibs       initial values for fibs and fibs setmetatablefibs  objectoriented programming although lua does not have a builtin concept of classes they can be implemented using two language features firstclass functions and tables by placing functions and related data into a table an object is formed inheritance both single and multiple can be implemented via the metatable mechanism telling the object to look up nonexistent methods and fields in parent objects there is no such concept as class with these techniques rather prototypes are used as in the programming languages self or javascript new objects are created either with a factory method that constructs new objects from scratch or by cloning an existing object lua provides some syntactic sugar to facilitate object orientation to declare member functions inside a prototype table one can use function tablefuncargs which is equivalent to function tablefuncself args calling class methods also makes use of the colon objectfuncargs is equivalent to objectfuncobject args creating a basic vector object vectorindex  vector function vectornewx y z  the constructor end function vectormagnitude  another method end local vec  vectornew    create a vector printvecmagnitude  call a method output  printvecx  access a member variable output  internals lua programs are not interpreted directly from the textual lua file but are compiled into bytecode which is then run on the lua virtual machine the compilation process is typically invisible to the user and is performed during runtime but it can be done offline in order to increase loading performance or reduce the memory footprint of the host environment by leaving out the compiler lua bytecode can also be produced and executed from within lua using the dump function from the string library and the loadloadstringloadfile functions lua version  is implemented in approximately  lines of c code like most cpus and unlike most virtual machines which are stackbased the lua vm is registerbased and therefore more closely resembles an actual hardware design the register architecture both avoids excessive copying of values and reduces the total number of instructions per function the virtual machine of lua  is one of the first registerbased pure vms to have a wide use perls parrot and androids dalvik are two other wellknown registerbased vms this example is the bytecode listing of the factorial function defined above as shown by the luac  compiler c api lua is intended to be embedded into other applications and provides a c api for this purpose the api is divided into two parts the lua core and the lua auxiliary library the lua apis design eliminates the need for manual reference management in c code unlike pythons api the api like the language is minimalistic advanced functionality is provided by the auxiliary library which consists largely of preprocessor macros which assist with complex table operations stack the lua c api is stack based lua provides functions to push and pop most simple c data types integers floats etc to and from the stack as well as functions for manipulating tables through the stack the lua stack is somewhat different from a traditional stack the stack can be indexed directly for example negative indices indicate offsets from the top of the stack for example  is the top most recently pushed value while positive indices indicate offsets from the bottom oldest value marshalling data between c and lua functions is also done using the stack to call a lua function arguments are pushed onto the stack and then the luacall is used to call the actual function when writing a c function to be directly called from lua the arguments are read from the stack example here is an example of calling a lua function from c int mainvoid running this example gives special tables the c api also provides some special tables located at various pseudoindices in the lua stack at luaglobalsindex prior to lua  is the globals table g from within lua which is the main namespace there is also a registry located at luaregistryindex where c programs can store lua values for later retrieval extension and binding it is possible to write extension modules using the lua api extension modules are shared objects which can be used to extend the functionality of the interpreter by providing native facilities to lua scripts from the lua side such a module appears as a namespace table holding its functions and variables lua scripts may load extension modules using require just like modules written in lua itself a growing collection of modules known as rocks are available through a package management system called luarocks in the spirit of cpan rubygems and python eggs other modules can be found through the lua addons directory of the luausersorg wiki prewritten lua bindings exist for most popular programming languages including other scripting languages for c there are a number of templatebased approaches and some automatic binding generators applications video games in video game development lua is widely used as a scripting language by game programmers perhaps due to its perceived easiness to embed fast execution and short learning curve in  a poll conducted by gamedevnet showed lua as the most popular scripting language for game programming on  january  lua was announced as a winner of the front line award  from the magazine game developer in the category programming tools other other applications using lua include