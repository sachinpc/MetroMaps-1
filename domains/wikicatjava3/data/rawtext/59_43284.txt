java remote method invocation the java remote method invocation java rmi is a java api that performs remote method invocation the objectoriented equivalent of remote procedure calls rpc with support for direct transfer of serialized java classes and distributed garbage collection usage of the term rmi may denote solely the programming interface or may signify both the api and jrmp iiop or another implementation whereas the term rmiiiop read rmi over iiop specifically denotes the rmi interface delegating most of the functionality to the supporting corba implementation the basic idea of java rmi the distributed garbagecollection dgc protocol and much of the architecture underlying the original sun implementation come from the network objects feature of modula generalized code the programmers of the original rmi api generalized the code somewhat to support different implementations such as a http transport additionally the ability to pass arguments by value was added to corba in order to be compatible with the rmi interface still the rmiiiop and jrmp implementations do not have fully identical interfaces rmi functionality comes in the package  while most of suns implementation is located in the codice package note that with java versions before java  developers had to compile rmi stubs in a separate compilation step using codice version  of java and beyond no longer require this step jini version jini offers a more advanced version of rmi in java it functions similarly but provides more advanced searching capabilities and mechanisms for distributed object applications example the following classes implement a simple clientserver program using rmi that displays a message codice class  listens to rmi requests and implements the interface which is used by the client to invoke remote methods codice interface  defines the interface that is used by the client and implemented by the server codice class  this is the client which gets the reference a proxy to the remote object living on the server and invokes its method to get a message if the server object implemented javaioserializable instead of javarmiremote it would be serialized and passed to the client as a value before running this example we need to make a stub file for the interface we used for this task we have the rmi compiler  rmic note that since version  of jse support for dynamically generated stub files has been added and rmic is only provided for backwards compatibility with earlier runtimes or for programs that dont provide an explicit port number or zero when exporting remote objects which is required for generated stubs to be possible as described in the javadoc for unicastremoteobject see the comment in the constructor above