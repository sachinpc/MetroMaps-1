labview laboratory virtual instrument engineering workbench labview is a systemdesign platform and development environment for a visual programming language from national instruments the graphical language is named g not to be confused with gcode originally released for the apple macintosh in  labview is commonly used for data acquisition instrument control and industrial automation on a variety of operating systems oss including microsoft windows various versions of unix linux and macos the latest version of labview is  released in august  dataflow programming the programming language used in labview named g is a dataflow programming language execution is determined by the structure of a graphical block diagram the labviewsource code on which the programmer connects different functionnodes by drawing wires these wires propagate variables and any node can execute as soon as all its input data become available since this might be the case for multiple nodes simultaneously g can execute inherently in parallel multiprocessing and multithreading hardware is exploited automatically by the builtin scheduler which multiplexes multiple os threads over the nodes ready for execution graphical programming labview integrates the creation of user interfaces termed front panels into the development cycle labview programssubroutines are termed virtual instruments vis each vi has three components a block diagram a front panel and a connector panel the last is used to represent the vi in the block diagrams of other calling vis the front panel is built using controls and indicators controls are inputs they allow a user to supply information to the vi indicators are outputs they indicate or display the results based on the inputs given to the vi the back panel which is a block diagram contains the graphical source code all of the objects placed on the front panel will appear on the back panel as terminals the back panel also contains structures and functions which perform operations on controls and supply data to indicators the structures and functions are found on the functions palette and can be placed on the back panel collectively controls indicators structures and functions will be referred to as nodes nodes are connected to one another using wires eg two controls and an indicator can be wired to the addition function so that the indicator displays the sum of the two controls thus a virtual instrument can be run as either a program with the front panel serving as a user interface or when dropped as a node onto the block diagram the front panel defines the inputs and outputs for the node through the connector pane this implies each vi can be easily tested before being embedded as a subroutine into a larger program the graphical approach also allows nonprogrammers to build programs by dragging and dropping virtual representations of lab equipment with which they are already familiar the labview programming environment with the included examples and documentation makes it simple to create small applications this is a benefit on one side but there is also a certain danger of underestimating the expertise needed for highquality g programming for complex algorithms or largescale code it is important that a programmer possess an extensive knowledge of the special labview syntax and the topology of its memory management the most advanced labview development systems offer the ability to build standalone applications furthermore it is possible to create distributed applications which communicate by a clientserver model and are thus easier to implement due to the inherently parallel nature of g benefits interfacing to devices labview includes extensive support for interfacing to devices instruments cameras and other devices users interface to hardware by either writing direct bus commands usb gpib serial or using highlevel devicespecific drivers that provide native labview function nodes for controlling the device labview includes builtin support for ni hardware platforms such as compactdaq and compactrio with a large number of devicespecific blocks for such hardware the measurement and automation explorer max and virtual instrument software architecture visa toolsets national instruments makes thousands of device drivers available for download on the ni instrument driver network idnet code compiling labview includes a compiler that produces native code for the cpu platform this aids performance the graphical code is translated into executable machine code by interpreting the syntax and by compiling the labview syntax is strictly enforced during the editing process and compiled into the executable machine code when requested to run or upon saving in the latter case the executable and the source code are merged into a single file the executable runs with the help of the labview runtime engine which contains some precompiled code to perform common tasks that are defined by the g language the runtime engine reduces compiling time and provides a consistent interface to various operating systems graphic systems hardware components etc the runtime environment makes the code portable across platforms generally labview code can be slower than equivalent compiled c code although the differences often lie more with program optimization than inherent execution speed large libraries many libraries with a large number of functions for data acquisition signal generation mathematics statistics signal conditioning analysis etc along with numerous graphical interface elements are provided in several labview package options the number of advanced mathematic blocks for functions such as integration filters and other specialized abilities usually associated with data capture from hardware sensors is enormous in addition labview includes a textbased programming component named mathscript with added functions for signal processing analysis and mathematics mathscript can be integrated with graphical programming using script nodes and uses a syntax that is compatible generally with matlab parallel programming labview is an inherently concurrent language so it is very easy to program multiple tasks that are performed in parallel via multithreading for example this is done easily by drawing two or more parallel while loops this is a great benefit for test system automation where it is common practice to run processes like test sequencing data recording and hardware interfacing in parallel ecosystem due to the longevity and popularity of the labview language and the ability for users to extend its functions a large ecosystem of third party addons has developed via contributions from the community this ecosystem is available on the labview tools network which is a marketplace for both free and paid labview addons user community there is a lowcost labview student edition aimed at educational institutions for learning purposes there is also an active community of labview users who communicate through several electronic mailing lists email groups and internet forums home bundle edition national instruments provides a low cost labview home bundle edition criticism labview is a proprietary product of national instruments unlike common programming languages such as c or fortran labview is not managed or specified by a third party standards committee such as american national standards institute ansi institute of electrical and electronics engineers ieee international organization for standardization iso etc dataflow programming model due to its thorough adoption of a dataflow programming model as opposed to the sequential ordering of arbitrary commands like most other usually textbased languages a barrier occurs for many people who attempt to apply alreadylearned principles from other programming approaches to labview the inherent parallel nature of the execution of labview code is a perennial source of confusion among those accustomed to other approaches thus most opinions tend to be highly polarised with people being either very fond of it or very hostile to it licensing building a standalone application with labview requires the application builder component which is included with the professional development system but requires a separate purchase if using the base package or full development system runtime environment compiled executables produced by version  and later of the application builder are not truly standalone in that they also require the labview runtime engine be installed on any target computer which runs the application the use of standard controls requires a runtime library for any language all major operating systems supply the libraries needed for common languages such as c but no operating system supplies the runtime needed for labview it must be installed specifically by an administrator or user this can cause problems if an application is distributed to a user who is prepared to run the application but lacks the inclination or permission to install added files on the host system before running the executable parallel execution and race conditions the g language includes constructs for creating multiple execution threads like with any language that targets nondeterministic operating systems such as windows mac os and linux parallel execution of multiple threads can lead to the possibility of race conditions although the g language greatly simplifies both the programming and thread management on multicore and multiprocessor systems the g developer must still guard against race conditions for which there are several functions and techniques available for doing so programming with the labview fieldprogrammable gate array fpga module results in true parallel implementation on fpga targets performance labview tends to produce applications that are slower than hand coded native languages such as c although high performance can be achieved when using multicore machines or dedicated toolkits for specific operations labview makes multicore programming much simpler than many other languages due to its implicit parallelism and automatic thread management light weight applications very small applications still have to start the runtime environment which is a large and slow task this tends to restrict labview to monolithic applications examples of this might be tiny programs to grab a single value from some hardware that can be used in a scripting language  the overheads of the runtime environment render this approach impractical with labview timing system labview uses the january   epoch as its zero time other programs that use the january   epoch are apple incs classic mac os palm os and microsoft excel optionally nontextual g language being nontextual software tools such as versioning sidebyside or diff comparison and version code change tracking cannot be applied in the same manner as for textual programming languages not backward compatible a vi generated in a newer version of labview cannot be opened in an older version not even for viewing the save for previous version feature can be a partial solution if a developer knows upfront that this would be needed no zoom function there is no ability to zoom in to or enlarge a vi which will be hard to see on a large highresolution monitor although this feature is under development  release history in  starting with labview  major versions are released around the first week of august to coincide with the annual national instruments conference ni week and followed by a bugfix release the following february in  national instruments began naming releases after the year in which they are released a bugfix is termed a service pack for example the  service pack  was released in february  repositories and libraries openg as well as lava code repository lavacr serve as repositories for a wide range of open source labview applications and libraries sourceforge has labview listed as one of the possible languages in which code can be written vi package manager has become the standard package manager for labview libraries it is very similar in purpose to rubys rubygems and perls cpan although it provides a graphical user interface similar to the synaptic package manager vi package manager provides access to a repository of the openg and other libraries for labview tools exist to convert mathml into g code related software national instruments also offers a product named measurement studio which offers many of the test measurement and control abilities of labview as a set of classes for use with microsoft visual studio this allows developers to harness some of labviews strengths within the textbased net framework national instruments also offers labwindowscvi as an alternative for ansi c programmers when applications need sequencing users often use labview with teststand test management software also from national instruments the ch interpreter is a cc interpreter that can be embedded in labview for scripting the tril centre ireland biomobius platform and dsp robotics flowstone dsp also use a form of graphical programming similar to labview but are limited to the biomedical and robotics industries respectively labview has a direct node with modefrontier a multidisciplinary and multiobjective optimization and design environment written to allow coupling to almost any computeraided engineering tool both can be part of the same process workflow description and can be virtually driven by the optimization technologies available in modefrontier