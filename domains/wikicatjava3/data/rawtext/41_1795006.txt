inner class in objectoriented programming oop an inner class or nested class is a class declared entirely within the body of another class or interface it is distinguished from a subclass overview an instance of a normal or toplevel class can exist on its own by contrast an instance of an inner class cannot be instantiated without being bound to a toplevel class let us take the abstract notion of a codice with four codices our codices have a specific feature that relies on being part of our codice this notion does not represent the codices as codices in a more general form that could be part of a vehicle instead it represents them as specific to this one we can model this notion using inner classes as follows we have the toplevel class codice instances of class codice are composed of four instances of the class codice this particular implementation of codice is specific to the car so the code does not model the general notion of a wheel that would be better represented as a toplevel class therefore it is semantically connected to the class codice and the code of codice is in some way coupled to its outer class the wheel rather is a composition unit of a car the wheel for a particular car is unique to the car but for generalization the wheel is an aggregation unit to the car inner classes provide us with a mechanism to accurately model this connection we say that our codice class is codice codice being the toplevel class and codice being the inner class inner classes therefore allow for the object orientation of certain parts of the program that would otherwise not be encapsulated into a class larger segments of code within a class might be better modeled or refactored as a separate toplevel class rather than an inner class this would make the code more general in its application and therefore more reusable but potentially might be premature generalization this may prove more effective if code has many inner classes with the shared functionality types of nested classes in java in java there are four types of nested class inner class the following categories are called inner classes each instance of these classes has a reference to an enclosing instance ie an instance of the enclosing class except for local and anonymous classes declared in static context hence they can implicitly refer to instance variables and methods of the enclosing class the enclosing instance reference can be explicitly obtained via codice inner classes may not have static variables or methods except for compiletime constant variables when they are created they must have a reference to an instance of the enclosing class which means they must either be created within an instance method or constructor of the enclosing class or for member and anonymous classes be created using the syntax codice gui code local inner classes are often used in java to define callbacks for gui code components can then share an object that implements an event handling interface or extends an abstract adapter class containing the code to be executed when a given event is triggered anonymous inner classes are also used where the event handling code is only used by one component and therefore does not need a named reference this avoids a large monolithic method with multiple ifelse branches to identify the source of the event this type of code is often considered messy and the inner class variations are considered to be better in all regards