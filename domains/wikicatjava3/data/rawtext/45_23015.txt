programming language a programming language is a formal computer language or constructed language designed to communicate instructions to a machine particularly a computer programming languages can be used to create programs to control the behavior of a machine or to express algorithms the earliest known programmable machine preceded the invention of the digital computer and is the automatic flute player described in the th century by the brothers musa in baghdad during the islamic golden age from the early s programs were used to direct the behavior of machines such as jacquard looms and player pianos thousands of different programming languages have been created mainly in the computer field and many more still are being created every year many programming languages require computation to be specified in an imperative form ie as a sequence of operations to perform while other languages use other forms of program specification such as the declarative form ie the desired result is specified not how to achieve it the description of a programming language is usually split into the two components of syntax form and semantics meaning some languages are defined by a specification document for example the c programming language is specified by an iso standard while other languages such as perl have a dominant implementation that is treated as a reference some languages have both with the basic language defined by a standard and extensions taken from the dominant implementation being common definitions a programming language is a notation for writing programs which are specifications of a computation or algorithm some but not all authors restrict the term programming language to those languages that can express all possible algorithms traits often considered important for what constitutes a programming language include markup languages like xml html or troff which define structured data are not usually considered programming languages programming languages may however share the syntax with markup languages if a computational semantics is defined xslt for example is a turing complete xml dialect moreover latex which is mostly used for structuring documents also contains a turing complete subset the term computer language is sometimes used interchangeably with programming language however the usage of both terms varies among authors including the exact scope of each one usage describes programming languages as a subset of computer languages in this vein languages used in computing that have a different goal than expressing computer programs are generically designated computer languages for instance markup languages are sometimes referred to as computer languages to emphasize that they are not meant to be used for programming another usage regards programming languages as theoretical constructs for programming abstract machines and computer languages as the subset thereof that runs on physical computers which have finite hardware resources john c reynolds emphasizes that formal specification languages are just as much programming languages as are the languages intended for execution he also argues that textual and even graphical input formats that affect the behavior of a computer are programming languages despite the fact they are commonly not turingcomplete and remarks that ignorance of programming language concepts is the reason for many flaws in input formats history early developments the earliest computers were often programmed without the help of a programming language by writing programs in absolute machine language the programs in decimal or binary form were read in from punched cards or magnetic tape or toggled in on switches on the front panel of the computer absolute machine languages were later termed firstgeneration programming languages gl the next step was development of socalled secondgeneration programming languages gl or assembly languages which were still closely tied to the instruction set architecture of the specific computer these served to make the program much more humanreadable and relieved the programmer of tedious and errorprone address calculations the first highlevel programming languages or thirdgeneration programming languages gl were written in the s an early highlevel programming language to be designed for a computer was plankalkl developed for the german z by konrad zuse between  and  however it was not implemented until  and  john mauchlys short code proposed in  was one of the first highlevel languages ever developed for an electronic computer unlike machine code short code statements represented mathematical expressions in understandable form however the program had to be translated into machine code every time it ran making the process much slower than running the equivalent machine code at the university of manchester alick glennie developed autocode in the early s a programming language it used a compiler to automatically convert the language into machine code the first code and compiler was developed in  for the mark  computer at the university of manchester and is considered to be the first compiled highlevel programming language the second autocode was developed for the mark  by r a brooker in  and was called the mark  autocode brooker also developed an autocode for the ferranti mercury in the s in conjunction with the university of manchester the version for the edsac  was devised by d f hartley of university of cambridge mathematical laboratory in  known as edsac  autocode it was a straight development from mercury autocode adapted for local circumstances and was noted for its object code optimisation and sourcelanguage diagnostics which were advanced for the time a contemporary but separate thread of development atlas autocode was developed for the university of manchester atlas  machine in  language fortran was invented at ibm by john backus it was the first widely used high level general purpose programming language to have a functional implementation as opposed to just a design on paper it is still popular language for highperformance computing and is used for programs that benchmark and rank the worlds fastest supercomputers another early programming language was devised by grace hopper in the us called flowmatic it was developed for the univac i at remington rand during the period from  until  hopper found that business data processing customers were uncomfortable with mathematical notation and in early  she and her team wrote a specification for an english programming language and implemented a prototype the flowmatic compiler became publicly available in early  and was substantially complete in  flowmatic was a major influence in the design of cobol since only it and its direct descendant aimaco were in actual use at the time refinement the increased use of highlevel languages introduced a requirement for lowlevel programming languages or system programming languages these languages to varying degrees provide facilities between assembly languages and highlevel languages and can be used to perform tasks which require direct access to hardware facilities but still provide higherlevel control structures and errorchecking the period from the s to the late s brought the development of the major language paradigms now in use each of these languages spawned descendants and most modern programming languages count at least one of them in their ancestry the s and s also saw considerable debate over the merits of structured programming and whether programming languages should be designed to support it edsger dijkstra in a famous  letter published in the communications of the acm argued that goto statements should be eliminated from all higher level programming languages consolidation and growth the s were years of relative consolidation c combined objectoriented and systems programming the united states government standardized ada a systems programming language derived from pascal and intended for use by defense contractors in japan and elsewhere vast sums were spent investigating socalled fifth generation languages that incorporated logic programming constructs the functional languages community moved to standardize ml and lisp rather than inventing new paradigms all of these movements elaborated upon the ideas invented in the previous decades one important trend in language design for programming largescale systems during the s was an increased focus on the use of modules or largescale organizational units of code modula ada and ml all developed notable module systems in the s which were often wedded to generic programming constructs the rapid growth of the internet in the mids created opportunities for new languages perl originally a unix scripting tool first released in  became common in dynamic websites java came to be used for serverside programming and bytecode virtual machines became popular again in commercial settings with their promise of write once run anywhere ucsd pascal had been popular for a time in the early s these developments were not fundamentally novel rather they were refinements of many existing languages and paradigms although their syntax was often based on the c family of programming languages programming language evolution continues in both industry and research current directions include security and reliability verification new kinds of modularity mixins delegates aspects and database integration such as microsofts linq fourthgeneration programming languages gl are a computer programming languages which aim to provide a higher level of abstraction of the internal computer hardware details than gls fifth generation programming languages gl are programming languages based on solving problems using constraints given to the program rather than using an algorithm written by a programmer elements all programming languages have some primitive building blocks for the description of data and the processes or transformations applied to them like the addition of two numbers or the selection of an item from a collection these primitives are defined by syntactic and semantic rules which describe their structure and meaning respectively syntax a programming languages surface form is known as its syntax most programming languages are purely textual they use sequences of text including words numbers and punctuation much like written natural languages on the other hand there are some programming languages which are more graphical in nature using visual relationships between symbols to specify a program the syntax of a language describes the possible combinations of symbols that form a syntactically correct program the meaning given to a combination of symbols is handled by semantics either formal or hardcoded in a reference implementation since most languages are textual this article discusses textual syntax programming language syntax is usually defined using a combination of regular expressions for lexical structure and backusnaur form for grammatical structure below is a simple grammar based on lisp this grammar specifies the following the following are examples of wellformed token sequences in this grammar codice codice and codice not all syntactically correct programs are semantically correct many syntactically correct programs are nonetheless illformed per the languages rules and may depending on the language specification and the soundness of the implementation result in an error on translation or execution in some cases such programs may exhibit undefined behavior even when a program is welldefined within a language it may still have a meaning that is not intended by the person who wrote it using natural language as an example it may not be possible to assign a meaning to a grammatically correct sentence or the sentence may be false the following c language fragment is syntactically correct but performs operations that are not semantically defined the operation codice has no meaning for a value having a complex type and codice is not defined because the value of codice is the null pointer if the type declaration on the first line were omitted the program would trigger an error on compilation as the variable p would not be defined but the program would still be syntactically correct since type declarations provide only semantic information the grammar needed to specify a programming language can be classified by its position in the chomsky hierarchy the syntax of most programming languages can be specified using a type grammar ie they are contextfree grammars some languages including perl and lisp contain constructs that allow execution during the parsing phase languages that have constructs that allow the programmer to alter the behavior of the parser make syntax analysis an undecidable problem and generally blur the distinction between parsing and execution in contrast to lisps macro system and perls codice blocks which may contain general computations c macros are merely string replacements and do not require code execution semantics the term semantics refers to the meaning of languages as opposed to their form syntax static semantics the static semantics defines restrictions on the structure of valid texts that are hard or impossible to express in standard syntactic formalisms for compiled languages static semantics essentially include those semantic rules that can be checked at compile time examples include checking that every identifier is declared before it is used in languages that require such declarations or that the labels on the arms of a case statement are distinct many important restrictions of this type like checking that identifiers are used in the appropriate context eg not adding an integer to a function name or that subroutine calls have the appropriate number and type of arguments can be enforced by defining them as rules in a logic called a type system other forms of static analyses like data flow analysis may also be part of static semantics newer programming languages like java and c have definite assignment analysis a form of data flow analysis as part of their static semantics dynamic semantics once data has been specified the machine must be instructed to perform operations on the data for example the semantics may define the strategy by which expressions are evaluated to values or the manner in which control structures conditionally execute statements the dynamic semantics also known as execution semantics of a language defines how and when the various constructs of a language should produce a program behavior there are many ways of defining execution semantics natural language is often used to specify the execution semantics of languages commonly used in practice a significant amount of academic research went into formal semantics of programming languages which allow execution semantics to be specified in a formal manner results from this field of research have seen limited application to programming language design and implementation outside academia type system a type system defines how a programming language classifies values and expressions into types how it can manipulate those types and how they interact the goal of a type system is to verify and usually enforce a certain level of correctness in programs written in that language by detecting certain incorrect operations any decidable type system involves a tradeoff while it rejects many incorrect programs it can also prohibit some correct albeit unusual programs in order to bypass this downside a number of languages have type loopholes usually unchecked casts that may be used by the programmer to explicitly allow a normally disallowed operation between different types in most typed languages the type system is used only to type check programs but a number of languages usually functional ones infer types relieving the programmer from the need to write type annotations the formal design and study of type systems is known as type theory typed versus untyped languages a language is typed if the specification of every operation defines types of data to which the operation is applicable with the implication that it is not applicable to other types for example the data represented by codice is a string and in many programming languages dividing a number by a string has no meaning and will be rejected by the compilers the invalid operation may be detected when the program is compiled static type checking and will be rejected by the compiler with a compilation error message or it may be detected when the program is run dynamic type checking resulting in a runtime exception many languages allow a function called an exception handler to be written to handle this exception and for example always return  as the result a special case of typed languages are the singletype languages these are often scripting or markup languages such as rexx or sgml and have only one data typemost commonly character strings which are used for both symbolic and numeric data in contrast an untyped language such as most assembly languages allows any operation to be performed on any data which are generally considered to be sequences of bits of various lengths highlevel languages which are untyped include bcpl tcl and some varieties of forth in practice while few languages are considered typed from the point of view of type theory verifying or rejecting all operations most modern languages offer a degree of typing many production languages provide means to bypass or subvert the type system trading typesafety for finer control over the programs execution see casting static versus dynamic typing in static typing all expressions have their types determined prior to when the program is executed typically at compiletime for example  and  are integer expressions they cannot be passed to a function that expects a string or stored in a variable that is defined to hold dates statically typed languages can be either manifestly typed or typeinferred in the first case the programmer must explicitly write types at certain textual positions for example at variable declarations in the second case the compiler infers the types of expressions and declarations based on context most mainstream statically typed languages such as c c and java are manifestly typed complete type inference has traditionally been associated with less mainstream languages such as haskell and ml however many manifestly typed languages support partial type inference for example java and c both infer types in certain limited cases additionally some programming languages allow for some types to be automatically converted to other types for example an int can be used where the program expects a float dynamic typing also called latent typing determines the typesafety of operations at run time in other words types are associated with runtime values rather than textual expressions as with typeinferred languages dynamically typed languages do not require the programmer to write explicit type annotations on expressions among other things this may permit a single variable to refer to values of different types at different points in the program execution however type errors cannot be automatically detected until a piece of code is actually executed potentially making debugging more difficult lisp smalltalk perl python javascript and ruby are dynamically typed weak and strong typing weak typing allows a value of one type to be treated as another for example treating a string as a number this can occasionally be useful but it can also allow some kinds of program faults to go undetected at compile time and even at run time strong typing prevents the above an attempt to perform an operation on the wrong type of value raises an error strongly typed languages are often termed typesafe or safe an alternative definition for weakly typed refers to languages such as perl and javascript which permit a large number of implicit type conversions in javascript for example the expression codice implicitly converts codice to a number and this conversion succeeds even if codice is codice codice an codice or a string of letters such implicit conversions are often useful but they can mask programming errors strong and static are now generally considered orthogonal concepts but usage in the literature differs some use the term strongly typed to mean strongly statically typed or even more confusingly to mean simply statically typed thus c has been called both strongly typed and weakly statically typed it may seem odd to some professional programmers that c could be weakly statically typed however notice that the use of the generic pointer the void pointer does allow for casting of pointers to other pointers without needing to do an explicit cast this is extremely similar to somehow casting an array of bytes to any kind of datatype in c without using an explicit cast such as codice or codice standard library and runtime system most programming languages have an associated core library sometimes known as the standard library especially if it is included as part of the published language standard which is conventionally made available by all implementations of the language core libraries typically include definitions for commonly used algorithms data structures and mechanisms for input and output the line between a language and its core library differs from language to language in some cases the language designers may treat the library as a separate entity from the language however a languages core library is often treated as part of the language by its users and some language specifications even require that this library be made available in all implementations indeed some languages are designed so that the meanings of certain syntactic constructs cannot even be described without referring to the core library for example in java a string literal is defined as an instance of the codice class similarly in smalltalk an anonymous function expression a block constructs an instance of the librarys codice class conversely scheme contains multiple coherent subsets that suffice to construct the rest of the language as library macros and so the language designers do not even bother to say which portions of the language must be implemented as language constructs and which must be implemented as parts of a library design and implementation programming languages share properties with natural languages related to their purpose as vehicles for communication having a syntactic form separate from its semantics and showing language families of related languages branching one from another but as artificial constructs they also differ in fundamental ways from languages that have evolved through usage a significant difference is that a programming language can be fully described and studied in its entirety since it has a precise and finite definition by contrast natural languages have changing meanings given by their users in different communities while constructed languages are also artificial languages designed from the ground up with a specific purpose they lack the precise and complete semantic definition that a programming language has many programming languages have been designed from scratch altered to meet new needs and combined with other languages many have eventually fallen into disuse although there have been attempts to design one universal programming language that serves all purposes all of them have failed to be generally accepted as filling this role the need for diverse programming languages arises from the diversity of contexts in which languages are used one common trend in the development of programming languages has been to add more ability to solve problems using a higher level of abstraction the earliest programming languages were tied very closely to the underlying hardware of the computer as new programming languages have developed features have been added that let programmers express ideas that are more remote from simple translation into underlying hardware instructions because programmers are less tied to the complexity of the computer their programs can do more computing with less effort from the programmer this lets them write more functionality per time unit natural language programming has been proposed as a way to eliminate the need for a specialized language for programming however this goal remains distant and its benefits are open to debate edsger w dijkstra took the position that the use of a formal language is essential to prevent the introduction of meaningless constructs and dismissed natural language programming as foolish alan perlis was similarly dismissive of the idea hybrid approaches have been taken in structured english and sql a languages designers and users must construct a number of artifacts that govern and enable the practice of programming the most important of these artifacts are the language specification and implementation specification the specification of a programming language is an artifact that the language users and the implementors can use to agree upon whether a piece of source code is a valid program in that language and if so what its behavior shall be a programming language specification can take several forms including the following implementation an implementation of a programming language provides a way to write programs in that language and execute them on one or more configurations of hardware and software there are broadly two approaches to programming language implementation compilation and interpretation it is generally possible to implement a language using either technique the output of a compiler may be executed by hardware or a program called an interpreter in some implementations that make use of the interpreter approach there is no distinct boundary between compiling and interpreting for instance some implementations of basic compile and then execute the source a line at a time programs that are executed directly on the hardware usually run several orders of magnitude faster than those that are interpreted in software one technique for improving the performance of interpreted programs is justintime compilation here the virtual machine just before execution translates the blocks of bytecode which are going to be used to machine code for direct execution on the hardware proprietary languages although most of the most commonly used programming languages have fully open specifications and implementations many programming languages exist only as proprietary programming languages with the implementation available only from a single vendor which may claim that such a proprietary language is their intellectual property proprietary programming languages are commonly domain specific languages or internal scripting languages for a single product some proprietary languages are used only internally within a vendor while others are available to external users some programming languages exist on the border between proprietary and open for example oracle corporation asserts proprietary rights to some aspects of the java programming language and microsofts c programming language which has open implementations of most parts of the system also has common language runtime clr as a closed environment many proprietary languages are widely used in spite of their proprietary nature examples include matlab and vbscript some languages may make the transition from closed to open for example erlang was originally an ericssons internal programming language usage thousands of different programming languages have been created mainly in the computing field software is commonly built with  programming languages or more programming languages differ from most other forms of human expression in that they require a greater degree of precision and completeness when using a natural language to communicate with other people human authors and speakers can be ambiguous and make small errors and still expect their intent to be understood however figuratively speaking computers do exactly what they are told to do and cannot understand what code the programmer intended to write the combination of the language definition a program and the programs inputs must fully specify the external behavior that occurs when the program is executed within the domain of control of that program on the other hand ideas about an algorithm can be communicated to humans without the precision required for execution by using pseudocode which interleaves natural language with code written in a programming language a programming language provides a structured mechanism for defining pieces of data and the operations or transformations that may be carried out automatically on that data a programmer uses the abstractions present in the language to represent the concepts involved in a computation these concepts are represented as a collection of the simplest elements available called primitives programming is the process by which programmers combine these primitives to compose new programs or adapt existing ones to new uses or a changing environment programs for a computer might be executed in a batch process without human interaction or a user might type commands in an interactive session of an interpreter in this case the commands are simply programs whose execution is chained together when a language can run its commands through an interpreter such as a unix shell or other commandline interface without compiling it is called a scripting language measuring language usage it is difficult to determine which programming languages are most widely used and what usage means varies by context one language may occupy the greater number of programmer hours a different one have more lines of code and a third may consume the most cpu time some languages are very popular for particular kinds of applications for example cobol is still strong in the corporate data center often on large mainframes fortran in scientific and engineering applications ada in aerospace transportation military realtime and embedded applications and c in embedded applications and operating systems other languages are regularly used to write many different kinds of applications various methods of measuring language popularity each subject to a different bias over what is measured have been proposed combining and averaging information from various internet sites langpopcom claims that in  the ten most popular programming languages are in descending order by overall popularity c java php javascript c python shell ruby objectivec and c taxonomies there is no overarching classification scheme for programming languages a given programming language does not usually have a single ancestor language languages commonly arise by combining the elements of several predecessor languages with new ideas in circulation at the time ideas that originate in one language will diffuse throughout a family of related languages and then leap suddenly across familial gaps to appear in an entirely different family the task is further complicated by the fact that languages can be classified along multiple axes for example java is both an objectoriented language because it encourages objectoriented organization and a concurrent language because it contains builtin constructs for running multiple threads in parallel python is an objectoriented scripting language in broad strokes programming languages divide into programming paradigms and a classification by intended domain of use with generalpurpose programming languages distinguished from domainspecific programming languages traditionally programming languages have been regarded as describing computation in terms of imperative sentences ie issuing commands these are generally called imperative programming languages a great deal of research in programming languages has been aimed at blurring the distinction between a program as a set of instructions and a program as an assertion about the desired answer which is the main feature of declarative programming more refined paradigms include procedural programming objectoriented programming functional programming and logic programming some languages are hybrids of paradigms or multiparadigmatic an assembly language is not so much a paradigm as a direct model of an underlying machine architecture by purpose programming languages might be considered general purpose system programming languages scripting languages domainspecific languages or concurrentdistributed languages or a combination of these some general purpose languages were designed largely with educational goals a programming language may also be classified by factors unrelated to programming paradigm for instance most programming languages use english language keywords while a minority do not other languages may be classified as being deliberately esoteric or not