frege programming language frege is a nonstrict purely functional programming language for the java virtual machine in the spirit of haskell it is considered a haskell dialect or simply a haskell for the java virtual machine frege has a strong static type system with type inference higher rank types are supported though type annotations are required for that frege programs are compiled to java bytecode and run in a java virtual machine existing java classes and methods can be used seamlessly from frege after their types have been properly declared the language was designed by ingo wechsung who named it after the german mathematician logician and philosopher gottlob frege unrelated to the frege program prover comparison with haskell a summary of differences between frege and haskell is listed at the differences between frege and haskell the type string is custom defined as an interface with java strings string  is bound to javas string  conversion functions to haskell correspondent literals freges monad class does not include the method fail included in a separate class monadfail numeric classes for floating point types are also different haskells classes fractional realfrac realfloat and floating are not defined haskells class real defines torational while freges defines  compiling frege programs frege requires java jdk or higher to compile and run at the console as the getting started page states to compile it this assumes the downloaded fregexxvvvjar has been renamed to fregecjar for ease of use to run the compiled program specify the package name as start class on linux and other unix systems on microsoft windows the classpath separator has to be changed to  at the eclipse devel environment there is a plugin for eclipse with instructions given at howto eclipsefregide more involved examples records unlike in haskell the record fields do not appear in the global namespace thus it is possible to reuse the same field name in different types the accessor functions in the example are known as personname and personbirthyear the record syntax is really syntactic sugar and the associated data constructor can be used with traditional or record syntax the same holds for patterns record pattern syntax allows to check for a given constructor and check specific fields or bind them to local variables this makes patterns independent from the number and order of fields in a constructor