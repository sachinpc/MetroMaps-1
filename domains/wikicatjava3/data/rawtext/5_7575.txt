clu programming language clu is a pioneering programming language created at the massachusetts institute of technology mit by barbara liskov and her students between  and  while it did not find extensive use it introduced many features that are used widely now and is seen as a step in the development of objectoriented programming oop however it is not objectoriented instead being considered an objectbased language as it lacked many features of oop key contributions include abstract data types callbysharing iterators multiple return values a form of parallel assignment typesafe parameterized types and typesafe variant types it is also notable for its use of classes with constructors and methods but without inheritance clusters the syntax of clu was based on algol then the starting point for most new language designs the key addition was the concept of a cluster clus type extension system and the root of the languages name cluster clusters correspond generally to the concept of a class in an oo language and have similar syntax for instance here is the clu syntax for a cluster that implements complex numbers a cluster is a module that encapsulates all of its components except for those explicitly named in the is clause these correspond to the public components of a class in recent oo languages a cluster also defines a type that can be named outside the cluster in this case complexnumber but its representation type rep is hidden from external clients cluster names are global and no namespace mechanism was provided to group clusters or allow them to be created locally inside other clusters clu does not perform implicit type conversions in a cluster the explicit type conversions up and down change between the abstract type and the representation there is a universal type any and a procedure force to check that an object is a certain type objects may be mutable or immutable the latter being base types such as integers booleans characters and strings other features another key feature of the clu type system are iterators which return objects from a collection serially one after another iterators offer an identical application programming interface api no matter what data they are being used with thus the iterator for a collection of codices can be used interchangeably with that for an array of codices a distinctive feature of clu iterators is that they are implemented as coroutines with each value being provided to the caller via a yield statement iterators like those in clu are now a common feature of many modern languages such as c ruby and python though recently they are often referred to as generators clu also includes exception handling based on various attempts in other languages exceptions are raised using codice and handled with codice unlike most other languages with exception handling exceptions are not implicitly resignaled up the calling chain exceptions that are neither caught nor resignaled explicitly are immediately converted into a special failure exception that typically terminates the program clu is often credited as being the first language with typesafe variant types called oneofs before the language ml had them a final distinctive feature in clu is parallel assignment multiple assignment where more than one variable can appear on the left hand side of an assignment operator for instance writing codice would exchange values of codice and codice in the same way functions could return several values like codice parallel assignment though not multiple return values predates clu appearing in cpl  named simultaneous assignment but clu popularized it and is often credited as the direct influence leading to parallel assignment in later languages all objects in a clu program live in the heap and memory management is automatic clu supported type parameterized userdefined data abstractions it was the first language to offer typesafe bounded parameterized types using structure where clauses to express constraints on actual type arguments influence on other programming languages clu has influenced many other languages in many ways in approximate chronological order these include clu and ada were major inspirations for c templates clus exception handling mechanisms influenced later languages like c and java c sather python and c include iterators which first appeared in clu perl and lua took multiple assignment and multiple returns from function calls from clu python and ruby borrowed several concepts from clu such as call by sharing the yield statement and multiple assignment