dc computer program dc is a crossplatform reversepolish desk calculator which supports arbitraryprecision arithmetic it is one of the oldest unix utilities predating even the invention of the c programming language like other utilities of that vintage it has a powerful set of features but an extremely terse syntax traditionally the bc calculator program with infix notation was implemented on top of dc this article provides some examples in an attempt to give a general flavour of the language for a complete list of commands and syntax one should consult the man page for ones specific implementation history dc is the oldest surviving unix language when its home bell labs received a pdp dcwritten in bwas the first language to run on the new computer even before an assembler basic operations to multiply four and five in dc note that most of the whitespace is optional you can also get the result with the commands or this translates into push four and five onto the stack then with the multiplication operator pop two elements from the stack multiply them and push the result back on the stack then the p command is used to examine print out to the screen the top element on the stack the q command quits the invoked instance of dc note that numbers must be spaced from each other even as some operators need not be the arithmetic precision is changed with the command k which sets the number of fractional digits the number of digits following the point to be used for arithmetic operations since the default precision is zero this sequence of commands produces  as a result by adjusting the precision with k arbitrary number of decimal places can be produced this command sequence outputs  to evaluate formula v computes the square root of the top of the stack and  is used to input a negative number to swap the top two elements of the stack use the r command to duplicate the top element use the d command inputoutput to read a line from stdin use the  command this will evaluate the line as if it were a dc command and so it is necessary that it be syntactically correct and potentially be a security problem since the  dc command will allow arbitrary command execution as mentioned above p will print the top of the stack with a newline after it n will pop the top of the stack and output it without a trailing newline f will dump the entire stack with one entry per line dc also supports arbitrary input and output radices the i command will pop the top of the stack and use it for the input base hex digits must be in upper case to avoid collisions with dc commands and are not limited to af if the input radix is larger than  the o command does the same for the output base but keep in mind that the input base will affect the parsing of every numeric value afterwards so it is usually advisable to set the output base first to read the values the k i and o commands will push the current precision input radix and output radix on to the top of the stack as an example to convert from hex to binary language features registers in addition to these basic arithmetic and stack operations dc includes support for macros conditionals and storing of results for later retrieval the mechanism underlying macros and conditionals is the register which in dc is a storage location with a single character name which can be stored to and retrieved from sc pops the top of the stack and stores it in register c and lc pushes the value of register c onto the stack for example registers can also be treated as secondary stacks so values can be pushed and popped between them and the main stack using the s and l commands strings string values are enclosed in  and  characters and may be pushed on the stack and stored in registers the a command will convert the low order byte of the numeric value into an ascii character or if the top of the stack is a string it will replace it with the first character of the string there are no ways to build up strings or perform string manipulation other than executing it with the x command or printing it with the p command the  character begins a comment to the end of the line macros macros are then implemented by allowing registers and stack entries to be strings as well as numbers a string can be printed but it can also be executed ie processed as a sequence of dc commands so for instance we can store a macro to add one and then multiply by  into register m and then using the x command which executes the top of the stack we can use it like this conditionals finally we can use this macro mechanism to provide conditionals the command r will pop two values from the stack and execute the macro stored in register r only if they are equal so this will print the string equal only if the top of the stack is equal to  other conditionals are      which will execute the specified macro if the top two values on the stack are greater less than or equal to not greater less than greater than or equal to not less than and not equals respectively loops looping is then possible by defining a macro which conditionally reinvokes itself a simple factorial of the top of the stack might be implemented as the q command will exit from a macro allowing an early return q will quit from two levels of macros and dc itself if there are less than two levels on the call stack z will push the current stack depth before the z operation examples print prime numbers  as an example of a relatively simple program in dc this command in  line will convert distances from metres to feet and inches the bulk of it is concerned with prompting for input printing output in a suitable format and looping round to convert another number as an example here is an implementation of the euclidean algorithm to find the greatest common divisorgcd computing the factorial of an input value formula a more complex example of dc use embedded in a perl script performs a diffiehellman key exchange this was popular as a signature block among cypherpunks during the itar debates where the short script could be run with only perl and dc ubiquitous programs on unixlike operating systems a commented version is slightly easier to understand and shows how to use loops conditionals and the q command to return from a macro with the gnu version of dc the  command can be used to do arbitrary precision modular exponentiation without needing to write the x function categorycrossplatform software external links categoryunix software categorysoftware calculators categoryfree mathematics software categorynumerical programming languages categorystackoriented programming languages