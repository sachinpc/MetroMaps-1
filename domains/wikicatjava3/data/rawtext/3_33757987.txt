openacc openacc for open accelerators is a programming standard for parallel computing developed by cray caps nvidia and pgi the standard is designed to simplify parallel programming of heterogeneous cpugpu systems like in openmp the programmer can annotate c c and fortran source code to identify the areas that should be accelerated using compiler directives and additional functions like openmp  and newer code can be started on both the cpu and gpu openacc members have worked as members of the openmp standard group to merge into openmp specification to create a common specification which extends openmp to support accelerators in a future release of openmp these efforts resulted in a technical report for comment and discussion timed to include the annual supercomputing conference november  salt lake city and to address nonnvidia accelerator support with input from hardware vendors who participate in openmp at isc openacc was demonstrated to work on nvidia amd and intel accelerators without performance data in november   at the sc conference a draft of the openacc version  specification was presented new suggested capabilities include new controls over data movement such as better handling of unstructured data and improvements in support for noncontiguous memory and support for explicit function calls and separate compilation allowing the creation and reuse of libraries of accelerated code openacc  was officially released in june  version  of the specification was released in october  compiler support support of openacc is available in commercial compilers from pgi from version  cray and caps openuh is an open based open source openacc compiler supporting c and fortran developed by hpctools group from university of houston openarc is an open source c compiler developed at oak ridge national laboratory to support all features in the openacc  specification an experimental open source compiler accull is developed by the university of la laguna c language only gcc support for openacc was slow in coming a gputargeting implementation from samsung was announced in september  this translated openacc annotated code to opencl the announcement of a real implementation followed two months later this time from nvidia and based on openacc  this sparked some controversy as the implementation would only target nvidias own ptx assembly language for which no open source assembler or runtime was available experimental support for openaccptx did end up in gcc as of version  usage in a way similar to openmp x on homogeneous system or the earlier openhmpp the primary mode of programming in openacc is directives the specifications also include a runtime library defining several support functions to exploit them user should include openacch in c or openacclibh in fortran and then call accinit function directives openacc defines an extensive list of pragmas directives for example both are used to define parallel computation kernels to be executed on the accelerator using distinct semantics is the main directive to define and copy data to and from the accelerator is used to define the type of parallelism in a codice or codice region runtime api there are some runtime api functions defined too accgetnumdevices accsetdevicetype accgetdevicetype accsetdevicenum accgetdevicenum accasynctest accasynctestall accasyncwait accasyncwaitall accinit accshutdown accondevice accmalloc accfree openacc generally takes care of work organisation for the target device however this can be overridden through the use of gangs and workers a gang consists of workers and operates over a number of processing elements as with a workgroup in opencl