java persistence api the java persistence api jpa is a java application programming interface specification that describes the management of relational data in applications using java platform standard edition and java platform enterprise edition the java persistence api originated as part of the work of the jsr  expert group of the java community process jpa  was the work of the jsr  expert group jpa  was the work of the jsr  expert group persistence in this context covers three areas the reference implementation for jpa is eclipselink history the final release date of the jpa  specification was  may  as part of java community process jsr  the jpa  specification was released  december  the jpa  specification was released  april  entities a persistence entity is a lightweight java class whose state is typically persisted to a table in a relational database instances of such an entity correspond to individual rows in the table entities typically have relationships with other entities and these relationships are expressed through objectrelational metadata objectrelational metadata can be specified directly in the entity class file by using annotations or in a separate xml descriptor file distributed with the application the java persistence query language the java persistence query language jpql makes queries against entities stored in a relational database queries resemble sql queries in syntax but operate against entity objects rather than directly with database tables motivation prior to the introduction of ejb  specification many enterprise java developers used lightweight persistent objects provided by either persistence frameworks for example hibernate or data access objects instead of entity beans this is because entity beans in previous ejb specifications called for too much complicated code and heavy resource footprint and they could be used only in java ee application servers because of interconnections and dependencies in the source code between beans and dao objects or persistence framework thus many of the features originally presented in thirdparty persistence frameworks were incorporated into the java persistence api and as of  projects like hibernate version  and toplink essentials have become themselves implementations of the java persistence api specification related technologies enterprise javabeans the ejb  specification itself part of the java ee  platform included a definition of the java persistence api however endusers do not need an ejb container or a java ee application server in order to run applications that use this persistence api future versions of the java persistence api will be defined in a separate jsr and specification rather than in the ejb jsrspecification the java persistence api replaces the persistence solution of ejb  cmp container managed persistence java data objects api the java persistence api was developed in part to unify the java data objects api and the ejb  container managed persistence cmp api most products supporting each of those apis support the java persistence api the java persistence api specifies persistence only for relational database management systems that is jpa focuses on objectrelational mapping orm note that there are jpa providers who support other database models besides relational database but this is outside the scope of what jpa was designed for refer to jpa  spec section  introduction for clarification of the role of jpa which states very clearly the technical objective of this work is to provide an objectrelational mapping facility for the java application developer using a java domain model to manage a relational database the java data objects specification supports orm as well as persistence to other types of database models for example flat file databases and nosql databases including document databases graph databases as well as literally any other conceivable datastore service data object api the designers of the java persistence api aimed to provide for relational persistence with many of the key areas taken from objectrelational mapping tools such as hibernate and toplink java persistence api improved on and replaced ejb  evidenced by its inclusion in ejb  the service data objects sdo api jsr  has a very different objective to the java persistence api and is considered complementary the sdo api is designed for serviceoriented architectures multiple data formats rather than only relational data and multiple programming languages the java community process manages the java version of the sdo api the c version of the sdo api is managed via oasis hibernate hibernate provides an open source objectrelational mapping framework for java versions  and later provide an implementation for the java persistence api gavin king founded the hibernate project he represented jboss on jsr  the jcp expert group charged with developing jpa this led to ongoing controversy and speculation surrounding the relationship between jpa and hibernate sun microsystems has stated that ideas came from several frameworks including hibernate and java data objects jpa  development of a new version of jpa  was started in july  in the java community process as jsr  jpa  was approved as final on  december  the focus of jpa  was to address features that were present in some of the popular orm vendors but could not gain consensus approval for jpa  main features included were vendors supporting jpa  jpa  development of a new version of jpa  was started in july  as jsr  jpa  was approved as final on  may  main features included were vendors supporting jpa 