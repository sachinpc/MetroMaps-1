joyce programming language joyce is a secure concurrent programming language designed by per brinch hansen in the s it is based on the sequential language pascal and the principles of communicating sequential processes csp it was created to address the shortcomings of csp to be applied itself as a programming language and to provide a tool primarily for teaching for distributed system implementation the language is based around the concept of agents concurrently executed pocesses that communicate only by the use of channels and message passing agents may activate subagents dynamically and recursively the development of joyce formed the foundation of the language superpascal also developed by brinch hansen around  features joyce is based on a small subset of pascal extended with features inspired from csp for concurrency the following sections describe some of the more novel features that were introduced agents an agent is a procedure consisting of a set of statements and possibly nested definitions of other agents an agent may dynamically activate subagents which execute concurrently with their creator an agent can terminate only when all of its subagents have also terminated for example an agent codice activates codice the activation of an agent creates new instances of all local variables and the value of each formal parameter is copied to a local variable hence agents cannot access variables of other agents and are allowed only to communicate through the use of channels this restriction prevents problems associated with the use of shared variables such as race conditions communication agents communicate through entities called channels channels have an alphabet defining the set of symbols which may be transmitted channels are created dynamically and accessed through the use of port variables a port type is defined by a distinct set of symbols constituting its alphabet symbols with multiple values are defined with a specific type for example the symbol codice denotes a message symbol called codice of any integer value the second typeless symbol declaration codice end of stream is known as a signal once a port type has been defined a port variable of that type can be declared and then a channel entity internal to the agent creating it can be activated as follows symbols can then be sent and received on channels using the cspstyle input and output operators codice and codice respectively a communication can only occur if there is a receiving agent matching the sending agent the receiving agent must expect to receive the symbol type being sent for example the value  followed by the codice symbol is sent on port codice and an integer message is received into a variable of a matching type followed by the codice polling statements polling statements are based the csp concept of guarded alternatives a polling statement is made up of a set of statements each guarded by an input channel statement when a communication is matched between a transmitting agent and a guard the guard is executed followed by the corresponding statement for example where the port codice is monitored for the signals codice or codice on a matching communication the corresponding variables codice or codice are incremented security joyce was designed to be a secure language in the sense that a compiler would be able to detect all violations of the language rules example program the following is a complete example program taken from the original paper introducing the joyce programming language implementing an algorithm to generate prime numbers based on a sieving technique a codice agent is sent a stream of integers from its predecessor the first being a prime it removes all multiples of this prime from the stream and activates a successor this continues until the codice signal is propagated along the set of sieves the following agent initialises the set of sieve agents and inputs into them a stream of integers between  and  implementation stack allocation due to concurrent execution of agent procedures a conventional sequential stack allocation scheme cannot be used as the activation records of the agent calls do not follow a lastin firstout pattern instead the creatorsubagent relationships form a treestructured stack a simple scheme is used to implement this behaviour which works by allocating new activation records at the top of the stack and linking subagents activation records to their creators record these records are freed only when the agent has terminated and they are at the top of the stack the effectiveness of this scheme depends on the structure and behaviour of a program which in some cases will result in poor memory usage a more effective scheme was implemented in the superpascal language