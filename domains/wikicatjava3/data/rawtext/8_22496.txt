oberon programming language oberon is a generalpurpose programming language created in  by professor niklaus wirth and the latest member of the wirthian family of algollike languages euler algolw pascal modula and modula oberon was the result of a concentrated effort to increase the power of modula the direct successor of pascal and simultaneously to reduce its complexity its principal new feature is the concept of type extension of record types it permits the construction of new data types on the basis of existing ones and to relate them deviating from the dogma of strictly static data typing type extension is wirths way of inheritance reflecting the viewpoint of the parent site oberon was developed as part of the implementation of the oberon operating system at eth zurich in switzerland the name is from the moon of uranus oberon oberon is still maintained by wirth and the latest revision is dated may   design oberon is designed with a motto attributed to albert einstein in mind make things as simple as possible but not simpler the principal guideline was to concentrate on features that are basic and essential and to omit ephemeral issues another factor was recognition of the growth of complexity in languages such as c and ada in contrast to these oberon emphasizes the use of the library concept for extending the language enumeration and subrange types which were present in modula have been removed similarly set types have been limited to small sets of integers and the number of lowlevel facilities has been sharply reduced most particularly type transfer functions have been eliminated elimination of the remaining potentiallyunsafe facilities concludes the most essential step toward obtaining a truly highlevel language very close typechecking even across modules strict indexchecking at run time nullpointer checking and the safe type extension concept largely allow the programmer to rely on the language rules alone the intent of this strategy was to produce a language that is easier to learn simpler to implement and very efficient oberon compilers have been viewed as compact and fast while providing adequate code quality compared to commercial compilers characteristics the following features characterise the oberon language object orientation oberon supports extension of record types for the construction of abstractions and heterogeneous structures in contrast to the later dialectsoberon and active oberonthe original oberon doesnt have a dispatch mechanism as a language feature but rather as programming technique or design pattern this gives great flexibility in the oop world in the oberon operating system two programming techniques have been used in conjunction for the dispatch call method suite and message handler method suite in this technique a table of procedure variables is defined and a global variable of this type is declared in the extended module and assigned back in the generic module we extend the generic type figure to a specific shape dynamic dispatch is only done via procedures in figures module that is the generic module message handler this technique consists of replacing the set of methods with a single procedure which discriminates among the various methods we extend the generic type figure to a specific shape in the oberon operating system both of these techniques are used for dynamic dispatch the first one is used for a known set of methods the second is used for any new methods declared in the extension module for example if the extension module rectangles were to implement a new rotate procedure within the figures module it could only be called via a message handler implementations and variants oberon nocost implementations of oberon the language and oberon the operating system can be found on the internet several are from ethz itself oberon a few changes were made to the first released specification objectoriented programming features were added the for loop was reinstated for instance the result was oberon currently the most common implementation there is a release called native oberon which includes an operating system and can directly boot on pc class hardware a net implementation of oberon with the addition of some minor netrelated extensions has also been developed at ethz oberon compilers maintained by eth include versions for windows linux solaris and macos furthermore there are implementations for various other operating systems such as ataritos or amigaos there is an oberon lex scanner and yacc parser by stephen j bevan of manchester university uk based on the one in the mssenbck and wirth reference it is at version  oberon oberon defined by niklaus wirth in  and revised in     and  is based on the original version of oberon rather than oberon the main changes are explicit numeric conversion functions eg floor and flt must be used the loop and exit statements have been eliminated while statements have been extended case statements can be used for type extension tests return statements can only be connected to the end of a function imported variables and structured value parameters are readonly and arrays can be assigned without using copy for full details see the programming language oberon oberon compilers have been developed for use with bit windows oberonm oberon language revision  akrons compiles code for both windows and linux oberonjs produces javascript code bit arm cortexm and cortexm microcontrollers and a wirthdesigned risc processor implemented using a xilinx fpga spartan board ports to fpga spartan artix and a risc emulator for windows compilable on linux and os x as well as binaries available for windows also exist active oberon active oberon is yet another variant of oberon which adds objects with objectcentered access protection and local activity control systemguarded assertions preemptive priority scheduling and a changed syntax for methods  typebound procedures in the oberon world objects may be active which means that they may be threads or processes additionally active oberon has a way to implement operators including overloading an advanced syntax for using arrays see oberonx language extensions and proceedings of the th joint modular languages conference  oxford uk and knows about namespaces see proposal for module contexts the operating system a  bluebottle especially the kernel synchronizes and coordinates different active objects related languages development has continued on languages in this family a further extension of oberon produced component pascal which was developed for windows and classic mac os by oberon microsystems a commercial company spinoff from ethz and for net by queensland university of technology in addition the lagoona and obliq languages carry the oberon spirit into specialized areas ethz has released active oberon which supports active objects and the bluebottle operating system and environment jdk http ftp etc for the language as with many prior designs from ethz versions of both are available for download on the internet as this is written both single and dual x cpus and the strongarm family are supported recent net development efforts at ethz have been focused on a new language called zonnon this includes the features of oberon and restores some from pascal enumerated types builtin io but has some syntactic differences additional features include support for active objects operator overloading and exception handling zonnon is available as a plugin language for the microsoft visual studio for net development environment oberonv originally called seneca after seneca the younger is a descendant of oberon designed for numerical applications on supercomputers especially vector or pipelined architectures it includes array constructors and an all statement see seneca  a language for numerical applications on vectorcomputers proc conpar   vapp iv conf r griesemer diss nr  eth zurich