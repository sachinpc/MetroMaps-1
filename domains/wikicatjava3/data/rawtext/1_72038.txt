c c pronounced cee plus plus  is a generalpurpose programming language it has imperative objectoriented and generic programming features while also providing facilities for lowlevel memory manipulation it was designed with a bias toward system programming and embedded resourceconstrained and large systems with performance efficiency and flexibility of use as its design highlights c has also been found useful in many other contexts with key strengths being software infrastructure and resourceconstrained applications including desktop applications servers eg ecommerce web search or sql servers and performancecritical applications eg telephone switches or space probes c is a compiled language with implementations of it available on many platforms and provided by various organizations including the free software foundation fsfs gcc llvm microsoft intel and ibm c is standardized by the international organization for standardization iso with the latest standard version ratified and published by iso in december  as isoiec  informally known as c the c programming language was initially standardized in  as isoiec  which was then amended by the c isoiec  standard the current c standard supersedes these and c with new features and an enlarged standard library before the initial standardization in  c was developed by bjarne stroustrup at bell labs since  as an extension of the c language as he wanted an efficient and flexible language similar to c which also provided highlevel features for program organization many other programming languages have been influenced by c including c d java and newer versions of c after  history in  bjarne stroustrup a danish computer scientist began work on the predecessor to c  the motivation for creating a new language originated from stroustrups experience in programming for his phd thesis stroustrup found that simula had features that were very helpful for large software development but the language was too slow for practical use while bcpl was fast but too lowlevel to be suitable for large software development when stroustrup started working in att bell labs he had the problem of analyzing the unix kernel with respect to distributed computing remembering his phd experience stroustrup set out to enhance the c language with simulalike features c was chosen because it was generalpurpose fast portable and widely used as well as c and simulas influences other languages also influenced c including algol  ada clu and ml initially stroustrups c with classes added features to the c compiler cpre including classes derived classes strong typing inlining and default arguments in  c with classes was renamed to c  being the increment operator in c adding new features that included virtual functions function name and operator overloading references constants typesafe freestore memory allocation newdelete improved type checking and bcpl style singleline comments with two forward slashes codice furthermore it included the development of a standalone compiler for c cfront in  the first edition of the c programming language was released which became the definitive reference for the language as there was not yet an official standard the first commercial implementation of c was released in october of the same year in  c  was released followed by the updated second edition of the c programming language in  new features in  included multiple inheritance abstract classes static member functions const member functions and protected members in  the annotated c reference manual was published this work became the basis for the future standard later feature additions included templates exceptions namespaces new casts and a boolean type after the  update c evolved relatively slowly until in  the c standard was released adding numerous new features enlarging the standard library further and providing more facilities to c programmers after a minor c update released in december  various new additions are planned for  and  etymology according to stroustrup the name signifies the evolutionary nature of the changes from c this name is credited to rick mascitti mid and was first used in december  when mascitti was questioned informally in  about the naming he indicated that it was given in a tongueincheek spirit the name comes from cs  operator which increments the value of a variable and a common naming convention of using  to indicate an enhanced computer program during cs development period the language had been referred to as new c and c with classes before acquiring its final name philosophy throughout cs life its development and evolution has been informally governed by a set of rules that its evolution should follow standardization c is standardized by an iso working group known as jtcscwg so far it has published four revisions of the c standard and is currently working on the next revision c in  the iso working group standardized c for the first time as isoiec  which is informally known as c in  it published a new version of the c standard called isoiec  which fixed problems identified in c the next major revision of the standard was informally referred to as cx but it was not released until  c  included many additions to both the core language and the standard library in  c also known as cy was released as a small extension to c featuring mainly bug fixes and small improvements the draft international standard ballot procedures completed in midaugust  after c a major revision informally known as c or cz is planned for  which is almost featurecomplete as part of the standardization process iso also publishes technical reports and specifications more technical specifications are in development and pending approval including concurrency library extensions a networking standard library ranges and modules language the c language has two main components a direct mapping of hardware features provided primarily by the c subset and zerooverhead abstractions based on those mappings stroustrup describes c as a lightweight abstraction programming language designed for building and using efficient and elegant abstractions and offering both hardware access and abstraction is the basis of c doing it efficiently is what distinguishes it from other languages c inherits most of cs syntax the following is bjarne stroustrups version of the hello world program that uses the c standard library stream facility to write a message to standard output within functions that define a nonvoid return type failure to return a value before control reaches the end of the function results in undefined behaviour compilers typically provide the means to issue a diagnostic in such a caseisoiec  isoiec e programming languages  c  the return statement stmtreturn para  the sole exception to this rule is the codice function which implicitly returns a value of zeroisoiec  isoiec e programming languages  c  main function basicstartmain para  object storage as in c c supports four types of memory management static storage duration objects thread storage duration objects automatic storage duration objects and dynamic storage duration objects static storage duration objects static storage duration objects are created before codice is entered see exceptions below and destroyed in reverse order of creation after codice exits the exact order of creation is not specified by the standard though there are some rules defined below to allow implementations some freedom in how to organize their implementation more formally objects of this type have a lifespan that shall last for the duration of the program static storage duration objects are initialized in two phases first static initialization is performed and only after all static initialization is performed dynamic initialization is performed in static initialization all objects are first initialized with zeros after that all objects that have a constant initialization phase are initialized with the constant expression ie variables initialized with a literal or codice though it is not specified in the standard the static initialization phase can be completed at compile time and saved in the data partition of the executable dynamic initialization involves all object initialization done via a constructor or function call unless the function is marked with codice in c the dynamic initialization order is defined as the order of declaration within the compilation unit ie the same file no guarantees are provided about the order of initialization between compilation units thread storage duration objects variables of this type are very similar to static storage duration objects the main difference is the creation time is just prior to thread creation and destruction is done after the thread has been joined automatic storage duration objects the most common variable types in c are local variables inside a function or block and temporary variables the common feature about automatic variables is that they have a lifetime that is limited to the scope of the variable they are created and potentially initialized at the point of declaration see below for details and destroyed in the reverse order of creation when the scope is left local variables are created as the point of execution passes the declaration point if the variable has a constructor or initializer this is used to define the initial state of the object local variables are destroyed when the local block or function that they are declared in is closed c destructors for local variables are called at the end of the object lifetime allowing a discipline for automatic resource management termed raii which is widely used in c member variables are created when the parent object is created array members are initialized from  to the last member of the array in order member variables are destroyed when the parent object is destroyed in the reverse order of creation ie if the parent is an automatic object then it will be destroyed when it goes out of scope which triggers the destruction of all its members temporary variables are created as the result of expression evaluation and are destroyed when the statement containing the expression has been fully evaluated usually at the codice at the end of a statement dynamic storage duration objects these objects have a dynamic lifespan and are created with a call to and destroyed explicitly with a call to  templates c templates enable generic programming c supports function class alias and variable templates templates may be parameterized by types compiletime constants and other templates templates are implemented by instantiation at compiletime to instantiate a template compilers substitute specific arguments for a templates parameters to generate a concrete function or class instance some substitutions are not possible these are eliminated by an overload resolution policy described by the phrase substitution failure is not an error sfinae templates are a powerful tool that can be used for generic programming template metaprogramming and code optimization but this power implies a cost template use may increase code size because each template instantiation produces a copy of the template code one for each set of template arguments however this is the same or smaller amount of code that would be generated if the code was written by hand this is in contrast to runtime generics seen in other languages eg java where at compiletime the type is erased and a single template body is preserved templates are different from macros while both of these compiletime language features enable conditional compilation templates are not restricted to lexical substitution templates are aware of the semantics and type system of their companion language as well as all compiletime type definitions and can perform highlevel operations including programmatic flow control based on evaluation of strictly typechecked parameters macros are capable of conditional control over compilation based on predetermined criteria but cannot instantiate new types recurse or perform type evaluation and in effect are limited to precompilation textsubstitution and textinclusionexclusion in other words macros can control compilation flow based on predefined symbols but cannot unlike templates independently instantiate new symbols templates are a tool for static polymorphism see below and generic programming in addition templates are a compile time mechanism in c that is turingcomplete meaning that any computation expressible by a computer program can be computed in some form by a template metaprogram prior to runtime in summary a template is a compiletime parameterized function or class written without knowledge of the specific arguments used to instantiate it after instantiation the resulting code is equivalent to code written specifically for the passed arguments in this manner templates provide a way to decouple generic broadly applicable aspects of functions and classes encoded in templates from specific aspects encoded in template parameters without sacrificing performance due to abstraction objects c introduces objectoriented programming oop features to c it offers classes which provide the four features commonly present in oop and some nonoop languages abstraction encapsulation inheritance and polymorphism one distinguishing feature of c classes compared to classes in other programming languages is support for deterministic destructors which in turn provide support for the resource acquisition is initialization raii concept encapsulation encapsulation is the hiding of information to ensure that data structures and operators are used as intended and to make the usage model more obvious to the developer c provides the ability to define classes and functions as its primary encapsulation mechanisms within a class members can be declared as either public protected or private to explicitly enforce encapsulation a public member of the class is accessible to any function a private member is accessible only to functions that are members of that class and to functions and classes explicitly granted access permission by the class friends a protected member is accessible to members of classes that inherit from the class in addition to the class itself and any friends the oo principle is that all of the functions and only the functions that access the internal representation of a type should be encapsulated within the type definition c supports this via member functions and friend functions but does not enforce it the programmer can declare parts or all of the representation of a type to be public and is allowed to make public entities that are not part of the representation of the type therefore c supports not just oo programming but other weaker decomposition paradigms like modular programming it is generally considered good practice to make all data private or protected and to make public only those functions that are part of a minimal interface for users of the class this can hide the details of data implementation allowing the designer to later fundamentally change the implementation without changing the interface in any way inheritance inheritance allows one data type to acquire properties of other data types inheritance from a base class may be declared as public protected or private this access specifier determines whether unrelated and derived classes can access the inherited public and protected members of the base class only public inheritance corresponds to what is usually meant by inheritance the other two forms are much less frequently used if the access specifier is omitted a class inherits privately while a struct inherits publicly base classes may be declared as virtual this is called virtual inheritance virtual inheritance ensures that only one instance of a base class exists in the inheritance graph avoiding some of the ambiguity problems of multiple inheritance multiple inheritance is a c feature not found in most other languages allowing a class to be derived from more than one base class this allows for more elaborate inheritance relationships for example a flying cat class can inherit from both cat and flying mammal some other languages such as c or java accomplish something similar although more limited by allowing inheritance of multiple interfaces while restricting the number of base classes to one interfaces unlike classes provide only declarations of member functions no implementation or member data an interface as in c and java can be defined in c as a class containing only pure virtual functions often known as an abstract base class or abc the member functions of such an abstract base class are normally explicitly defined in the derived class not inherited implicitly c virtual inheritance exhibits an ambiguity resolution feature called dominance operators and operator overloading c provides more than  operators covering basic arithmetic bit manipulation indirection comparisons logical operations and others almost all operators can be overloaded for userdefined types with a few notable exceptions such as member access codice and codice as well as the conditional operator the rich set of overloadable operators is central to making userdefined types in c seem like builtin types overloadable operators are also an essential part of many advanced c programming techniques such as smart pointers overloading an operator does not change the precedence of calculations involving the operator nor does it change the number of operands that the operator uses any operand may however be ignored by the operator though it will be evaluated prior to execution overloaded codice and codice operators lose their shortcircuit evaluation property polymorphism polymorphism enables one common interface for many implementations and for objects to act differently under different circumstances c supports several kinds of static resolved at compiletime and dynamic resolved at runtime polymorphisms supported by the language features described above compiletime polymorphism does not allow for certain runtime decisions while runtime polymorphism typically incurs a performance penalty static polymorphism function overloading allows programs to declare multiple functions having the same name but with different arguments ie ad hoc polymorphism the functions are distinguished by the number or types of their formal parameters thus the same function name can refer to different functions depending on the context in which it is used the type returned by the function is not used to distinguish overloaded functions and would result in a compiletime error message when declaring a function a programmer can specify for one or more parameters a default value doing so allows the parameters with defaults to optionally be omitted when the function is called in which case the default arguments will be used when a function is called with fewer arguments than there are declared parameters explicit arguments are matched to parameters in lefttoright order with any unmatched parameters at the end of the parameter list being assigned their default arguments in many cases specifying default arguments in a single function declaration is preferable to providing overloaded function definitions with different numbers of parameters templates in c provide a sophisticated mechanism for writing generic polymorphic code ie parametric polymorphism in particular through the curiously recurring template pattern its possible to implement a form of static polymorphism that closely mimics the syntax for overriding virtual functions because c templates are typeaware and turingcomplete they can also be used to let the compiler resolve recursive conditionals and generate substantial programs through template metaprogramming contrary to some opinion template code will not generate a bulk code after compilation with the proper compiler settings dynamic polymorphism inheritance variable pointers and references to a base class type in c can also refer to objects of any derived classes of that type this allows arrays and other kinds of containers to hold pointers to objects of differing types references cannot be directly held in containers this enables dynamic runtime polymorphism where the referred objects can behave differently depending on their actual derived types c also provides the codice operator which allows code to safely attempt conversion of an object via a base referencepointer to a more derived type downcasting the attempt is necessary as often one does not know which derived type is referenced upcasting conversion to a more general type can always be checkedperformed at compiletime via codice as ancestral classes are specified in the derived classs interface visible to all callers codice relies on runtime type information rtti metadata in the program that enables differentiating types and their relationships if a codice to a pointer fails the result is the codice constant whereas if the destination is a reference which cannot be null the cast throws an exception objects known to be of a certain derived type can be cast to that with codice bypassing rtti and the safe runtime typechecking of codice so this should be used only if the programmer is very confident the cast is and will always be valid virtual member functions ordinarily when a function in a derived class overrides a function in a base class the function to call is determined by the type of the object a given function is overridden when there exists no difference in the number or type of parameters between two or more definitions of that function hence at compile time it may not be possible to determine the type of the object and therefore the correct function to call given only a base class pointer the decision is therefore put off until runtime this is called dynamic dispatch virtual member functions or methods allow the most specific implementation of the function to be called according to the actual runtime type of the object in c implementations this is commonly done using virtual function tables if the object type is known this may be bypassed by prepending a fully qualified class name before the function call but in general calls to virtual functions are resolved at run time in addition to standard member functions operator overloads and destructors can be virtual as a rule of thumb if any function in the class is virtual the destructor should be as well as the type of an object at its creation is known at compile time constructors and by extension copy constructors cannot be virtual nonetheless a situation may arise where a copy of an object needs to be created when a pointer to a derived object is passed as a pointer to a base object in such a case a common solution is to create a codice or similar virtual function that creates and returns a copy of the derived class when called a member function can also be made pure virtual by appending it with codice after the closing parenthesis and before the semicolon a class containing a pure virtual function is called an abstract data type objects cannot be created from abstract data types they can only be derived from any derived class inherits the virtual function as pure and must provide a nonpure definition of it and all other pure virtual functions before objects of the derived class can be created a program that attempts to create an object of a class with a pure virtual member function or inherited pure virtual member function is illformed lambda expressions c provides support for anonymous functions which are also known as lambda expressions and have the following form the codice list supports the definition of closures such lambda expressions are defined in the standard as syntactic sugar for an unnamed function object an example lambda function may be defined as follows exception handling exception handling is used to communicate the existence of a runtime problem or error from where it was detected to where the issue can be handled it permits this to be done in a uniform manner and separately from the main code while detecting all errors should an error occur an exception is thrown raised which is then caught by the nearest suitable exception handler the exception causes the current scope to be exited and also each outer scope propagation until a suitable handler is found calling in turn the destructors of any objects in these exited scopes at the same time an exception is presented as an object carrying the data about the detected problem the exceptioncausing code is placed inside a codice block the exceptions are handled in separate codice blocks the handlers each codice block can have multiple exception handlers as it is visible in the example below it is also possible to raise exceptions purposefully using the codice keyword these exceptions are handled in the usual way in some cases exceptions cannot be used due to technical reasons one such example is a critical component of an embedded system where every operation must be guaranteed to complete within a specified amount of time this cannot be determined with exceptions as no tools exist to determine the minimum time required for an exception to be handled standard library the c standard consists of two parts the core language and the standard library c programmers expect the latter on every major implementation of c it includes vectors lists maps algorithms find foreach binarysearch randomshuffle etc sets queues stacks arrays tuples inputoutput facilities iostream for reading from and writing to the console and files smart pointers for automatic memory management regular expression support multithreading library atomics support allowing a variable to be read or written to by at most one thread at a time without any external synchronisation time utilities measurement getting current time etc a system for converting error reporting that doesnt use c exceptions into c exceptions a random number generator and a slightly modified version of the c standard library to make it comply with the c type system a large part of the c library is based on the standard template library stl useful tools provided by the stl include containers as the collections of objects such as vectors and lists iterators that provide arraylike access to containers and algorithms that perform operations such as searching and sorting furthermore multimaps associative arrays and multisets are provided all of which export compatible interfaces therefore using templates it is possible to write generic algorithms that work with any container or on any sequence defined by iterators as in c the features of the library are accessed by using the codice directive to include a standard header c provides  standard headers of which  are deprecated the standard incorporates the stl that was originally designed by alexander stepanov who experimented with generic algorithms and containers for many years when he started with c he finally found a language where it was possible to create generic algorithms eg stl sort that perform even better than for example the c standard library qsort thanks to c features like using inlining and compiletime binding instead of function pointers the standard does not refer to it as stl as it is merely a part of the standard library but the term is still widely used to distinguish it from the rest of the standard library inputoutput streams internationalization diagnostics the c library subset etc most c compilers and all major ones provide a standards conforming implementation of the c standard library compatibility to give compiler vendors greater freedom the c standards committee decided not to dictate the implementation of name mangling exception handling and other implementationspecific features the downside of this decision is that object code produced by different compilers is expected to be incompatible there were however attempts to standardize compilers for particular machines or operating systems for example c abi though they seem to be largely abandoned now with c c is often considered to be a superset of c but this is not strictly true most c code can easily be made to compile correctly in c but there are a few differences that cause some valid c code to be invalid or behave differently in c for example c allows implicit conversion from codice to other pointer types but c does not for type safety reasons also c defines many new keywords such as codice and codice which may be used as identifiers for example variable names in a c program some incompatibilities have been removed by the  revision of the c standard c which now supports c features such as line comments codice and declarations mixed with code on the other hand c introduced a number of new features that c did not support were incompatible or redundant in c such as variablelength arrays native complexnumber types however the codice class in the c standard library provides similar functionality although not code compatible designated initializers compound literals and the codice keyword some of the cintroduced features were included in the subsequent version of the c standard c out of those which were not redundant however the c standard introduces new incompatibilities such as disallowing assignment of a string literal to a character pointer which remains valid c to intermix c and c code any function declaration or definition that is to be called fromused both in c and c must be declared with c linkage by placing it within an codice block such a function may not rely on features depending on name mangling ie function overloading criticism despite its widespread adoption many programmers have criticized the c language including linus torvalds richard stallman and ken thompson issues include a lack of reflection or garbage collection slow compilation times and verbose error messages particularly from template metaprogramming to avoid the problems that exist in c and to increase productivity some people suggest alternative languages newer than c such as d go rust and vala