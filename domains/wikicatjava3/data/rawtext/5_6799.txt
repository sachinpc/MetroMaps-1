cobol cobol  an acronym for common businessoriented language is a compiled englishlike computer programming language designed for business use it is imperative procedural and since  objectoriented cobol is primarily used in business finance and administrative systems for companies and governments cobol is still widely used in legacy applications deployed on mainframe computers such as largescale batch and transaction processing jobs but due to its declining popularity and the retirement of experienced cobol programmers programs are being migrated to new platforms rewritten in modern languages or replaced with software packages most programming in cobol is now purely to maintain existing applications cobol was designed in  by codasyl and was partly based on previous programming language design work by grace hopper commonly referred to as the grandmother of cobol it was created as part of a us department of defense effort to create a portable programming language for data processing intended as a stopgap the department of defense promptly forced computer manufacturers to provide it resulting in its widespread adoption it was standardized in  and has since been revised four times expansions include support for structured and objectoriented programming the current standard is isoiec  cobol has an englishlike syntax which was designed to be selfdocumenting and highly readable however it is verbose and uses over  reserved words in contrast with modern succinct syntax like  cobol has a more englishlike syntax in this case  cobol code is split into four divisions identification environment data and procedure containing a rigid hierarchy of sections paragraphs and sentences lacking a large standard library the standard specifies  statements  functions and just one class academic computer scientists were generally uninterested in business applications when cobol was created and were not involved in its design it was effectively designed from the ground up as a computer language for businessmen with an emphasis on inputs and outputs whose only data types were numbers and strings of text cobol has been criticized throughout its life however for its verbosity design process and poor support for structured programming which resulted in monolithic and incomprehensible programs history and specification background in the late s computer users and manufacturers were becoming concerned about the rising cost of programming a  survey had found that in any data processing installation the programming cost us on average and that translating programs to run on new hardware would cost  at a time when new programming languages were proliferating at an ever increasing rate the same survey suggested that if a common businessoriented language were used conversion would be far cheaper and faster in april  representatives from academia computer users and manufacturers met at the university of pennsylvania to organize a formal meeting on common business languages representatives included grace hopper inventor of the englishlike data processing language flowmatic jean sammet and saul gorn the group asked the department of defense dod to sponsor an effort to create a common business language the delegation impressed charles a phillips director of the data system research staff at the dod who thought that they thoroughly understood the dods problems the dod operated  computers had a further  on order and had spent over  million on implementing programs to run on them portable programs would save time reduce costs and ease modernization phillips agreed to sponsor the meeting and tasked the delegation with drafting the agenda cobol  on may  and  of  exactly one year after the zrich algol  meeting a meeting was held at the pentagon to discuss the creation of a common programming language for business it was attended by  people and was chaired by phillips the department of defense was concerned about whether it could run the same data processing programs on different computers fortran the only mainstream language at the time lacked the features needed to write such programs representatives enthusiastically described a language that could work in a wide variety of environments from banking and insurance to utilities and inventory control they agreed unanimously that more people should be able to program and that the new language should not be restricted by the limitations of contemporary technology a majority agreed that the language should make maximal use of english be capable of change be machineindependent and be easy to use even at the expense of power the meeting resulted in the creation of a steering committee and short intermediate and longrange committees the shortrange committee was given to september three months to produce specifications for an interim language which would then be improved upon by the other committees their official mission however was to identify the strengths and weaknesses of existing programming languages and did not explicitly direct them to create a new language the deadline was met with disbelief by the shortrange committee one member betty holberton described the threemonth deadline as gross optimism and doubted that the language really would be a stopgap the steering committee met on june  and agreed to name the entire activity as the committee on data systems languages or codasyl and to form an executive committee the shortrange committee was made up of members representing six computer manufacturers and three government agencies the six computer manufacturers were burroughs corporation ibm minneapolishoneywell honeywell labs rca sperry rand and sylvania electric products the three government agencies were the us air force the navys david taylor model basin and the national bureau of standards now the national institute of standards and technology the committee was chaired by joseph wegstein of the us national bureau of standards work began by investigating data description statements existing applications and user experiences the committee mainly examined the flowmatic aimaco and comtran programming languages the flowmatic language was particularly influential because it had been implemented and because aimaco was a derivative of it with only minor changes flowmatics inventor grace hopper also served as a technical adviser to the committee flowmatics major contributions to cobol were long variable names english words for commands and the separation of data descriptions and instructions ibms comtran language invented by bob bemer was regarded as a competitor to flowmatic by a shortrange committee made up of colleagues of grace hopper some of its features were not incorporated into cobol so that it would not look like ibm had dominated the design process and jean sammet said in  that there had been a strong antiibm bias from some committee members herself included in one case after roy goldfinger author of the comtran manual and intermediaterange committee member attended a subcommittee meeting to support his language and encourage the use of algebraic expressions grace hopper sent a memo to the shortrange committee reiterating sperry rands efforts to create a language based on english in  grace hopper commented that cobol  is  flowmatic and that comtran had had an extremely small influence furthermore she said that she would claim that work was influenced by both flowmatic and comtran only to keep other people happy so they wouldnt try to knock us out features from comtran incorporated into cobol included formulas the clause an improved codice statement which obviated the need for go tos and a more robust file management system the usefulness of the committees work was subject of great debate while some members thought the language had too many compromises and was the result of design by committee others felt it was better than the three languages examined some felt the language was too complex others too simple controversial features included those some considered useless or too advanced for data processing users such features included boolean expressions formulas and table  indices another point of controversy was whether to make keywords contextsensitive and the effect that would have on readability although contextsensitive keywords were rejected the approach was later used in pli and partially in cobol from  little consideration was given to interactivity interaction with operating systems few existed at that time and functions thought of as purely mathematical and of no use in data processing the specifications were presented to the executive committee on september  they fell short of expectations joseph wegstein noted that it contains rough spots and requires some additions and bob bemer later described them as a hodgepodge the subcommittee was given until december to improve it at a midseptember meeting the committee discussed the new languages name suggestions included busy business system infosyl information system language and cocosyl common computer systems language the name cobol was suggested by bob bemer in october the intermediaterange committee received copies of the fact language specification created by roy nutt its features impressed the committee so much that they passed a resolution to base cobol on it this was a blow to the shortrange committee who had made good progress on the specification despite being technically superior fact had not been created with portability in mind or through manufacturer and user consensus it also lacked a demonstrable implementation allowing supporters of a flowmaticbased cobol to overturn the resolution rca representative howard bromberg also blocked fact so that rcas work on a cobol implementation would not go to waste it soon became apparent that the committee was too large for any further progress to be made quickly a frustrated howard bromberg bought a  tombstone with cobol engraved on it and sent it to charles phillips to demonstrate his displeasure a subcommittee was formed to analyze existing languages and was made up of six individuals the subcommittee did most of the work creating the specification leaving the shortrange committee to review and modify their work before producing the finished specification the specifications were approved by the executive committee on january   and sent to the government printing office which printed these as cobol  the languages stated objectives were to allow efficient portable programs to be easily written to allow users to move to new systems with minimal effort and cost and to be suitable for inexperienced programmers the codasyl executive committee later created the cobol maintenance committee to answer questions from users and vendors and to improve and expand the specifications during  the list of manufacturers planning to build cobol compilers grew by september five more manufacturers had joined codasyl bendix control data corporation general electric ge national cash register and philco and all represented manufacturers had announced cobol compilers ge and ibm planned to integrate cobol into their own languages gecom and comtran respectively in contrast international computers and tabulators planned to replace their language codel with cobol meanwhile rca and sperry rand worked on creating cobol compilers the first cobol program ran on  august on an rca  on december  and  the same cobol program albeit with minor changes ran on an rca computer and a remingtonrand univac computer demonstrating that compatibility could be achieved the relative influences of which languages were used continues to this day in the recommended advisory printed in all cobol reference manuals cobol to cobol many logical flaws were found in cobol  leading ges charles katz to warn that it could not be interpreted unambiguously a reluctant shortterm committee enacted a total cleanup and by march  it was reported that cobols syntax was as definable as algols although semantic ambiguities remained early cobol compilers were primitive and slow a  us navy evaluation found compilation speeds of  statements per minute by mid they had increased to  statements per minute it was observed that increasing memory would drastically increase speed and that compilation costs varied wildly costs per statement were between  and  in late  ibm announced that cobol would be their primary development language and that development of comtran would cease the cobol specification was revised three times in the five years after its publication cobol was replaced in  by cobol this was then replaced by the cobol extended specifications in  which introduced the sort and report writer facilities the added facilities corrected flaws identified by honeywell in late  in a letter to the shortrange committee cobol edition  brought further clarifications to the specifications and introduced facilities for handling mass storage files and tables cobol efforts began to standardize cobol to overcome incompatibilities between versions in late  both iso and the united states of america standards institute now ansi formed groups to create standards ansi produced usa standard cobol x in august  which became the cornerstone for later versions this version was known as american national standard ans cobol and was adopted by iso in  cobol by  cobol had become the most widely used programming language in the world independently of the ansi committee the codasyl programming language committee was working on improving the language they described new versions in    and  including changes such as new interprogram communication debugging and file merging facilities as well as improved stringhandling and library inclusion features although codasyl was independent of the ansi committee the codasyl journal of development was used by ansi to identify features that were popular enough to warrant implementing the programming language committee also liaised with ecma and the japanese cobol standard committee the programming language committee was not wellknown however the vicepresident william rinehuls complained that twothirds of the cobol community did not know of the committees existence it was also poor lacking the funds to make public documents such as minutes of meetings and change proposals freely available in  ansi published a revised version of ans cobol containing new features such as file organizations the statement and the segmentation module deleted features included the statement the statement which was replaced by  and the implementerdefined random access module which was superseded by the new sequential and relative io modules these made up  changes which rendered existing statements incompatible with the new standard the report writer was slated to be removed from cobol but was reinstated before the standard was published iso later adopted the updated standard in  cobol in june  work began on revising cobol the proposed standard commonly called cobol differed significantly from the previous one causing concerns about incompatibility and conversion costs in january  joseph t brophy senior vicepresident of travelers insurance threatened to sue the standard committee because it was not upwards compatible with cobol mr brophy described previous conversions of their millionline code base as nonproductive and a complete waste of our programmer resources later that year the data processing management association dpma said it was strongly opposed to the new standard citing prohibitive conversion costs and enhancements that were forced on the user during the first public review period the committee received  responses of which  were negative form letters other responses were detailed analyses of the effect cobol would have on their systems conversion costs were predicted to be at least  cents per line of code fewer than a dozen of the responses were in favor of the proposed standard in  the dpma withdrew its opposition to the standard citing the responsiveness of the committee to public concerns in the same year a national bureau of standards study concluded that the proposed standard would present few problems a year later a cobol compiler was released to dec vax users who noted that conversion of cobol programs posed few problems the new codice statement and inline codice were particularly well received and improved productivity thanks to simplified control flow and debugging the second public review drew another  mainly negative responses while the last drew just  by which time many concerns had been addressed in late  ansi published the revised standard sixty features were changed or deprecated and many were added such as the standard was adopted by iso the same year two amendments followed in  and  the first introducing intrinsic functions and the other providing corrections iso adopted the amendments in  and  respectively before subsequently taking primary ownership and development of the standard cobol  and objectoriented cobol in  gartner group estimated that there were a total of  billion lines of cobol in existence which ran  of all business programs in the early s work began on adding objectorientation in the next full revision of cobol objectoriented features were taken from c and smalltalk the initial estimate was to have this revision completed by  and an iso committee draft cd was available by  some vendors including micro focus fujitsu and ibm introduced objectoriented syntax based on drafts of the full revision the final approved iso standard was approved and published in late  fujitsugtsoftware micro focus and raincode introduced objectoriented cobol compilers targeting the net framework there were many other new features many of which had been in the codasyl cobol journal of development since  and had missed the opportunity to be included in cobol these other features included three corrigenda were published for the standard two in  and one in  cobol  between  and  three technical reports were produced describing object finalization xml processing and collection classes for cobol cobol  suffered from poor support no compilers completely supported the standard micro focus found that it was due to a lack of user demand for the new features and due to the abolition of the nist test suite which had been used to test compiler conformance the standardization process was also found to be slow and underresourced cobol  includes the following changes legacy cobol programs are used globally in governments and businesses and are running on diverse operating systems such as zos vme unix openvms and windows in  the gartner group reported that  of the worlds business ran on cobol with over  billion lines of code and  billion lines more being written annually near the end of the th century the year  problem yk was the focus of significant cobol programming effort sometimes by the same programmers who had designed the systems decades before the particular level of effort required to correct cobol code has been attributed to the large amount of businessoriented cobol as business applications use dates heavily and to fixedlength data fields after the cleanup effort put into these programs for yk a  survey found that many remained in use the authors said that the survey data suggest a gradual decline in the importance of cobol in application development over the following  years unless  integration with other languages and technologies can be adopted in  and  computerworld surveys found that over  of organizations used cobol more than c and visual basic net and that for half of those cobol was used for the majority of their internal software  of managers said they planned to migrate from cobol and  said they would like to if it was cheaper instead some businesses have migrated their systems from expensive mainframes to cheaper more modern systems while maintaining their cobol programs features syntax cobol has an englishlike syntax which is used to describe nearly everything in a program for example a condition can be expressed as  or more concisely as  or  more complex conditions can be abbreviated by removing repeated conditions and variables for example  can be shortened to  as a consequence of this englishlike syntax cobol has over  keywords some of the keywords are simple alternative or pluralized spellings of the same word which provides for more englishlike statements and clauses eg the and keywords can be used interchangeably as can and  and and  each cobol program is made up of four basic lexical items words literals picture characterstrings see  and separators words include reserved words and userdefined identifiers they are up to  characters long and may include letters digits hyphens and underscores literals include numerals eg  and strings eg  separators include the space character and commas and semicolons followed by a space a cobol program is split into four divisions the identification division the environment division the data division and the procedure division the identification division specifies the name and type of the source element and is where classes and interfaces are specified the environment division specifies any program features that depend on the system running it such as files and character sets the data division is used to declare variables and parameters the procedure division contains the programs statements each division is subdivided into sections which are made up of paragraphs code format cobol can be written in two formats fixed the default or free in fixedformat code must be aligned to fit in certain areas until cobol  these were in cobol  areas a and b were merged to form the programtext area which now ends at an implementordefined column cobol  also introduced freeformat code freeformat code can be placed in any column of the file as in newer programming languages comments are specified using codice which can be placed anywhere and can also be used in fixedformat source code continuation lines are not present and the codice directive replaces the codice indicator identification division the identification division identifies the following code entity and contains the definition of a class or interface objectoriented programming classes and interfaces have been in cobol since  classes have factory objects containing class methods and variables and instance objects containing instance methods and variables inheritance and interfaces provide polymorphism support for generic programming is provided through parameterized classes which can be instantiated to use any class or interface objects are stored as references which may be restricted to a certain type there are two ways of calling a method the statement which acts similarly to  or through inline method invocation which is analogous to using functions invoke myclass foo returning var move myclassfoo to var  inline method invocation cobol does not provide a way to hide methods class data can be hidden however by declaring it without a clause which leaves the user with no way to access it method overloading was added in cobol  environment division the environment division contains the configuration section and the inputoutput section the configuration section is used to specify variable features such as currency signs locales and character sets the inputoutput section contains filerelated information files cobol supports three file formats or  sequential indexed and relative in sequential files records are contiguous and must be traversed sequentially similarly to a linked list indexed files have one or more indexes which allow records to be randomly accessed and which can be sorted on them each record must have a unique key but other  record keys need not be unique implementations of indexed files vary between vendors although common implementations such as cisam and vsam are based on ibms isam relative files like indexed files have a unique record key but they do not have alternate keys a relative records key is its ordinal position for example the th record has a key of  this means that creating a record with a key of  may require the creation of empty preceding records relative files also allow for both sequential and random access a common nonstandard extension is the  organization used to process text files records in a file are terminated by a newline and may be of varying length data division the data division is split into six sections which declare different items the file section for file records the workingstorage section for static variables the localstorage section for automatic variables the linkage section for parameters and the return value the report section and the screen section for textbased user interfaces aggregated data data items in cobol are declared hierarchically through the use of levelnumbers which indicate if a data item is part of another an item with a higher levelnumber is subordinate to an item with a lower one toplevel data items with a levelnumber of  are called  items that have subordinate aggregate data are called  those that do not are called  levelnumbers used to describe standard data items are between  and  in the above example elementary item and group item are subordinate to the record  while elementary items   and are part of the group item  subordinate items can be disambiguated with the or  keyword for example consider the example code above along with the following example the names   and are ambiguous by themselves since more than one data item is defined with those names to specify a particular data item for instance one of the items contained within the group the programmer would use or the equivalent  this syntax is similar to the dot notation supported by most contemporary languages other data levels a levelnumber of  is used to declare a regrouping of previously defined items irrespective of how those items are structured this data level also referred to by the associated  is rarely used and circa  was usually found in old programs its ability to ignore the hierarchical and logical structure data meant its use was not recommended and many installations forbade its use a  levelnumber indicates the item is standalone and in such situations is equivalent to the levelnumber  for example the following code declares two level data items and  which are nongroup data items that are independent of not subordinate to any other data items an  levelnumber declares a  a socalled level which is true when its parent data item contains one of the values specified in it clause for example the following code defines two level conditionname items that are true or false depending on the current character data value of the data item when the data item contains a value of  the conditionname is true whereas when it contains a value of or  the conditionname is true if the data item contains some other value both of the conditionnames are false data types standard cobol provides the following data types type safety is variable in cobol numeric data is converted between different representations and sizes silently and alphanumeric data can be placed in any data item that can be stored as a string including numeric and group data in contrast object references and pointers may only be assigned from items of the same type and their values may be restricted to a certain type picture clause a or  clause is a string of characters each of which represents a portion of the data item and what it may contain some picture characters specify the type of the item and how many characters or digits it occupies in memory for example a indicates a decimal digit and an indicates that the item is signed other picture characters called  and  characters specify how an item should be formatted for example a series of characters define character positions as well as how a leading sign character is to be positioned within the final character data the rightmost nonnumeric character will contain the items sign while other character positions corresponding to a to the left of this position will contain a space repeated characters can be specified more concisely by specifying a number in parentheses after a picture character for example is equivalent to  picture specifications containing only digit  and sign  characters define purely  data items while picture specifications containing alphabetic  or alphanumeric  characters define  data items the presence of other formatting characters define  or  data items usage clause the clause declares the format data is stored in depending on the data type it can either complement or be used instead of a clause while it can be used to declare pointers and object references it is mostly geared towards specifying numeric types these numeric formats are report writer the report writer is a declarative facility for creating reports the programmer need only specify the report layout and the data required to produce it freeing them from having to write code to handle things like page breaks data formatting and headings and footings reports are associated with report files which are files which may only be written to through report writer statements each report is defined in the report section of the data division a report is split into report groups which define the reports headings footings and details reports work around hierarchical  control breaks occur when a key variable changes it value for example when creating a report detailing customers orders a control break could occur when the program reaches a different customers orders here is an example report description for a report which gives a salespersons sales and which warns of any invalid records the above report description describes the following layout four statements control the report writer  which prepares the report writer for printing  which prints a report group  which suppresses the printing of a report group and  which terminates report processing for the above sales report example the procedure division might look like this procedure division procedures the sections and paragraphs in the procedure division collectively called procedures can be used as labels and as simple subroutines unlike in other divisions paragraphs do not need to be in sections execution goes down through the procedures of a program until it is terminated to use procedures as subroutines the verb is used this transfers control to the specified range of procedures and returns only upon reaching the end unusual control flow can trigger  which cause control in performed procedures to return at unexpected times to unexpected locations procedures can be reached in three ways they can be called with  jumped to from a or through execution falling through the bottom of an above paragraph combinations of these invoke undefined behavior creating mines specifically mines occur when execution of a range of procedures would cause control flow to go past the last statement of a range of procedures already being performed for example in the code in the adjacent image a mine is tripped at the end of when the screen is invalid when the screen is invalid control jumps to the section which when done performs  this recursion triggers undefined behavior as there are now two overlapping ranges of procedures being performed the mine is then triggered upon reaching the end of and means control could return to one of two locations statements cobol  has  statements also called  which can be grouped into the following broad categories control flow io data manipulation and the report writer the report writer statements are covered in the report writer section control flow cobols conditional statements are and  is a switchlike statement with the added capability of evaluating multiple values and conditions this can be used to implement decision tables for example the following might be used to control a cnc lathe evaluate true also desiredspeed also currentspeed endevaluate the statement is used to define loops which are executed until a condition is true not  unlike other languages it is also used to call procedures or ranges of procedures see the procedures section for more details and call subprograms and methods respectively the name of the subprogrammethod is contained in a string which may be a literal or a data item parameters can be passed by reference by content where a copy is passed by reference or by value but only if a prototype is available the statement is a return statement and the statement stops the program the statement has six different formats it can be used as a return statement a break statement a continue statement an end marker or to leave a procedure exceptions are raised by a statement and caught with a handler or  defined in the portion of the procedure division declaratives are sections beginning with a statement which specify the errors to handle exceptions can be names or objects is used in a declarative to jump to the statement after the one that raised the exception or to a procedure outside the  unlike other languages uncaught exceptions may not terminate the program and the program can proceed unaffected io file io is handled by the selfdescribing    and statements along with a further three  which updates a record  which selects subsequent records to access by finding a record with a certain key and  which releases a lock on the last record accessed user interaction is done using and  data manipulation the following verbs manipulate data files and tables are sorted using and the verb merges and sorts files the verb provides records to sort and retrieves sorted records in order scope termination some statements such as and  may themselves contain statements such statements may be terminated in two ways by a period  which terminates all unterminated statements contained or by a scope terminator which terminates the nearest matching open statement if invalidrecord if invalidrecord endif nested statements terminated with a period are a common source of bugs for example examine the following code if x here the intent is to display codice and codice if condition codice is true however codice will be displayed whatever the value of codice because the codice statement is terminated by an erroneous period after  another bug is a result of the dangling else problem when two codice statements can associate with an codice if x else in the above fragment the codice associates with the  statement instead of the  statement causing a bug prior to the introduction of explicit scope terminators preventing it would require  to be placed after the inner codice selfmodifying code the original  cobol specification supported the infamous  statement for which many compilers generated selfmodifying code codice and codice are procedure labels and the single  statement in procedure codice executed after such an statement means  instead many compilers still support it but it was deemed obsolete in the cobol  standard and deleted in  hello world a hello world program in cobol hello world when the  now famous  hello world program example in the c programming language was first published in  a similar mainframe cobol program sample would have been submitted through jcl very likely using a punch card reader and  column punch cards the listing below with an empty data division was tested using gnulinux and the system hercules emulator running mvs j the jcl written in july  is derived from the hercules tutorials and samples hosted by jay moseley in keeping with cobol programming of that era hello world is displayed in all capital letters cobuclg job cobol base test   classamsgclassamsglevel  basetest exec cobuclg  cobsysin dd   lkedsyslib dd dsnamesyscoblibdispshr   dd dsnamesyslinklibdispshr  gosysprint dd sysouta    after submitting the jcl the mvs console displayed line  of the console listing above is highlighted for effect the highlighting is not part of the actual console output the associated compiler listing generated over four pages of technical detail and job run information for the single line of output from the  lines of cobol criticism and defense lack of structure in the s programmers began moving away from unstructured spaghetti code to the structured programming paradigm in his letter to an editor in  entitled how do we tell truths that might hurt which was critical of several of cobols contemporaries computer scientist and turing award recipient edsger dijkstra remarked that the use of cobol cripples the mind its teaching should therefore be regarded as a criminal offense in his dissenting response to dijkstras article and the above offensive statement computer scientist howard e tompkins defended structured cobol cobol programs with convoluted control flow indeed tend to cripple the mind but this was because there are too many such business application programs written by programmers that have never had the benefit of structured cobol taught well one cause of spaghetti code was the statement attempts to remove s from cobol code however resulted in convoluted programs and reduced code quality s were largely replaced by the statement and procedures which promoted modular programming and gave easy access to powerful looping facilities however could only be used with procedures so loop bodies were not located where they were used making programs harder to understand cobol programs were infamous for being monolithic and lacking modularization cobol code could only be modularized through procedures which were found to be inadequate for large systems it was impossible to restrict access to data meaning a procedure could access and modify data item furthermore there was no way to pass parameters to a procedure an omission jean sammet regarded as the committees biggest mistake another complication stemmed from the ability to a specified sequence of procedures this meant that control could jump to and return from any procedure creating convoluted control flow and permitting a programmer to break the singleentry singleexit rule this situation improved as cobol adopted more features cobol added subprograms giving programmers the ability to control the data each part of the program could access cobol then added nested subprograms allowing programmers to hide subprograms further control over data and code came in  when objectoriented programming userdefined functions and userdefined data types were included nevertheless much important legacy cobol software uses unstructured code which has become unmaintainable it can be too risky and costly to modify even a simple section of code since it may be used from unknown places in unknown ways compatibility issues cobol was intended to be a highly portable common language however by  around  dialects had been created one source of dialects was the standard itself the  standard was composed of one mandatory nucleus and eleven functional modules each containing two or three levels of support this permitted  official variants cobol was not fully compatible with earlier versions and its development was controversial joseph t brophy the cio of travelers insurance spearheaded an effort to inform cobol users of the heavy reprogramming costs of implementing the new standard as a result the ansi cobol committee received more than  letters from the public mostly negative requiring the committee to make changes on the other hand conversion to cobol was thought to increase productivity in future years thus justifying the conversion costs verbose syntax cobol syntax has often been criticized for its verbosity proponents say that this was intended to make the code selfdocumenting easing program maintenance cobol was also intended to be easy for programmers to learn and use while still being readable to nontechnical staff such as managers the desire for readability led to the use of englishlike syntax and structural elements such as nouns verbs clauses sentences sections and divisions yet by  maintainers of cobol programs were struggling to deal with incomprehensible code and the main changes in cobol were there to help ease maintenance jean sammet a shortrange committee member noted that little attempt was made to cater to the professional programmer in fact people whose main interest is programming tend to be very unhappy with cobol which she attributed to cobols verbose syntax isolation from the computer science community the cobol community has always been isolated from the computer science community no academic computer scientists participated in the design of cobol all of those on the committee came from commerce or government computer scientists at the time were more interested in fields like numerical analysis physics and system programming than the commercial fileprocessing problems which cobol development tackled jean sammet attributed cobols unpopularity to an initial snob reaction due to its inelegance the lack of influential computer scientists participating in the design process and a disdain for business data processing the cobol specification used a unique notation or metalanguage to define its syntax rather than the new backusnaur form because few committee members had heard of it this resulted in severe criticism later cobol suffered from a shortage of material covering it it took until  for introductory books to appear with richard d irwin publishing a college textbook on cobol in  by  there were twice as many books on fortran and four times as many on basic as on cobol in the library of congress university professors taught more modern stateoftheart languages and techniques instead of cobol which was said to have a trade school nature donald nelson chair of the codasyl cobol committee said in  that academics  hate cobol and that computer science graduates had hate cobol drilled into them a  poll by micro focus found that  of university academics thought cobol was outdated or dead and that  believed their students thought cobol was outdated or dead the same poll also found that only  of academics had cobol programming on their curriculum even though  thought they should teach it in contrast in  cobol featured in  of information systems curricula in the united states the same proportion as c and java concerns about the design process doubts have been raised about the competence of the standards committee shortterm committee member howard bromberg said that there was little control over the development process and that it was plagued by discontinuity of personnel and  a lack of talent jean sammet and jerome garfunkel also noted that changes introduced in one revision of the standard would be reverted in the next due as much to changes in who was in the standard committee as to objective evidence cobol standards have repeatedly suffered from delays cobol arrived five years later than hoped cobol  was five years late and cobol  was six years late to combat delays the standard committee allowed the creation of optional addenda which would add features more quickly than by waiting for the next standard revision however some committee members raised concerns about incompatibilities between implementations and frequent modifications of the standard influences on other languages cobols data structures influenced subsequent programming languages its record and file structure influenced pli and pascal and the codice clause was a predecessor to pascals variant records explicit file structure definitions preceded the development of database management systems and aggregated data was a significant advance over fortrans arrays cobols facility although considered primitive influenced the development of include directives the focus on portability and standardization meant programs written in cobol could be portable and facilitated the spread of the language to a wide variety of hardware platforms and operating systems additionally the welldefined division structure restricts the definition of external references to the environment division which simplifies platform changes in particular