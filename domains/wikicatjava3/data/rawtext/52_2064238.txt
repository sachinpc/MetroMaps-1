plain old java object in software engineering a plain old java object pojo is an ordinary java object not bound by any special restriction and not requiring any class path the term was coined by martin fowler rebecca parsons and josh mackenzie in september  we wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name so we gave them one and its caught on very nicely the term pojo initially denoted a java object which does not follow any of the major java object models conventions or frameworks nowadays pojo may be used as an acronym for plain old javascript object as well in which case the term denotes a javascript object of similar pedigree the term continues the pattern of older terms for technologies that do not use fancy new features such as pots plain old telephone service in telephony pods plain old data structures that are defined in c but use only c language features and pod plain old documentation in perl the equivalent to pojo on the net framework is plain old clr object poco for php it is plain old php object popo the pojo phenomenon has most likely gained widespread acceptance because of the need for a common and easily understood term that contrasts with complicated object frameworks definition ideally speaking a pojo is a java object not bound by any restriction other than those forced by the java language specification ie a pojo should not have to however due to technical difficulties and other reasons many software products or frameworks described as pojocompliant actually still require the use of prespecified annotations for features such as persistence to work properly the idea is that if the object actually class was a pojo before any annotations were added and would return to pojo status if the annotations are removed then it can still be considered a pojo then the basic object remains a pojo in that it has no special characteristics such as an implemented interface that makes it a specialized java object sjo or sic sojo contextual variations javabeans a javabean is a pojo that is serializable has a noargument constructor and allows access to properties using getter and setter methods that follow a simple naming convention because of this convention simple declarative references can be made to the properties of arbitrary javabeans code using such a declarative reference does not have to know anything about the type of the bean and the bean can be used with many frameworks without these frameworks having to know the exact type of the bean the javabeans specification if fully implemented slightly breaks the pojo model as the class must implement the serializable interface to be a true javabean many pojo classes still called javabeans do not meet this requirement since serializable is a marker methodless interface this is not much of a burden the following shows an example of a jsf component having a bidirectional binding to a pojos property the definition of the pojo can be as follows public class mybean  because of the javabean naming conventions the single someproperty reference can be automatically translated to the getsomeproperty or issomeproperty if the property is of boolean type method for getting a value and to the setsomepropertystring method for setting a value transparently adding services as designs using pojos have become more commonly used systems have arisen that give pojos the full functionality used in frameworks and more choice about which areas of functionality are actually needed in this model the programmer creates nothing more than a pojo this pojo purely focuses on business logic and has no dependencies on enterprise frameworks aop frameworks then transparently add crosscutting concerns like persistence transactions security and so on spring was an early implementation of this idea and one of the driving forces behind popularizing this model an example of an ejb bean being a pojo the following shows a fully functional ejb bean demonstrating how ejb leverages the pojo model public class helloworldservice  as given the bean does not need to extend any ejb class or implement any ejb interface and also does not need to contain any ejb annotations instead the programmer declares in an external xml file which ejb services should be added to the bean in practice some people find annotations elegant while they see xml as verbose ugly and hard to maintain yet others find annotations pollute the pojo model thus as an alternative to xml many frameworks eg spring ejb and jpa allow annotations to be used instead of or in addition to xml the following shows the same ejb bean as showed above but with an annotation added in this case the xml file is no longer needed stateless public class helloworldservice  with the annotation as given above the bean isnt a truly pure pojo anymore but since annotations are merely passive metadata this has far fewer harmful drawbacks compared to the invasiveness of having to extend classes andor implement interfaces accordingly the programming model is still very much like the pure pojo model