comparison of c sharp and visual basic net c and visual basic net are the two primary languages used to program on the net framework language history c and vbnet are syntactically very different languages with very different histories as the name suggests the c syntax is based on the core c programming language originally developed by dennis ritchie at bell labs att in the s java and c are two other programming languages whose syntax is also based on the c syntax so they share a common look and feel see comparison of java and c sharp for more on this topic vbnet has its roots in the basic language of the s with its name being an acronym for beginners allpurpose symbolic instruction code in its beginning basic was used in the college community as a basic language for first exposure to computer programming and the acronym represented the language accurately in the s the language was picked up by microcomputer manufacturers of the era to be used as both a simple rom embedded programming language as well as a quasi operating system for inputoutput control in the early s the language was picked up by microsoft and expanded significantly beyond its original intent into their visual basic languageplatform that was sold throughout the s as a rapid application development rad tool for windows programming it competed directly against other rad tools of the s such as powerbuilder even though visual basic was a successful development platform it was discontinued after its th version vb when microsoft introduced the net framework and its related visual studio development platform in the early s at that time the current c and vb languages were used by microsoft as the basis for two new programming languages in their new integrated development environment ide these languages were named c and vbnet language comparison though c and vbnet are syntactically very different that is where the differences mostly end microsoft developed both of these languages to be part of the same net framework development platform they are both developed managed and supported by the same language development team at microsoft they compile to the same intermediate language il which runs against the same net framework runtime libraries although there are some differences in the programming constructs discussed further below their differences are primarily syntactic and assuming one avoids the visual basic compatibility libraries provided by microsoft to aid conversion from vb almost every command in vb has an equivalent command in c and vice versa lastly both languages reference the same base classes of the net framework to extend their functionality as a result with few exceptions a program written in either language can be run through a simple syntax converter to translate to the other there are many open source and commercially available products for this task the only fundamental differences between the languages can be found in the implementation of interfaces and in the declaration raising and handling of events although both languages are highlevel programming languages vbnet maintains a slightly higher level of abstraction in some respects runtime multilanguage support one of the main goals of net has been its multilanguage support the intent of the design was that all of the various microsoft languages should have the same level of access to all os features should be able to expose the same level of power and usability and simplify calling from a module in one language to that written in another language in implementation all net programming languages share the same runtime engine uniform abstract syntax tree and common intermediate language additionally all net languages have access to platform features including garbage collection cross language inheritance exception handling and debugging this allows the same output binary to be produced from any net programming language development environment visual studio provides minor differences in the development environment for c and vbnet with each subsequent release of visual studio the differences between development environments for these languages have been reduced for instance early versions of visual studio had poor support for intellisense in c compared to visual basic net and did not offer background compilation for c currently the main differences in the development environments are additional features for visual basic net that originated in vb including background compilation is a feature of the visual studio ide whereby code is compiled as it is written by the programmer with the purpose of identifying compilation errors without requiring the solution to be built this feature has been available for visual basic since net  and was present in early versions of visual studio for visual basic net however background compilation is a relatively new concept for visual c and is available with service pack  for visual studio  standard edition and above a distinct disadvantage for c is that the error list panel does not update until the solution is rebuilt refactoring large projects in c is made more difficult by the need to frequently rebuild the solution in order to highlight compilation errors such is not the case with visual basic because the error list panel is synchronized with the background compiler background compilation is less demanding on system resources and results in faster build cycles this is a particular advantage with large projects and can significantly reduce the time required to start debugging in the ide language features the bulk of the differences between c and vbnet from a technical perspective are syntactic sugar that is most of the features are in both languages but some things are easier to do in one language than another many of the differences between the two languages are actually centered around the ide it should be noted that although the default is for codice to be off for backward compatibility reasons it is recommended by microsoft and widely considered to be good practice to turn codice on due to the fact that it increases application performance and reduces the possibility of naming errors and other programming mistakes syntax comparisons visual basic net terminates a block of code with codice statements or codice statements for a for loop which are more familiar for programmers with experience using tsql in c the braces codice are used to delimit blocks which is more familiar to programmers with experience in other widely deployed languages such as c and java additionally in c if a block consists of only a single statement the braces may be omitted c is case sensitive while visual basic net is not thus in c it is possible to have two variables with the same apparent name for example codice and codice visual studio will correct make uniform the case of variables as they are typed in vbnet in some cases however case sensitivity can be useful c programmers typically capitalize type and member names and leave field and variable names lowercase this allows for example a fairly natural naming of method arguments codice this can however cause problems for those converting c code to a caseinsensitive language such as visual basic or to those unaccustomed to reading a case sensitive language keywords visual basic is not case sensitive which means that any combinations of upper and lower case letters in keywords are acceptable visual studio automatically converts all visual basic keywords to the default capitalised forms eg public if c is case sensitive and all c keywords are in lower cases visual basic and c share most keywords with the difference being that the default visual basic keywords are the capitalised versions of the c keywords eg codice vs codice codice vs codice a few keywords have very different versions in visual basic and c some c keywords such as codice represent different things when applied to methods as opposed to when they are applied to class definitions vbnet on the other hand uses different keywords for different contexts adoption and community support both c and vbnet have high adoption rates and very active developer communities and microsoft fully supports both communities net framework developers widely use both vbnet and c as primary languages however c has more community activity on the internet and there are more books available for c this may indicate either that there is more adoption of c or that users need more help with it examples of community and industry adoption include other languages ccli formerly managed c ccli a replacement for managed extensions for c does not have the adoption rate of c or vbnet but does have a significant following ccli syntactically stylistically and culturally is closest to c however ccli stays closer to its c roots than c does ccli directly supports pointers destructors and other unsafe program concepts which are not supported or limited in the other languages it allows the direct use of both net code and standard c code ccli is used for porting nativelegacy c applications into the net framework or cases where the programmer wants to take more control of the code but this control comes at a significant cost of ease of use and readability many of the automated tools that come with visual studio have reduced functionality when interacting with c code this is because reflection cannot provide as much information about the code as it can for c and vbnet j j runs a distant fourth in terms of adoption j is a language primarily designed to ease the transition of java applications to the net framework it allows developers to leave much of their java or j code unchanged while still running it in the net framework thus allowing them to migrate small pieces of it into another net language such as c individually j does not receive the same level of updates as the other languages and does not have the same level of community support for example visual studio  team system supports automatic generation of unit tests in c vbnet and c but excludes j j has been discontinued and is not included in visual studio  or newer versions since the existing j feature set largely meets customer needs and usage of j is declining additional net languages all net languages compile down to common intermediate language cil which contains rich metadata and is functionally and logically equivalent to the original net language code for these reasons while it is possible to code directly in cil it is rarely done the equivalency of cil to net language code permits tools such as net reflector to transform a net assembly into source code that is nearly identical to the original source code obfuscators are often used to guard against this and operate by directly modifying the cil of an assembly in order to make it difficult or impossible to decompile to a higher level net language