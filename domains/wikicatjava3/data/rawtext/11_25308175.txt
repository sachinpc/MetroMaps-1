superpascal super pascal is an imperative concurrent computing programming language developed by brinch hansen it was designed as a publication language a thinking tool to enable the clear and concise expression of concepts in parallel programming this is in contrast with implementation languages which are often complicated with machine details and historical conventions it was created to address the need at the time for a parallel publication language arguably few languages today are expressive and concise enough to be used as thinking tools history and development superpascal is based on niklaus wirths sequential language pascal extending it with features for safe and efficient concurrency pascal itself was used heavily as a publication language in the s it was used to teach structured programming practices and featured in text books for example on compilers and programming languages brinch hansen had earlier developed the language concurrent pascal one of the earliest concurrent languages for the design of operating systems and realtime control systems the requirements of superpascal were based on the experience gained by brinch hansen over three years in developing a set of model parallel programs which implemented methods for common problems in computational science this experimentation allowed him to make the following conclusions about the future of parallel scientific computing these then led to the following requirements for a parallel publication language features the key ideas in the design of superpascal was to provide a secure programming with abstract concepts for parallelism security superpascal is secure in that it should enable its compiler and runtime system to detect as many cases as possible in which the language concepts break down and produce meaningless results superpascal imposes restrictions on the use of variables that enable a singlepass compiler to check that parallel processes are disjoint even if the processes use procedures with global variables eliminating timedependent errors several features in pascal were ambiguous or insecure and were omitted from superpascal such as labels and codice statements pointers and forward declarations parallelism the parallel features of superpascal are a subset of occam  with the added generality of dynamic process arrays and recursive parallel processes a codice statement denotes that the fixed number of statements it contains must be executed in parallel for example a codice statement denotes the parallel execution of a statement by a dynamic number of processes for example channels and communication parallel processes communicate by sending typed messages through channels created dynamically channels are not variables in themselves but are identified by a unique value known as the channel reference which are held by channel variables a channel is declared for example by the declaration which defines a new mixed type named channel and a variable of this type named c a mixed type channel is restricted to transmitting only the specified types in this case boolean and integer values the channel c is initialised by the codice statement message communication is then achieved with the codice and codice statements the expression or variable providing the value for codice and the variable in codice must both be of the same type as the first channel argument the following example shows the use of these functions in a process that receives a value from the left channel and outputs it on the right one the functions codice and codice can both take multiple input and output arguments respectively the following runtime communication errors can occur parallel recursion recursive procedures can be combined with codice and codice statements to create parallel recursive processes the following example shows how a pipeline of processes can be recursively defined using a codice statement another example is the recursive definition of a process tree interference control the most difficult aspect of concurrent programming is unpredictable or nonreproducible behaviour caused by timedependent errors timedependent errors are caused by interference between parallel processes due to variable updates or channel conflicts if processes sharing a variable update it at unpredictable times the resulting behaviour of the program is timedependent similarly if two processes simultaneously try to send or receive on a shared channel the resulting effect is timedependent superpascal enforces certain restrictions on the use of variables and communication to minimise or eliminate timedependent errors with variables a simple rule is required parallel processes can only update disjoint sets of variables for example in a codice statement a target variable cannot be updated by more than a single process but an expression variable which cant be updated may be used by multiple processes in some circumstances when a variable such as an array is the target of multiple parallel processes and the programmer knows its elementwise usage is disjoint then the disjointness restriction may be overridden with a preceding codice statement structure and syntax superpascal is a block structured language with the same basic syntax as pascal a program consists of a header global variable definitions function or procedure definitions and a main procedure functions and procedures consists of blocks where a block is a set of statements statements are separated by semicolons as opposed to languages like c or java where they are terminated by semicolons the following is an example of a complete superpascal program which constructs a pipeline communication structure with  nodes a master node sends an integer token to the first node this is then passed along the pipeline and incremented at each step and finally received by the master node and printed out implementation the superpascal software can be accessed freely from the brinch hansen archive it consists of a compiler and interpreter which are both written in normal sequential pascal iso level  standard pascal this is supported by the gnu pascal compiler and newer versions of the free pascal compiler  with the miso switch with the following respective small modifications to the code for gpc the file codice uses the nonstandard codice function line  which is used to obtain the system time instead the extended pascal codice function can be used which is supported by the gnu pascal compiler by declaring a variable of type codice setting that with the current time using codice and assigning the codice field of the codice to the variable codice as a note for gpc on bit operating systems the gnu pascal compiler will need to be compiled and installed from source free pascal also needs a solution to the above clock problem on windows just declare gettickcount as external with clock as name in addition the resetrewrites that are marked as nonstandard in the source need to be changed to assignreset or rewrite pairs gpc probably only errors on this if you enable strict flags and the c preprocessor commands include xx must be changed to include xx