abstract window toolkit the abstract window toolkit awt is javas original platformdependent windowing graphics and userinterface widget toolkit preceding swing the awt is part of the java foundation classes jfc  the standard api for providing a graphical user interface gui for a java program awt is also the gui toolkit for a number of java me profiles for example connected device configuration profiles require java run times on mobile telephones to support abstract window toolkit history when sun microsystems first released java in  awt widgets provided a thin level of abstraction over the underlying native userinterface for example creating an awt check box would cause awt directly to call the underlying native subroutine that created a check box however a check box on microsoft windows is not exactly the same as a check box on mac os or on the various types of unix some application developers prefer this model because it provides a high degree of fidelity to the underlying native windowing toolkit and seamless integration with native applications in other words a gui program written using awt looks like a native microsoft windows application when run on windows but the same program looks like a native apple macintosh application when run on a mac etc however some application developers dislike this model because they prefer their applications to look exactly the same on every platform in jse  the swing toolkit largely superseded the awts widgets in addition to providing a richer set of ui widgets swing draws its own widgets by using java d to call into lowlevel subroutines in the local graphics subsystem instead of relying on the operating systems highlevel user interface module swing provides the option of using either the native platforms look and feel or a crossplatform look and feel the java look and feel that looks the same on all windowing systems architecture the awt provides two levels of apis awt also makes some higher level functionality available to applications such as neither awt nor swing are inherently thread safe therefore code that updates the gui or processes events should execute on the event dispatching thread failure to do so may result in a deadlock or race condition to address this problem a utility class called swingworker allows applications to perform timeconsuming tasks following userinteraction events in the event dispatching thread mixing awt and swing components prior to java  update  mixing swing components and basic awt widgets often resulted in undesired side effects with awt widgets appearing on top of the swing widgets regardless of their defined zorder this problem was because the rendering architecture of the two widget toolkits was very different despite swing borrowing heavyweight top containers from awt starting in java  update  it is possible to mix swing and awt widgets without having zorder problems implementation as the awt is a bridge to the underlying native userinterface its implementation on a new operating system may involve a lot of work especially if it involves any of the awt gui widgets because each of them requires that its native peers be developed from scratch a new project caciocavallo has been created that provides an openjdkbased java api to ease awt implementation on new systems the project has successfully implemented awt widgets using javad all the necessary corejdk modifications have since been pushed to openjdk  which means that java can now be used on a graphics stack other than one of those provided by the official jdk x window system opengl or directx by including an external library and setting some system properties a directfb backend for caciocavallo is under development as is an html backend the aim is to deploy existing swing applicationswithout java supportas ordinary web applications running on a web server