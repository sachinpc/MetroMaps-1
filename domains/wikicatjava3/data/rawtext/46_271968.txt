mixin in objectoriented programming languages a mixin is a class that contains methods for use by other classes without having to be the parent class of those other classes how those other classes gain access to the mixins methods depends on the language mixins are sometimes described as being included rather than inherited mixins encourage code reuse and can be used to avoid the inheritance ambiguity that multiple inheritance can cause the diamond problem or to work around lack of support for multiple inheritance in a language a mixin can also be viewed as an interface with implemented methods this pattern is an example of enforcing the dependency inversion principle history mixins first appeared in the symbolics objectoriented flavors system developed by howard cannon which was an approach to objectorientation used in lisp machine lisp the name was inspired by steves ice cream parlor in somerville massachusetts the owner of the ice cream shop offered a basic flavor of ice cream vanilla chocolate etc and blended in a combination of extra items nuts cookies fudge etc and called the item a mixin his own trademarked term at the time definition mixins are a language concept that allows a programmer to inject some code into a class mixin programming is a style of software development in which units of functionality are created in a class and then mixed in with other classes a mixin class acts as the parent class containing the desired functionality a subclass can then inherit or simply reuse this functionality but not as a means of specialization typically the mixin will export the desired functionality to a child class without creating a rigid single is a relationship here lies the important difference between the concepts of mixins and inheritance in that the child class can still inherit all the features of the parent class but the semantics about the child being a kind of the parent need not be necessarily applied implementations in simula classes are defined in a block in which attributes methods and class initialization are all defined together thus all the methods that can be invoked on a class are defined together and the definition of the class is complete in flavors a mixin is a class from which another class can inherit slot definitions and methods the mixin usually does not have direct instances since a flavor can inherit from more than one other flavor it can inherit from one or more mixins note that the original flavors did not use generic functions in new flavors a successor of flavors and clos methods are organized in generic functions these generic functions are functions that are defined in multiple cases methods by class dispatch and method combinations clos and flavors allow mixin methods to add behavior to existing methods codice and codice daemons whoppers and wrappers in flavors clos added codice methods and the ability to call shadowed methods via  so for example a streamlockmixin can add locking around existing methods of a stream class in flavors one would write a wrapper or a whopper and in clos one would use an codice method both clos and flavors allow the computed reuse via method combinations codice codice and codice methods are a feature of the standard method combination other method combinations are provided an example is the codice method combination where the results of all applicable methods of a generic function are added to compute the return value this is used for example with the bordermixin for graphical objects a graphical object may have a generic width function the bordermixin would add a border around an object and has a method computing its width a new class codice that is both a graphical object and uses the codice mixin would compute its width by calling all applicable width methodsvia the codice method combination all return values are added and create the combined width of the object in an oopsla  paper gilad bracha and william cook reinterpret different inheritance mechanisms found in smalltalk beta and clos as special forms of a mixin inheritance programming languages that use mixins other than flavors and clos a part of common lisp some languages that use mixins are some languages do not support mixins on the language level but can easily mimic them by copying methods from one object to another at runtime thereby borrowing the mixins methods this is also possible with statically typed languages but it requires constructing a new object with the extended set of methods other languages that do not support mixins can support them in a roundabout way via other language constructs c and visual basic net support the addition of extension methods on interfaces meaning any class implementing an interface with extension methods defined will have the extension methods available as pseudomembers examples in common lisp common lisp provides mixins in clos common lisp object system similar to flavors codice is a generic function with one argument that uses the codice method combination this combination determines that all applicable methods for a generic function will be called and the results will be added codice is a class with one slot for the button text there is a method for objects of class button that computes the width based on the length of the button text codice is the method qualifier for the method combination of the same name a codice class the naming is just a convention there are no superclasses and no slots there is a method computing the width of the border here it is just  codice is a class inheriting from both codice and codice we can now compute the width of a button calling codice computes  the result is the result of the single applicable method the method codice for the class codice we can also compute the width of a codice calling codice computes  the result is the sum of the results of the two applicable methods the method codice for the class codice and the method codice for the class codice in python in python the codice module has both a codice class and a codice class they act as servers for udp and tcp socket servers respectively additionally there are two mixin classes codice and codice normally all new connections are handled within the same process by extending codice with the codice as follows the codice class adds functionality to the tcp server such that each new connection creates a new thread alternatively using the codice would cause the process to be forked for each new connection clearly the functionality to create a new thread or fork a process is not terribly useful as a standalone class in this usage example the mixins provide alternative underlying functionality without affecting the functionality as a socket server in ruby most of the ruby world is based around mixins via codice the concept of mixins is implemented in ruby by the keyword codice to which we pass the name of the module as parameter example in javascript the objectliteral and codice approach it is technically possible to add behavior to an object by binding functions to keys in the object however this lack of separation between state and behavior has drawbacks  a it intermingles properties of the model domain with that of implementation domain b no sharing of common behavior metaobjects solve this problem by separating the domain specific properties of objects from their behaviour specific properties an extend function in this case from the underscorejs library which copies all of the functionality from a source object to a destination object attributes functions etc is used to mix the behavior in the pure function and delegation based flightmixin approach even though the firstly described approach is mostly widespread the next one is closer to what javascripts language core fundamentally offers  delegation two function object based patterns already do the trick without the need of a third partys implementation of codice in other languages in the curl webcontent language multiple inheritance is used as classes with no instances may implement methods common mixins include all skinnable codices inheriting from codice user interface delegate objects that require dropdown menus inheriting from standardbasedropdownui and such explicitly named mixin classes as codice codice and codice class version  added library access so that mixins do not need to be in the same package or be public abstract curl constructors are factories that facilitates using multipleinheritance without explicit declaration of either interfaces or mixins interfaces and traits java  introduces a new feature in the form of default methods for interfaces basically it allows a method to be defined in an interface with application in the scenario when a new method is to be added to an interface after the interface class programming setup is done to add a new function to the interface means to implement the method at every class which uses the interface default methods help in this case where they can be introduced to an interface any time and have an implemented structure which is then used by the associated classes hence default methods adds a possibility of applying the concept in a mixin sort of a way interfaces combined with aspectoriented programming can also produce fullfledged mixins in languages that support such features such as c or java additionally through the use of the marker interface pattern generic programming and extension methods c  has the ability to mimic mixins with c  came the introduction of extension methods and they can be applied not only to classes but also to interfaces extension methods provide additional functionality on an existing class without modifying the class it then becomes possible to create a static helper class for specific functionality that defines the extension methods because the classes implement the interface even if the actual interface doesnt contain any methods or properties to implement it will pick up all the extension methods also ecmascript in most cases implemented as javascript does not need to mimic object composition by stepwise copying fields from one object to another it natively supports trait and mixin based object composition via function objects that implement additional behavior and then are delegated via codice or codice to objects that are in need of such new functionality in scala scala has a rich type system and traits are a part of scalas type system which help implement mixin behaviour as their name reveals traits are usually used to represent a distinct feature or aspect that is normally orthogonal to the responsibility of a concrete type or at least of a certain instance for example the ability to sing is modeled as such an orthogonal feature it could be applied to birds persons etc here bird has mixed in all methods of the trait into its own definition as if class bird had defined method sing on its own as codice is also used to inherit from a super class in case of a trait codice is used if no super class is inherited and only for mixin in the first trait all following traits are mixed in using keyword codice scala allows mixing in a trait creating an anonymous type when creating a new instance of a class in the case of a person class instance not all instances can sing this feature comes use then in swift mixin can be achieved in swift by using a language feature called default implementation in protocol extension