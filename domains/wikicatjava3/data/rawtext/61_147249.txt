java data objects java data objects jdo is a specification of java object persistence one of its features is a transparency of the persistence services to the domain model jdo persistent objects are ordinary java programming language classes pojos there is no requirement for them to implement certain interfaces or extend from special classes jdo  was developed under the java community process as jsr  jdo  was developed under jsr  and was released on may   jdo  was completed in feb  developed by the apache jdo project jdo  was released in october  jdo  was released in april  object persistence is defined in the external xml metafiles which may have vendorspecific extensions jdo vendors provide developers with enhancers which modify compiled java class files so they can be transparently persisted note that bytecode enhancement is not mandated by the jdo specification although it is the commonly used mechanism for implementing the jdo specifications requirements currently jdo vendors offer several options for persistence eg to rdbms to oodb or to files jdo enhanced classes are portable across different vendors implementation once enhanced a java class can be used with any vendors jdo product jdo is integrated with java ee in several ways first of all the vendor implementation may be provided as a  secondly jdo may work in the context of jee transaction services jdo vs ejb vs jpa enterprise javabeans  ejb specification also covered persistence as had ejb v with entity beans there have been standards conflict between the two standards bodies in terms of preeminence jdo has several commercial implementations in the end persistence has been broken out of ejb core and a new standard formed the java persistence api jpa jpa uses the codice package and was first specified in a separate document within the ejb spec jsr  but was later moved to its own spec jsr  significantly codice will not require an ejb container and thus will work within a java se environment as well as jdo always has jpa however is an objectrelational mapping orm standard while jdo is both an objectrelational mapping standard and a transparent object persistence standard jdo from an api point of view is agnostic to the technology of the underlying datastore whereas jpa is targeted to rdbms datastores although there are several jpa providers that support access to nonrelational datastores through the jpa api such as datanucleus and objectdb leading jdo commercial implementations and open source projects also offer a jpa api implementation as an alternative access to their underlying persistence engines formerly exposed solely via jdo in the original products there are many open source implementations of jdo