ease programming language ease is a general purpose parallel programming language designed by steven ericssonzenith of yale university it combines the process constructs of csp with logically shared data structures called contexts contexts are parallel data types that are constructed by processes and provide a way for processes to interact the language includes two process constructors a cooperation includes an explicit barrier synchronization and is written if one process finishes before the other then it will wait until the other processes are finished a subordination creates a process that shares the contexts that are in scope when created and finishes when complete it does not wait for other processes and is written subordinate processes stop if they attempt to interact with a context that has completed because the parent process has stopped this enables speculative processes to be created that will finish if their result is not needed powerful replication syntax allows multiple processes to be created for example creates n synchronized processes each with a local constant i processes cannot share local variables and cooperate in the construction of shared contexts certain context types called resources ensure callreply semantics there are four functions upon contexts context types are singletons bags or streams and can be subscripted arrays ease has a semiotic definition this means that it takes into account the effect the language has on the programmer and how they develop algorithms the language was designed to ease the development of parallel programs