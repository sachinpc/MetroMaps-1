lisp the lisp aka starlisp programming language was conceived of in  by cliff lasser and steve omohundro employees of the thinking machines corporation as a way of providing an efficient yet highlevel language for programming the nascent connection machine history prelude at the time the connection machine was being designed and built the only language being actively developed for it was an assemblylevel language known as paris parallel instruction set it became evident that a better way to program the machine was needed and needed quickly waiting for the completion of cm lisp or connection machine lisp an implementation of the very highlevel programming language lisp with parallel programming extensions was not an option cm lisp had been proposed by danny hillis and development was expected to continue for several more years development a lisp interpreter was initially developed it quickly became apparent that a lisp compiler translating lisp into lisp and paris would be needed to attain the gigaflop speeds that were theoretically attainable by a connection machine the lisp compiler was written by jeff mincy and was first released in  an application achieving more than two gigaflops a helicopter wake simulator was developed by alan egolf then an employee of united technologies and j p massar a thinking machines employee in  see helicopter free wake implementation on advanced computer architectures international conference on basic rotorcraft research  a lisp simulator an emulator meant to run lisp code on standard nonparallel machines was developed at the same time by jp massar this simulator still exists and was ported to ansi common lisp in  an older version written in the original common lisp exists in the carnegie mellon university ai archives later versions of lisp involving significant upgrades to its functionality and performance were worked on by cliff lasser jeff mincy and j p massar through  lisp was implemented on the thinking machines cm circa  by j p massar and mario bourgoin implementation starlisp was essentially a set of macros written on top of common lisp and therefore had the full power of common lisp behind it to use a connection machine one needed a host or frontend to use lisp that frontend had to run common lisp symbolics machines using genera os and sun microsystems workstations running lucid incs lucid common lisp were both used for lisp starlisp operated on pvars parallel variables pvars represented connection machine memory and were essentially vectors one element per cm processor or virtual processor starlisp consisted of standard operations on pvars like vector addition and multiplication along with communications primitives that essentially reordered the elements of a pvar using the cms communications hardware to optimally route the data