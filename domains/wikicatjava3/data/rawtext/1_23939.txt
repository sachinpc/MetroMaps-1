perl perl is a family of highlevel generalpurpose interpreted dynamic programming languages the languages in this family include perl  and perl  though perl is not officially an acronym there are various backronyms in use the bestknown being practical extraction and reporting language perl was originally developed by larry wall in  as a generalpurpose unix scripting language to make report processing easier since then it has undergone many changes and revisions perl  which began as a redesign of perl  in  eventually evolved into a separate language both languages continue to be developed independently by different development teams and liberally borrow ideas from one another the perl languages borrow features from other programming languages including c shell script sh awk and sed they provide powerful text processing facilities without the arbitrary datalength limits of many contemporary unix commandline tools facilitating easy manipulation of text files perl  gained widespread popularity in the late s as a cgi scripting language in part due to its unsurpassed regular expression and string parsing abilities in addition to cgi perl  is used for graphics programming system administration network programming finance bioinformatics and other applications it has been nicknamed the swiss army chainsaw of scripting languages because of its flexibility and power and possibly also because of its ugliness in  it was also referred to as the duct tape that holds the internet together in reference to both its ubiquitous use as a glue language and its perceived inelegance history early versions larry wall began work on perl in  while working as a programmer at unisys and released version  to the compsourcesmisc newsgroup on december   the language expanded rapidly over the next few years perl  released in  featured a better regular expression engine perl  released in  added support for binary data streams originally the only documentation for perl was a single increasingly lengthy man page in  programming perl known to many perl programmers as the camel book because of its cover was published and became the de facto reference for the language at the same time the perl version number was bumped to  not to mark a major change in the language but to identify the version that was well documented by the book early perl  perl  went through a series of maintenance releases culminating in perl  in  at that point wall abandoned perl  to begin work on perl  initial design of perl  continued into  the perlporters mailing list was established in may  to coordinate work on porting perl  to different platforms it remains the primary forum for development maintenance and porting of perl  perl  was released on october   it was a nearly complete rewrite of the interpreter and it added many new features to the language including objects references lexical my variables and modules importantly modules provided a mechanism for extending the language without modifying the interpreter this allowed the core interpreter to stabilize even as it enabled ordinary perl programmers to add new language features perl  has been in active development since then perl  was released on march   perl  was released on february   with the new prototypes feature this allowed module authors to make subroutines that behaved like perl builtins perl  was released june   as a security release one of the most important events in perl  history took place outside of the language proper and was a consequence of its module support on october   the comprehensive perl archive network cpan was established as a repository for perl modules and perl itself as of june  it carries over  modules in  distributions written by more than  authors and is mirrored worldwide at more than  locations perl  was released on may   and included among other things the universal package giving perl a base object to which all classes were automatically derived and the ability to require versions of modules another significant development was the inclusion of the cgipm module which contributed to perls popularity as a cgi scripting language perl is also now supported running under microsoft windows and several other operating systems perl  was released on july   this release included several enhancements to the regex engine new hooks into the backend through the codice modules the codice regex quote operator a large selection of other new core modules and added support for several more operating systems including beos present perl  was released on march   major changes included bit support unicode string representation large file support ie files over  gib and the our keyword when developing perl  the decision was made to switch the versioning scheme to one more similar to other open source projects after  the next version became  with plans for development versions to have odd numbers and stable versions to have even numbers in  wall put forth a call for suggestions for a new version of perl from the community the process resulted in  rfc request for comments documents that were to be used in guiding development of perl  in  work began on the apocalypses for perl  a series of documents meant to summarize the change requests and present the design of the next generation of perl they were presented as a digest of the rfcs rather than a formal document at this point perl  existed only as a description of a language perl  was first released on july   and had nearly yearly updates since then perl  improved unicode support added a new io implementation added a new thread implementation improved numeric accuracy and added several new modules as of  this version still remains the most popular version of perl and is used by red hat  suse  solaris  hpux  and aix  in  work began on the synopses  documents that originally summarized the apocalypses but which became the specification for the perl  language in february  audrey tang began work on pugs a perl  interpreter written in haskell this was the first concerted effort towards making perl  a reality this effort stalled in  on december   the th anniversary of perl  perl  was released perl  included notable new features which brought it closer to perl  these included a switch statement called givenwhen regular expressions updates and the smart match operator  around this same time development began in earnest on another implementation of perl  known as rakudo perl developed in tandem with the parrot virtual machine as of november  rakudo perl has had regular monthly releases and now is the most complete implementation of perl  a major change in the development process of perl  occurred with perl  the development community has switched to a monthly release cycle of development releases with a yearly schedule of stable releases by that plan bugfix point releases will follow the stable releases every three months on april   perl  was released notable core enhancements include new codice syntax the yada yada operator intended to mark placeholder code that is not yet implemented implicit strictures full y compliance regex conversion overloading dtrace support and unicode  on january   perl  was released it contains updated modules and some documentation changes version  was released on june   the latest version of that branch  was released on november   on may   perl  was released json support is builtin as of  the latest version of that branch  was released on march   on may   perl  was released notable new features include the ability to specify a given version of perl that one wishes to emulate allowing users to upgrade their version of perl but still run old scripts that would normally be incompatible perl  also updates the core to support unicode  on may   perl  was released notable new features include the new dtrace hooks lexical subs more core subs overhaul of the hash for security reasons support for unicode  on may   perl  was released notable new features include subroutine signatures hash slicesnew slice syntax postfix dereferencing experimental unicode  rand using consistent random number generator some observers credit the release of perl  with the start of the modern perl movement in particular this phrase describes a style of development that embraces the use of the cpan takes advantage of recent developments in the language and is rigorous about creating high quality code while the book modern perl may be the most visible standardbearer of this idea other groups such as the enlightened perl organization have taken up the cause in late  and  several projects for alternative implementations for perl  started perl in perl by the rakudo perl team moe by stevan little and friends p by the perl team under reini urban gperl by goccy and rperl a kickstarter project led by will braswell and affiliated with the perll project ponie ponie is an acronym for perl on new internal engine the ponie project existed from  until  and was to be a bridge between perl  and perl  it was an effort to rewrite the perl  interpreter to run on parrot the perl  virtual machine the goal was to ensure the future of the millions of lines of perl  code at thousands of companies around the world the ponie project ended in  and is no longer being actively developed some of the improvements made to the perl  interpreter as part of ponie were folded into that project name perl was originally named pearl wall wanted to give the language a short name with positive connotations he claims that he considered and rejected every three and fourletter word in the dictionary he also considered naming it after his wife gloria wall discovered the existing pearl programming language before perls official release and changed the spelling of the name when referring to the language the name is normally capitalized perl as a proper noun when referring to the interpreter program itself the name is often uncapitalized perl because most unixlike file systems are casesensitive before the release of the first edition of programming perl it was common to refer to the language as perl randal l schwartz however capitalized the languages name in the book to make it stand out better when typeset this case distinction was subsequently documented as canonical the name is occasionally expanded as practical extraction and report language but this is a backronym other expansions have been suggested as equally canonical including walls own humorous pathologically eclectic rubbish lister indeed wall claims that the name was intended to inspire many different expansions camel symbol programming perl published by oreilly media features a picture of a dromedary camel on the cover and is commonly called the camel book this image of a camel has become an unofficial symbol of perl as well as a general hacker emblem appearing on tshirts and other clothing items oreilly owns the image as a trademark but licenses it for noncommercial use requiring only an acknowledgement and a link to wwwperlcom licensing for commercial use is decided on a case by case basis oreilly also provides programming republic of perl logos for noncommercial sites and powered by perl buttons for any site that uses perl onion symbol the perl foundation owns an alternative symbol an onion which it licenses to its subsidiaries perl mongers perlmonks perlorg and others the symbol is a visual pun on pearl onion overview according to wall perl has two slogans the first is theres more than one way to do it commonly known as tmtowtdi the second slogan is easy things should be easy and hard things should be possible features the overall structure of perl derives broadly from c perl is procedural in nature with variables expressions assignment statements bracedelimited blocks control structures and subroutines perl also takes features from shell programming all variables are marked with leading sigils which allow variables to be interpolated directly into strings however unlike the shell perl uses sigils on all accesses to variables and unlike most other programming languages that use sigils the sigil doesnt denote the type of the variable but the type of the expression so for example to access a list of values in a hash the sigil for an array  is used not the sigil for a hash  perl also has many builtin functions that provide tools often used in shell programming although many of these tools are implemented by programs external to the shell such as sorting and calling operating system facilities perl takes lists from lisp hashes associative arrays from awk and regular expressions from sed these simplify and facilitate many parsing texthandling and datamanagement tasks also shared with lisp are the implicit return of the last value in a block and the fact that all statements have a value and thus are also expressions and can be used in larger expressions themselves perl  added features that support complex data structures firstclass functions that is closures as values and an objectoriented programming model these include references packages classbased method dispatch and lexically scoped variables along with compiler directives for example the codice pragma a major additional feature introduced with perl  was the ability to package code as reusable modules wall later stated that the whole intent of perl s module system was to encourage the growth of perl culture rather than the perl core all versions of perl do automatic datatyping and automatic memory management the interpreter knows the type and storage requirements of every data object in the program it allocates and frees storage for them as necessary using reference counting so it cannot deallocate circular data structures without manual intervention legal type conversions  for example conversions from number to string  are done automatically at run time illegal type conversions are fatal errors design the design of perl can be understood as a response to three broad trends in the computer industry falling hardware costs rising labor costs and improvements in compiler technology many earlier computer languages such as fortran and c aimed to make efficient use of expensive computer hardware in contrast perl was designed so that computer programmers could write programs more quickly and easily perl has many features that ease the task of the programmer at the expense of greater cpu and memory requirements these include automatic memory management dynamic typing strings lists and hashes regular expressions introspection and an codice function perl follows the theory of no builtin limits an idea similar to the zero one infinity rule wall was trained as a linguist and the design of perl is very much informed by linguistic principles examples include huffman coding common constructions should be short good endweighting the important information should come first and a large collection of language primitives perl favors language constructs that are concise and natural for humans to write even where they complicate the perl interpreter perls syntax reflects the idea that things that are different should look different for example scalars arrays and hashes have different leading sigils array indices and hash keys use different kinds of braces strings and regular expressions have different standard delimiters this approach can be contrasted with a language such as lisp where the same basic syntax composed of simple and universal symbolic expressions is used for all purposes perl does not enforce any particular programming paradigm procedural objectoriented functional or others or even require the programmer to choose among them there is a broad practical bent to both the perl language and the community and culture that surround it the preface to programming perl begins perl is a language for getting your job done one consequence of this is that perl is not a tidy language it includes many features tolerates exceptions to its rules and employs heuristics to resolve syntactical ambiguities because of the forgiving nature of the compiler bugs can sometimes be hard to find perls function documentation remarks on the variant behavior of builtin functions in list and scalar contexts by saying in general they do what you want unless you want consistency no written specification or standard for the perl language exists for perl versions through perl  and there are no plans to create one for the current version of perl there has been only one implementation of the interpreter and the language has evolved along with it that interpreter together with its functional tests stands as a de facto specification of the language perl  however started with a specification and several projects aim to implement some or all of the specification applications perl has many and varied applications compounded by the availability of many standard and thirdparty modules perl has chiefly been used to write cgi scripts large projects written in perl include cpanel slash bugzilla rt twiki and movable type hightraffic websites that use perl extensively include pricelinecom craigslist imdb livejournal duckduckgo slashdot and ticketmaster it is also an optional component of the popular lamp technology stack for web development in lieu of php or python perl is often used as a glue language tying together systems and interfaces that were not specifically designed to interoperate and for data munging that is converting or processing large amounts of data for tasks such as creating reports in fact these strengths are intimately linked the combination makes perl a popular allpurpose language for system administrators particularly because short programs often called oneliner programs can be entered and run on a single command line perl code can be made portable across windows and unix such code is often used by suppliers of software both cots and bespoke to simplify packaging and maintenance of software build and deploymentscripts graphical user interfaces guis may be developed using perl for example perltk and wxperl are commonly used to enable user interaction with perl scripts such interaction may be synchronous or asynchronous using callbacks to update the gui implementation perl is implemented as a core interpreter written in c together with a large collection of modules written in perl and c  the interpreter is  lines of c code and compiles to a mb executable on typical machine architectures alternatively the interpreter can be compiled to a link library and embedded in other programs there are nearly  modules in the distribution comprising  lines of perl and an additional  lines of c code much of the c code in the modules consists of character encoding tables the interpreter has an objectoriented architecture all of the elements of the perl languagescalars arrays hashes coderefs file handlesare represented in the interpreter by c structs operations on these structs are defined by a large collection of macros typedefs and functions these constitute the perl c api the perl api can be bewildering to the uninitiated but its entry points follow a consistent naming scheme which provides guidance to those who use it the life of a perl interpreter divides broadly into a compile phase and a run phase in perl the phases are the major stages in the interpreters lifecycle each interpreter goes through each phase only once and the phases follow in a fixed sequence most of what happens in perls compile phase is compilation and most of what happens in perls run phase is execution but there are significant exceptions perl makes important use of its capability to execute perl code during the compile phase perl will also delay compilation into the run phase the terms that indicate the kind of processing that is actually occurring at any moment are compile time and run time perl is in compile time at most points during the compile phase but compile time may also be entered during the run phase the compile time for code in a string argument passed to the codice builtin occurs during the run phase perl is often in run time during the compile phase and spends most of the run phase in run time code in codice blocks executes at run time but in the compile phase at compile time the interpreter parses perl code into a syntax tree at run time it executes the program by walking the tree text is parsed only once and the syntax tree is subject to optimization before it is executed so that execution is relatively efficient compiletime optimizations on the syntax tree include constant folding and context propagation but peephole optimization is also performed perl has a turingcomplete grammar because parsing can be affected by runtime code executed during the compile phase therefore perl cannot be parsed by a straight lexyacc lexerparser combination instead the interpreter implements its own lexer which coordinates with a modified gnu bison parser to resolve ambiguities in the language it is often said that only perl can parse perl meaning that only the perl interpreter codice can parse the perl language perl but even this is not in general true because the perl interpreter can simulate a turing machine during its compile phase it would need to decide the halting problem in order to complete parsing in every case it is a longstanding result that the halting problem is undecidable and therefore not even perl can always parse perl perl makes the unusual choice of giving the user access to its full programming power in its own compile phase the cost in terms of theoretical purity is high but practical inconvenience seems to be rare other programs that undertake to parse perl such as sourcecode analyzers and autoindenters have to contend not only with ambiguous syntactic constructs but also with the undecidability of perl parsing in the general case adam kennedys ppi project focused on parsing perl code as a document retaining its integrity as a document instead of parsing perl as executable code that not even perl itself can always do it was kennedy who first conjectured that parsing perl suffers from the halting problem which was later proved perl is distributed with over  functional tests for core perl language and over  functional tests for core modules these run as part of the normal build process and extensively exercise the interpreter and its core modules perl developers rely on the functional tests to ensure that changes to the interpreter do not introduce software bugs additionally perl users who see that the interpreter passes its functional tests on their system can have a high degree of confidence that it is working properly availability perl is dual licensed under both the artistic license  and the gnu general public license distributions are available for most operating systems it is particularly prevalent on unix and unixlike systems but it has been ported to most modern and many obsolete platforms with only six reported exceptions perl can be compiled from source code on all posixcompliant or otherwiseunixcompatible platforms because of unusual changes required for the classic mac os environment a special port called macperl was shipped independently the comprehensive perl archive network carries a complete list of supported platforms with links to the distributions available on each cpan is also the source for publicly available perl modules that are not part of the core perl distribution windows users of microsoft windows typically install one of the native binary distributions of perl for win most commonly strawberry perl or activeperl compiling perl from source code under windows is possible but most installations lack the requisite c compiler and build tools this also makes it difficult to install modules from the cpan particularly those that are partially written in c activeperl is a closed source distribution from activestate that has regular releases that track the core perl releases the distribution also includes the perl package manager ppm a popular tool for installing removing upgrading and managing the use of common perl modules included also is perlscript a windows script host wsh engine implementing the perl language visual perl is an activestate tool that adds perl to the visual studio net development suite strawberry perl is an open source distribution for windows it has had regular quarterly releases since january  including new modules as feedback and requests come in strawberry perl aims to be able to install modules like standard perl distributions on other platforms including compiling xs modules the cygwin emulation layer is another way of running perl under windows cygwin provides a unixlike environment on windows and both perl and cpan are available as standard precompiled packages in the cygwin setup program since cygwin also includes gcc compiling perl from source is also possible a perl executable is included in several windows resource kits in the directory with other scripting tools implementations of perl come with the mks toolkit and uwin database interfaces perls texthandling capabilities can be used for generating sql queries arrays hashes and automatic memory management make it easy to collect and process the returned data for example in tim bunces perl dbi application programming interface api the arguments to the api can be the text of sql queries thus it is possible to program in multiple languages at the same time eg for generating a web page using html javascript and sql in a here document the use of perl variable interpolation to programmatically customize each of the sql queries and the specification of perl arrays or hashes as the structures to programmatically hold the resulting data sets from each sql query allows a highlevel mechanism for handling large amounts of data for postprocessing by a perl subprogram in early versions of perl database interfaces were created by relinking the interpreter with a clientside database library this was sufficiently difficult that it was done for only a few of the mostimportant and most widely used databases and it restricted the resulting codice executable to using just one database interface at a time in perl  database interfaces are implemented by perl dbi modules the dbi database interface module presents a single databaseindependent interface to perl applications while the dbd database driver modules handle the details of accessing some  different databases there are dbd drivers for most ansi sql databases dbi provides caching for database handles and queries which can greatly improve performance in longlived execution environments such as mod perl helping highvolume systems avert load spikes as in the slashdot effect in modern perl applications especially those written using web frameworks such as catalyst the dbi module is often used indirectly via objectrelational mappers such as  or that generate sql queries and handle data transparently to the application author comparative performance the computer language benchmarks game a project hosted by alioth compares the performance of implementations of typical programming problems in several programming languages the submitted perl implementations typically perform toward the high end of the memoryusage spectrum and give varied speed results perls performance in the benchmarks game is typical for interpreted languages large perl programs start more slowly than similar programs in compiled languages because perl has to compile the source every time it runs in a talk at the yapceurope  conference and subsequent article a timely start jeanlouis leroy found that his perl programs took much longer to run than expected because the perl interpreter spent significant time finding modules within his overlarge include path unlike java python and ruby perl has only experimental support for precompiling therefore perl programs pay this overhead penalty on every execution the run phase of typical programs is long enough that amortized startup time is not substantial but benchmarks that measure very short execution times are likely to be skewed due to this overhead a number of tools have been introduced to improve this situation the first such tool was apaches mod perl which sought to address one of the mostcommon reasons that small perl programs were invoked rapidly cgi web development activeperl via microsoft isapi provides similar performance improvements once perl code is compiled there is additional overhead during the execution phase that typically isnt present for programs written in compiled languages such as c or c examples of such overhead include bytecode interpretation referencecounting memory management and dynamic typechecking optimizing because perl is an interpreted language it can give problems when efficiency is critical in such situations the most critical routines can be written in other languages such as c which can be connected to perl via simple inline modules or the more complex but flexible xs mechanism perl  at the  perl conference jon orwant made a case for a major new languageinitiative this led to a decision to begin work on a redesign of the language to be called perl  proposals for new language features were solicited from the perl community at large which submitted more than  rfcs wall spent the next few years digesting the rfcs and synthesizing them into a coherent framework for perl  he has presented his design for perl  in a series of documents called apocalypses  numbered to correspond to chapters in programming perl  the developing specification of perl  is encapsulated in design documents called synopses  numbered to correspond to apocalypses perl  is not intended to be backward compatible although there will be a compatibility mode perl  and perl  are distinct languages with a common ancestry thesis work by bradley m kuhn overseen by wall considered the possible use of the java virtual machine as a runtime for perl kuhns thesis showed this approach to be problematic in  it was decided that perl  would run on a crosslanguage virtual machine called parrot this will mean that other languages targeting the parrot will gain native access to cpan allowing some level of crosslanguage development in  audrey tang created the pugs project an implementation of perl  in haskell this acted as and continues to act as a test platform for the perl  language separate from the development of the actual implementation  allowing the language designers to explore the pugs project spawned an active perlhaskell crosslanguage community centered around the freenode perl irc channel  a number of features in the perl  language show similarities to haskell  perl  development centers primarily around two compilers future of perl  development of perl  is also continuing perl  was released in april  with some new features influenced by the design of perl  followed by perl  released on june   perl  released on august   and perl  released on may   perl  development versions are released on a monthly basis with major releases coming out once per year future plans for perl  include making the core language easier to extend from modules and providing a small extensible metaobject protocol in core the relative proportion of internet searches for perl programming as compared with similar searches for other programming languages steadily declined from about  in  to about  in  and has remained around the  level since perl community perls culture and community has developed alongside the language itself usenet was the first public venue in which perl was introduced but over the course of its evolution perls community was shaped by the growth of broadening internetbased services including the introduction of the world wide web the community that surrounds perl was in fact the topic of walls first state of the onion talk state of the onion state of the onion is the name for walls yearly keynotestyle summaries on the progress of perl and its community they are characterized by his hallmark humor employing references to perls culture the wider hacker culture walls linguistic background sometimes his family life and occasionally even his christian background each talk is first given at various perl conferences and is eventually also published online perl on irc there are a number of irc channels that offer support for the language and some modules cpan acme there are also many examples of code written purely for entertainment on the cpan codice for example allows writing programs in latin upon execution of such a program the module translates its source code into regular perl and runs it the perl community has set aside the acme namespace for modules that are fun in nature but its scope has widened to include exploratory or experimental code or any other module that is not meant to ever be used in production some of the acme modules are deliberately implemented in amusing ways this includes codice one of the first modules in the codice namespace which allows the programs source code to be whitened ie all characters replaced with whitespace and yet still work example code in older versions of perl one would write the hello world program as in later versions which support the say statement one can also write it as good perl practices require more complex programs to add the use strict and use warnings pragmas leading into something like here is a more complex perl program that counts down the seconds up to a given threshold the perl interpreter can also be used for oneoff scripts on the command line the following example as invoked from an shcompatible shell such as bash translates the string bob in all files ending with txt in the current directory to robert criticism perl has been referred to as line noise by some programmers who claim its syntax makes it a writeonly language the earliest such mention was in the first edition of the book learning perl a perl  tutorial book written by randal l schwartz in the first chapter of which he states yes sometimes perl looks like line noise to the uninitiated but to the seasoned perl programmer it looks like checksummed line noise with a mission in life he also stated that the accusation that perl is a writeonly language could be avoided by coding with proper care the perl overview document perlintro states that the names of builtin magic scalar variables look like punctuation or line noise the perlstyle document states that line noise in regular expressions could be mitigated using the codice modifier to add whitespace according to the perl  faq perl  was designed to mitigate the usual suspects that elicit the line noise claim from perl  critics including the removal of the majority of the punctuation variables and the sanitization of the regex syntax the perl  faq also states that what is sometimes referred to as perls line noise is the actual syntax of the language just as gerunds and prepositions are a part of the english language in a december  blog posting despite claiming that rakudo perl  has failed and will continue to fail unless it gets some adult supervision chromatic stated that the design of perl  has a welldefined grammar as well as an improved type system a unified object system with an intelligent metamodel metaoperators and a clearer system of context that provides for such niceties as pervasive laziness he also stated that perl  has a coherence and a consistency that perl  lacks