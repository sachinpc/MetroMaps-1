java awt native interface java awt native interface is an interface for the java programming language that enables rendering libraries compiled to native code to draw directly to a java abstract window toolkit awt object drawing surface the java native interface jni enabled developers to add platformdependent functionality to java applications the jni enables developers to add timecritical operations like mathematical calculations and d rendering previously native d rendering was a problem because the native code didnt have access to the graphic context the awt native interface is designed to give developers access to an awt codice for direct drawing by native code in fact the java d api extension to the standard java se jdk relies heavily on the awt native interface to render d objects in java the awt native interface is very similar to the jni and the steps are in fact the same as those of the jni see the java native interface article for an explanation of the jni techniques employed by the awt native interface the awt native interface was added to the java platform with the jse  kestrel version awt native interface steps a complete walkthrough example of this technology is available on wikibooks see link below create a java application see the java native interface article for an explanation of the codice keyword and the codice method a codice method will be simply invoked when the awt event dispatching thread repaints the screen create a c header file create the c header file as usual see java native interface for more complete explanations implement the c native code type this in a file named nativesidecanvascpp and compile into a library see java native interface jni for a more complete explanation for solaris code and other operating systems see links below run the program one should run the file as usual one should then see a window with for example a rectangle drawn in it see java native interface for complete instructions note one can notice that the awt native interface requires the jawtdll or jawtso to run with the application so the easiest way to do that is copying the jawtdll should be in the jrebin file path of the jdks installation path native painting one can paint as if it is a native application in windows the jvm will pass a hwnd and other window information to the native application so that the application will know where to draw it could use gdi to draw a rectangle the window information the native side needs will be in a codice structure depending on operating system which can be retrieved with this line dsiwin  jawtwindrawingsurfaceinfodsiplatforminfo