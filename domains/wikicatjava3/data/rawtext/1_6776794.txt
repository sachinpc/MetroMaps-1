chapel programming language chapel the cascade high productivity language is a parallel programming language developed by cray it is being developed as part of the cray cascade project a participant in darpas high productivity computing systems hpcs program which had the goal of increasing supercomputer productivity by the year  it is being developed as an open source project under version  of the apache license goals chapel aims to improve the programmability of parallel computers in general and the cascade system in particular by providing a higher level of expression than current programming languages do and by improving the separation between algorithmic expression and data structure implementation details the language designers aspire for chapel to bridge the gap between current hpc programming practitioners who they describe as fortran c or c users writing procedural code using technologies like openmp and mpi on one side and newly graduating computer programmers who tend to prefer java python or matlab with only some of them having experience with c or c chapel should offer the productivity advances offered by the latter suite of languages while not alienating the users of the first features chapel supports a multithreaded parallel programming model at a high level by supporting abstractions for data parallelism task parallelism and nested parallelism it enables optimizations for the locality of data and computation in the program via abstractions for data distribution and datadriven placement of subcomputations it allows for code reuse and generality through objectoriented concepts and generic programming features for instance chapel allows for the declaration of locales while chapel borrows concepts from many preceding languages its parallel concepts are most closely based on ideas from high performance fortran hpf zpl and the cray mtas extensions to fortran and c