c sharp programming language c pronounced as see sharp is a multiparadigm programming language encompassing strong typing imperative declarative functional generic objectoriented classbased and componentoriented programming disciplines it was developed by microsoft within its net initiative and later approved as a standard by ecma ecma and iso isoiec  c is one of the programming languages designed for the common language infrastructure c is a generalpurpose objectoriented programming language its development team is led by anders hejlsberg the most recent version is c  which was released in  design goals the ecma standard lists these design goals for c history during the development of the net framework the class libraries were originally written using a managed code compiler system called simple managed c smc in january  anders hejlsberg formed a team to build a new language at the time called cool which stood for clike object oriented language microsoft had considered keeping the name cool as the final name of the language but chose not to do so for trademark reasons by the time the net project was publicly announced at the july  professional developers conference the language had been renamed c and the class libraries and aspnet runtime had been ported to c cs principal designer and lead architect at microsoft is anders hejlsberg who was previously involved with the design of turbo pascal embarcadero delphi formerly codegear delphi inprise delphi and borland delphi and visual j in interviews and technical papers he has stated that flaws in most major programming languages eg c java delphi and smalltalk drove the fundamentals of the common language runtime clr which in turn drove the design of the c language itself james gosling who created the java programming language in  and bill joy a cofounder of sun microsystems the originator of java called c an imitation of java gosling further said that c is sort of java with reliability productivity and security deleted klaus kreft and angelika langer authors of a c streams book stated in a blog post that java and c are almost identical programming languages boring repetition that lacks innovation hardly anybody will claim that java or c are revolutionary programming languages that changed the way we write programs and c borrowed a lot from java  and vice versa now that c supports boxing and unboxing well have a very similar feature in java in july  anders hejlsberg said that c is not a java clone and is much closer to c in its design since the release of c  in november  the c and java languages have evolved on increasingly divergent trajectories becoming somewhat less similar one of the first major departures came with the addition of generics to both languages with vastly different implementations c makes use of reification to provide firstclass generic objects that can be used like any other class with code generation performed at classload time furthermore c has added several major features to accommodate functionalstyle programming culminating in the linq extensions released with c  and its supporting framework of lambda expressions extension methods and anonymous types these features enable c programmers to use functional programming techniques such as closures when it is advantageous to their application the linq extensions and the functional imports help developers reduce the amount of boilerplate code that is included in common tasks like querying a database parsing an xml file or searching through a data structure shifting the emphasis onto the actual program logic to help improve readability and maintainability c used to have a mascot called andy named after anders hejlsberg it was retired on january   c was originally submitted to the iso subcommittee jtc sc  for review under isoiec  was withdrawn and was then approved under isoiec  name the name c sharp was inspired by musical notation where a sharp indicates that the written note should be made a semitone higher in pitch this is similar to the language name of c where  indicates that a variable should be incremented by  the sharp symbol also resembles a ligature of four  symbols in a twobytwo grid further implying that the language is an increment of c due to technical limitations of display standard fonts browsers etc and the fact that the sharp symbol  is not present on most keyboard layouts the number sign  was chosen to approximate the sharp symbol in the written name of the programming language this convention is reflected in the ecma c language specification however when it is practical to do so for example in advertising or in box art microsoft uses the intended musical symbol the sharp suffix has been used by a number of other net languages that are variants of existing languages including j a net language also designed by microsoft that is derived from java  a from ada and the functional programming language f the original implementation of eiffel for net was called eiffel a name retired since the full eiffel language is now supported the suffix has also been used for libraries such as gtk a net wrapper for gtk and other gnome libraries and cocoa a wrapper for cocoa syntax the core syntax of c language is similar to that of other cstyle languages such as c c and java in particular distinguishing features some notable features of c that distinguish it from c c and java where noted are portability by design c is the programming language that most directly reflects the underlying common language infrastructurecli most of its intrinsic types correspond to valuetypes implemented by the cli framework however the language specification does not state the code generation requirements of the compiler that is it does not state that a c compiler must target a common language runtime or generate common intermediate language cil or generate any other specific format theoretically a c compiler could generate machine code like traditional compilers of c or fortran typing c supports strongly typed implicit variable declarations with the keyword codice and implicitly typed arrays with the keyword codice followed by a collection initializer c supports a strict boolean data type codice statements that take conditions such as codice and codice require an expression of a type that implements the codice operator such as the boolean type while c also has a boolean type it can be freely converted to and from integers and expressions such as codice require only that codice is convertible to bool allowing codice to be an int or a pointer c disallows this integer meaning true or false approach on the grounds that forcing programmers to use expressions that return exactly codice can prevent certain types of programming mistakes such as codice use of assignment codice instead of equality codice which while not an error in c or c will be caught by the compiler anyway c is more type safe than c the only implicit conversions by default are those that are considered safe such as widening of integers this is enforced at compiletime during jit and in some cases at runtime no implicit conversions occur between booleans and integers nor between enumeration members and integers except for literal  which can be implicitly converted to any enumerated type any userdefined conversion must be explicitly marked as explicit or implicit unlike c copy constructors and conversion operators which are both implicit by default c has explicit support for covariance and contravariance in generic types unlike c which has some degree of support for contravariance simply through the semantics of return types on virtual methods enumeration members are placed in their own scope the c language does not allow for global variables or functions all methods and members must be declared within classes static members of public classes can substitute for global variables and functions local variables cannot shadow variables of the enclosing block unlike c and c meta programming meta programming via c attributes is part of the language many of these attributes duplicate the functionality of gccs and visualcs platformdependent preprocessor directives methods and functions like c and unlike java c programmers must use the keyword codice to allow methods to be overridden by subclasses extension methods in c allow programmers to use static methods as if they were methods from a classs method table allowing programmers to add methods to an object that they feel should exist on that object and its derivatives the type codice allows for runtime method binding allowing for javascriptlike method calls and runtime object composition c has support for stronglytyped function pointers via the keyword codice like the qt frameworks pseudoc signal and slot c has semantics specifically surrounding publishsubscribe style events though c uses delegates to do so c offers javalike codice method calls via the attribute codice and has support for mutuallyexclusive locks via the keyword codice property c provides properties as syntactic sugar for a common pattern in which a pair of methods accessor getter and mutator setter encapsulate operations on a single attribute of a class no redundant method signatures for the gettersetter implementations need be written and the property may be accessed using attribute syntax rather than more verbose method calls namespace a c codice provides the same level of code isolation as a java codice or a c  with very similar rules and features to a codice memory access in c memory address pointers can only be used within blocks specifically marked as unsafe and programs with unsafe code need appropriate permissions to run most object access is done through safe object references which always either point to a live object or have the welldefined null value it is impossible to obtain a reference to a dead object one that has been garbage collected or to a random block of memory an unsafe pointer can point to an instance of a valuetype array string or a block of memory allocated on a stack code that is not marked as unsafe can still store and manipulate pointers through the codice type but it cannot dereference them managed memory cannot be explicitly freed instead it is automatically garbage collected garbage collection addresses the problem of memory leaks by freeing the programmer of responsibility for releasing memory that is no longer needed exception checked exceptions are not present in c in contrast to java this has been a conscious decision based on the issues of scalability and versionability polymorphism unlike c c does not support multiple inheritance although a class can implement any number of interfaces this was a design decision by the languages lead architect to avoid complication and simplify architectural requirements throughout cli when implementing multiple interfaces that contain a method with the same signature c allows implementing each method depending on which interface that method is being called through or like java allows implementing the method once and have that be the one invocation on a call through any of the classs interfaces however unlike java c supports operator overloading only the most commonly overloaded operators in c may be overloaded in c functional programming though primarily an imperative language c  offered limited support for functional programming through firstclass functions and closures in the form of anonymous delegates c  expanded support for functional programming with the introduction of a lightweight syntax for lambda expressions extension methods an affordance for modules and a list comprehension syntax in the form of a query comprehension language common type system c has a unified type system this unified type system is called common type system cts a unified type system implies that all types including primitives such as integers are subclasses of the class for example every type inherits a method categories of data types cts separates data types into two categories instances of value types do not have referential identity nor referential comparison semantics  equality and inequality comparisons for value types compare the actual data values within the instances unless the corresponding operators are overloaded value types are derived from  always have a default value and can always be created and copied some other limitations on value types are that they cannot derive from each other but can implement interfaces and cannot have an explicit default parameterless constructor examples of value types are all primitive types such as a signed bit integer a bit ieee floatingpoint number a bit unicode code unit and identifies a specific point in time with nanosecond precision other examples are enumerations and user defined structures in contrast reference types have the notion of referential identity  each instance of a reference type is inherently distinct from every other instance even if the data within both instances is the same this is reflected in default equality and inequality comparisons for reference types which test for referential rather than structural equality unless the corresponding operators are overloaded such as the case for  in general it is not always possible to create an instance of a reference type nor to copy an existing instance or perform a value comparison on two existing instances though specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface such as or  examples of reference types are the ultimate base class for all other c classes a string of unicode characters and a base class for all c arrays both type categories are extensible with userdefined types boxing and unboxing boxing is the operation of converting a valuetype object into a value of a corresponding reference type boxing in c is implicit unboxing is the operation of converting a value of a reference type previously boxed into a value of a value type unboxing in c requires an explicit type cast a boxed object of type t can only be unboxed to a t or a nullable t example int foo    value type object bar  foo  foo is boxed to bar int foo  intbar  unboxed back to value type libraries the c specification details a minimum set of types and class libraries that the compiler expects to have available in practice c is most often used with some implementation of the common language infrastructure cli which is standardized as ecma common language infrastructure cli examples the following is a very simple c program a version of the classic hello world example using system class program the effect is to write the following text to the output console each line has a purpose using system the above line of code tells the compiler to use codice as a candidate prefix for types used in the source code in this case when the compiler sees use of the codice type later in the source code it tries to find a type named codice first in the current assembly followed by all referenced assemblies in this case the compiler fails to find such a type since the name of the type is actually codice the compiler then attempts to find a type named codice by using the codice prefix from the statement and this time it succeeds the statement allows the programmer to state all candidate prefixes to use during compilation instead of always using full type names class program above is a class definition everything between the following pair of braces describes  static void mainstring args this declares the class member method where the program begins execution the net runtime calls the method note may also be called from elsewhere like any other method eg from another method of  the keyword makes the method accessible without an instance of  each console applications entry point must be declared  otherwise the program would require an instance but any instance would require a program to avoid that irresolvable circular dependency c compilers processing console applications like that above report an error if there is no method the keyword declares that has no return value consolewritelinehello world this line writes the output is a static class in the namespace it provides an interface to the standard input output and error streams for console applications the program calls the method  which displays on the console a line with the argument the string  a gui example using systemwindowsforms class program this example is similar to the previous example except that it generates a dialog box that contains the message hello world instead of writing it to the console standardization and licensing in august  microsoft corporation hewlettpackard and intel corporation cosponsored the submission of specifications for c as well as the common language infrastructure cli to the standards organization ecma international in december  ecma released ecma c language specification c became an iso standard in  isoiec   information technology  programming languages  c ecma had previously adopted equivalent specifications as the nd edition of c in december  in june  ecma approved edition  of the c specification and updated ecma additions included partial classes anonymous methods nullable types and generics somewhat similar to c templates in july  ecma submitted to isoiec jtc  via the latters fasttrack process the standards and related trs this process usually takes  months the c language definition and the cli are standardized under iso and ecma standards that provide reasonable and nondiscriminatory licensing protection from patent claims microsoft has agreed not to sue open source developers for violating patents in nonprofit projects for the part of the framework that is covered by the osp microsoft has also agreed not to enforce patents relating to novell products against novells paying customers with the exception of a list of products that do not explicitly mention c net or novells implementation of net the mono project however novell maintains that mono does not infringe any microsoft patents microsoft has also made a specific agreement not to enforce patent rights related to the moonlight browser plugin which depends on mono provided it is obtained through novell implementations the reference c compiler is microsoft visual c which is opensource microsoft is leading the development of a new opensource c compiler and set of tools previously codenamed roslyn the compiler which is entirely written in managed code c has been opened up and functionality surfaced as apis it is thus enabling developers to create refactoring and diagnostics tools other c compilers exist often including an implementation of the common language infrastructure and the net class libraries up to net 