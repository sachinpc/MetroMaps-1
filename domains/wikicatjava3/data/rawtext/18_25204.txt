qt software qt  cute is a crossplatform application framework that is widely used for developing application software that can be run on various software and hardware platforms with little or no change in the underlying codebase while still being a native application with native capabilities and speed qt is currently being developed both by the qt company a company listed on the nasdaq helsinki stock exchange and the qt project under opensource governance involving individual developers and firms working to advance qt qt is available with both commercial and open source gpl  gpl  and lgpl  licenses purposes and abilities qt is used mainly for developing application software with graphical user interfaces guis however programs without a gui can be developed such as commandline tools and consoles for servers an example of a nongui program using qt is the cutelyst web framework gui programs created with qt can have a nativelooking interface in which case qt is classified as a widget toolkit qt uses standard c with extensions including signals and slots that simplify handling of events and this helps in development of both gui and server applications which receive their own set of event information and should process them accordingly qt supports many compilers including the gcc c compiler and the visual studio suite qt also provides qt quick that includes a declarative scripting language called qml that allows using javascript to provide the logic with qt quick rapid application development for mobile devices became possible although logic can be written with native code as well to achieve the best possible performance qt can be used in several other programming languages via language bindings it runs on the major desktop platforms and some of the mobile platforms it has extensive internationalization support nongui features include sql database access xml parsing json parsing thread management and network support history early developments in the summer of  haavard nord and eirik chambeeng the original developers of qt and the ceo and president respectively of trolltech were working together on a database application for ultrasound images written in c and running on mac os unix and windows they began development of qt in  three years before the company was incorporated as quasar technologies then changed the name to troll tech and then to trolltech the toolkit was called qt because the letter q looked appealing in haavards emacs typeface and t was inspired by xt the x toolkit the first two versions of qt had only two flavors qtx for unix and qtwindows for windows on  may  troll tech publicly released qt  for xlinux with the source code under the qt free edition license this license was viewed as not compliant with the open source principle by the open source initiative and the free software definition by free software foundation because while the source was available it did not allow the redistribution of modified versions trolltech used this license until version  controversy erupted around  when it became clear that the k desktop environment was going to become one of the leading desktop environments for linux as it was based on qt many people in the free software movement worried that an essential piece of one of their major operating systems would be proprietary the windows platform was only available under a proprietary license which meant freeopen source applications written in qt for x could not be ported to windows without purchasing the proprietary edition becoming free softwarefriendly with the release of version  of the toolkit the license was changed to the q public license qpl a free software license but one regarded by the free software foundation as incompatible with the gpl compromises were sought between kde and trolltech whereby qt would not be able to fall under a more restrictive license than the qpl even if trolltech was bought out or went bankrupt this led to the creation of the kde free qt foundation which guarantees that qt would fall under a bsdstyle license should no freeopen source version of qt be released during  months in  qtx  was released under the gpl v ending all controversy regarding gpl compatibility at the end of  trolltech released qt  which added support for mac os x the mac os x support was available only in the proprietary license until june  when trolltech released qt  with mac os x support available under the gpl in  members of the kde on cygwin project began porting the gpl licensed qtx code base to windows this was in response to trolltechs refusal to license qtwindows under the gpl on the grounds that windows was not a freeopen source software platform the project achieved reasonable success although it never reached production quality this was resolved when trolltech released qt  also for windows under the gpl in june  qt supported the same set of platforms in the free softwareopen source editions as in the proprietary edition so it is possible with qt  and later releases to create gpllicensed freeopen source applications using qt on all supported platforms the gpl v with special exception was later added as an added licensing option the gpl exception allows the final application to be licensed under various gplincompatible free softwareopen source licenses such as the mozilla public license  acquisition by nokia nokia acquired trolltech asa on  june  and changed the name first to qt software then to qt development frameworks since then it focused on qt development to turn it into the main development platform for its devices including a port to the symbian s platform version  of the nokia qt sdk was released on  june  the source code was made available over gitorious a community oriented git source code repository to gather an even broader community that is not only using qt but also helping to improve it on  january  qt version  added another option the lgpl which should make qt even more attractive for nongpl open source projects and for closed applications in february  nokia announced its decision to drop symbian technologies and base their future smartphones on the windows phone platform instead one month later nokia announced the sale of qts commercial licensing and professional services to digia with the immediate goal of taking qt support to android ios and windows  platforms and to continue focusing on desktop and embedded development although nokia was to remain the main development force behind the framework at that time merging and demerging with digia in march  nokia sold the commercial licensing part of qt to digia creating qt commercial in august  digia announced that it would acquire qt from nokia the qt team started working in digia in september  the qt team at digia released qt  within a month and newer versions every  months with new features and additional supported platforms in september  digia transferred the qt business and copyrights to their wholly owned subsidiary the qt company which owns  brands related to qt in may  digia and qt have demerged completely into two independent companies open governance qt  was officially released on  december  this new version marked a major change in the platform with hardwareaccelerated graphics qml and javascript playing a major role the traditional conly qwidgets continued to be supported but did not benefit from the performance improvements available through the new architecture qt  brings significant improvements to the speed and ease of developing user interfaces framework development of qt  moved to open governance taking place at qtprojectorg it is now possible for developers outside digia to submit patches and have them reviewed licensing qt has always been available under a commercial license that allows developing proprietary applications with no restrictions on licensing in addition qt is also licensed under a combination of gpl  gpl  lgpl  and lgpl  depending on the qt module and version starting from qt  the lgpl  license was dropped from most qt modules therefore prohibiting to distribute closed embedded devices except by acquiring a commercial license see also tivoization software architecture qt when it was first released relied on a few key concepts supported platforms qt works on many different platforms the following are officially supported after nokia opened the qt source code to the community on gitorious various ports appeared there are also some ports of qt that may be available but are not supported anymore these platforms are listed in list of platforms supported by qt use cases also see organizations using qt qt is used by many organizations including but not limited to european space agency dreamworks lucasfilm panasonic philips samsung siemens volvo walt disney animation studios blizzard entertainment electronic arts amd gui and desktop environments several guis and desktop environments utilize qt as widget toolkit applications using qt example applications using qt are editions there are four editions of qt available community indie mobile professional and enterprise the community version is under the open source licenses while the indie mobile professional and enterprise versions which contain additional functionality and libraries eg charts and data visualization enterprise controls virtual keyboard etc are commercially sold by the qt company qt is available under the following copyright licenses qt commercial license gnu general public license  gnu lesser general public license  and gnu lesser general public license  with qt special exception software modules starting with qt  the framework was split into individual modules with qt  the architecture was modularized even further qt is now split into essential and addon modules tools qt comes with its own set of tools to ease crossplatform development which can otherwise be cumbersome due to different set of development tools qt creator is a crossplatform ide for c and qml qt designers gui layoutdesign functionality is integrated into the ide although qt designer can still be started as a standalone tool in addition to qt creator qt provides qmake a crossplatform build script generation tool that automates the generation of makefiles for development projects across different platforms without such a tool one would have to write different makefiles for each platform so it is useful for abstracting away the differences of various platforms there are other tools available in qt including the qt designer interface builder and the qt assistant help browser which are both embedded in qt creator the qt linguist translation tool uic user interface compiler and moc metaobject compiler programming language bindings qt has a range of bindings for various languages which implement some or all of its feature set references bibliography qt wiki provides a comprehensive list of english books about qt this is a list of notable books