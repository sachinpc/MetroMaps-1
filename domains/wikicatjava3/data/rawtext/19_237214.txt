aspectj aspectj is an aspectoriented programming aop extension created at parc for the java programming language it is available in eclipse foundation opensource projects both standalone and integrated into eclipse aspectj has become a widely used de facto standard for aop by emphasizing simplicity and usability for end users it uses javalike syntax and included ide integrations for displaying crosscutting structure since its initial public release in  simple language description all valid java programs are also valid aspectj programs but aspectj lets programmers define special constructs called aspects aspects can contain several entities unavailable to standard classes these are aspectj also supports limited forms of pointcutbased static checking and aspect reuse by inheritance see the aspectj programming guide for a more detailed description of the language aspectj compatibility and implementations aspectj can be implemented in many ways including sourceweaving or bytecodeweaving and directly in the virtual machine vm in all cases the aspectj program becomes a valid java program that runs in a java vm classes affected by aspects are binarycompatible with unaffected classes to remain compatible with classes compiled with the unaffected originals supporting multiple implementations allows the language to grow as technology changes and being javacompatible ensures platform availability key to its success has been engineering and language decisions that make the language usable and programs deployable the original xerox aspectj implementation used source weaving which required access to source code when xerox contributed the code to eclipse aspectj was reimplemented using the eclipse java compiler and a bytecode weaver based on bcel so developers could write aspects for code in binary class form at this time the aspectj language was restricted to support a perclass model essential for incremental compilation and loadtime weaving this made ide integrations as responsive as their java counterparts and it let developers deploy aspects without altering the build process this led to increased adoption as aspectj became usable for impatient java programmers and enterpriselevel deployments since then the eclipse team has increased performance and correctness upgraded the aspectj language to support java  language features like generics and annotations and integrated annotationstyle purejava aspects from aspectwerkz the eclipse project supports both commandline and ant interfaces a related eclipse project has steadily improved the eclipse ide support for aspectj called aspectj development tools ajdt and other providers of crosscutting structure ide support for emacs netbeans and jbuilder foundered when xerox put them into open source but support for oracles jdeveloper did appear ide support has been key to java programmers using aspectj and understanding crosscutting concerns bea has offered limited vm support for aspectoriented extensions but for extensions supported in all java vms would require agreement through suns java community process see also the javalanginstrument package available since java se   which is a common ground for jvm loadtime instrumentation academic interest in the semantics and implementation of aspectoriented languages has surrounded aspectj since its release the leading research implementation of aspectj is the aspectbench compiler or abc it supports extensions for changing the syntax and semantics of the language and forms the basis for many aop experiments that the aspectj team can no longer support given its broad user base many programmers discover aspectj as an enabling technology for other projects most notably spring aop a sister spring project spring roo automatically maintains aspectj intertype declarations as its principal code generation output history and contributors gregor kiczales started and led the xerox parc team that eventually developed aspectj he coined the term crosscutting fourth on the team chris maeda coined the term aspectoriented programming jim hugunin and erik hilsdale xerox parc team members  and  were the original compiler and weaver engineers mik kersten implemented the ide integration and started the eclipse ajdt project with adrian colyer current lead of the aspectj project and andrew clement current compiler engineer the aspectbench compiler was developed and is maintained as a joint effort of the programming tools group at the oxford university computing laboratory the sable research group at mcgill university and the institute for basic research in computer science brics aspectwerkz aspectwerkz is a dynamic lightweight and highperformance aopaosd framework for java it has been merged with the aspectj project which supports aspectwerkz functionality since aspectj  jonas boner and alex vasseur engineered the aspectwerkz project and later contributed to the aspectj project when it merged in the aspectwerkz annotation style and loadtime weaving support unlike aspectj prior to version  aspectwerkz did not add any new language constructs to java but instead supported declaration of aspects within java annotations it utilizes bytecode modification to weave classes at project buildtime class load time as well as runtime it uses standardized  aspects can be defined using either java annotations introduced with java  java  custom doclet or a simple xml definition file aspectwerkz provides an api to use the very same aspects for proxies hence providing a transparent experience allowing a smooth transition for users familiar with proxies aspectwerkz is free software the lgplstyle license allows the use of aspectwerkz  in both commercial and open source projects