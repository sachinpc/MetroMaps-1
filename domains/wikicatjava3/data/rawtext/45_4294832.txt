java collections framework the java collections framework jcf is a set of classes and interfaces that implement commonly reusable collection data structures although referred to as a framework it works in a manner of a library the jcf provides both interfaces that define various collections and classes that implement them history collection implementations in prejdk  versions of the java platform included few data structure classes but did not contain a collections framework the standard methods for grouping java objects were via the array the  and the  classes which unfortunately were not easy to extend and did not implement a standard member interface to address the need for reusable collection data structures several independent frameworks were developed the most used being doug leas collections package and objectspace generic collection library jgl whose main goal was consistency with the c standard template library stl the collections framework was designed and developed primarily by joshua bloch and was introduced in jdk  it reused many ideas and classes from doug leas collections package which was deprecated as a result sun chose not to use the ideas of jgl because they wanted a compact framework and consistency with c was not one of their goals doug lea later developed a concurrency package comprising new collectionrelated classes an updated version of these concurrency utilities was included in jdk  as of jsr  architecture almost all collections in java are derived from the  interface collection defines the basic parts of all collections the interface states the add and remove methods for adding to and removing from a collection respectively also required is the toarray method which converts the collection into a simple array of all the elements in the collection finally the contains method checks if a specified element is in the collection the collection interface is a subinterface of  so any collection may be the target of a foreach statement the iterable interface provides the iterator method used by foreach statements all collections have an iterator that goes through all of the elements in the collection additionally collection is a generic any collection can be written to store any class for example collection can hold strings and the elements from the collection can be used as strings without any casting required note that the angled brackets   can hold a type argument that specifies which type the collection holds list interface lists are implemented in the jcf via the interface it defines a list as essentially a more flexible version of an array elements have a specific order and duplicate elements are allowed elements can be placed in a specific position they can also be searched for within the list two examples for concrete classes that implement list are stack class stacks are created using  the stack offers methods to put a new object on the stack method push and to get objects from the stack method pop a stack returns the object according to lastinfirstout lifo eg the object which was placed latest on the stack is returned first javautilstack is a standard implementation of a stack provided by java the stack class represents a lastinfirstout lifo stack of objects it extends class  with five operations that allow a vector to be treated as a stack the usual push and pop operations are provided as well as a method to peek at the top item on the stack a method to test for whether the stack is empty and a method to search the stack for an item and discover how far it is from the top when a stack is first created it contains no items queue interfaces the  interface defines the queue data structure which stores elements in the order in which they are inserted new additions go to the end of the line and elements are removed from the front it creates a firstin firstout system this interface is implemented by   and  linkedlist of course also implements the list interface and can also be used as one but it also has the queue methods arraydeque implements the queue as an array both linkedlist and arraydeque also implement the interface giving it more flexibility  can be used more flexibly with its subinterface  the blockingqueue interface works like a regular queue but additions to and removals from the queue are blocking if remove is called on an empty queue it can be set to wait either a specified time or indefinitely for an item to appear in the queue similarly adding an item is subject to an optional capacity restriction on the queue and the method can wait for space to become available in the queue before returning  implements  but also alters it instead of elements being ordered by the order in which they are inserted they are ordered by priority the method used to determine priority is either the compareto method in the elements or a method given in the constructor the class creates this by using a heap to keep the items sorted doubleended queue deque interfaces the  interface is expanded by the  subinterface deque creates a doubleended queue while a regular queue only allows insertions at the rear and removals at the front the deque allows insertions or removals to take place both at the front and the back a deque is like a queue that can be used forwards or backwards or both at once additionally both a forwards and a backwards iterator can be generated the deque interface is implemented by  and  the  interface works similarly to  the same methods for insertion and removal with time limits for waiting for the insertion or removal to become possible are provided however the interface also provides the flexibility of a deque insertions and removals can take place at both ends the blocking function is combined with the deque function set interfaces javas  interface defines the set a set cant have any duplicate elements in it additionally the set has no set order as such elements cant be found by index set is implemented by   and  hashset uses a hash table more specifically it uses a  to store the hashes and elements and to prevent duplicates  extends this by creating a doubly linked list that links all of the elements by their insertion order this ensures that the iteration order over the set is predictable  uses a redblack tree implemented by a  the redblack tree makes sure that there are no duplicates additionally it allows treeset to implement  the  interface is extended by the  interface unlike a regular set the elements in a sorted set are sorted either by the elements compareto method or a method provided to the constructor of the sorted set the first and last elements of the sorted set can be retrieved and subsets can be created via minimum and maximum values as well as beginning or ending at the beginning or ending of the sorted set the sortedset interface is implemented by  is extended further via the  interface its similar to sortedset but there are a few additional methods the floor ceiling lower and higher methods find an element in the set thats close to the parameter additionally a descending iterator over the items in the set is provided as with sortedset implements navigableset map interfaces maps are defined by the  interface in java maps are simple data structures that associate a key with a value the element is the value this lets the map be very flexible if the key is the hash code of the element the map is essentially a set if its just an increasing number it becomes a list maps are implemented by   and  hashmap uses a hash table the hashes of the keys are used to find the values in various buckets linkedhashmap extends this by creating a doubly linked list between the elements this allows the elements to be accessed in the order in which they were inserted into the map treemap in contrast to hashmap and linkedhashmap uses a redblack tree the keys are used as the values for the nodes in the tree and the nodes point to the values in the map the  interface is extended by its subinterface  this interface defines a map thats sorted by the keys provided using once again the compareto method or a method provided in the constructor to the sorted map the keyvalue pairs are sorted by the keys the first and last keys in the map can be called additionally submaps can be created from minimum and maximum keys sortedmap is implemented by  the  interface extends  in various ways methods can be called that find the key or map entry thats closest to the given key in either direction the map can also be reversed and an iterator in reverse order can be generated from it its implemented by  extensions to the java collections framework java collections framework is extended by the apache commons collections library which adds collection types such as a bag and bidirectional map as well as utilities for creating unions and intersections google has released its own collections libraries as part of the guava libraries