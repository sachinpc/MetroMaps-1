nonblocking io java nonblocking io usually called nio and sometimes called new io is a collection of java programming language apis that offer features for intensive io operations it was introduced with the jse  release of java by sun microsystems to complement an existing standard io nio was developed under the java community process as jsr  an extension to nio that offers a new file system api called nio was released with java se  dolphin features and organization the apis of nio were designed to provide access to the lowlevel io operations of modern operating systems although the apis are themselves relatively highlevel the intent is to facilitate an implementation that can directly use the most efficient operations of the underlying platform the java nio apis are provided in the package and its subpackages the documentation by oracle identifies these features nio buffers nio data transfer is based on buffers  and related classes these classes represent a contiguous extent of memory together with a small number of data transfer operations although theoretically these are generalpurpose data structures the implementation may select memory for alignment or paging characteristics which are not otherwise accessible in java typically this would be used to allow the buffer contents to occupy the same physical memory used by the underlying operating system for its native io operations thus allowing the most direct transfer mechanism and eliminating the need for any additional copying in most operating systems provided the particular area of memory has the right properties transfer can take place without using the cpu at all the nio buffer is intentionally limited in features in order to support these goals there are buffer classes for all of javas primitive types except codice which can share memory with byte buffers and allow arbitrary interpretation of the underlying bytes usage nio buffers maintain several pointers that dictate the function of their accessor methods the nio buffer implementation contains a rich set of methods for modifying these pointers channels channels classes implementing the interface  are designed to provide for bulk data transfers to and from nio buffers this is a lowlevel data transfer mechanism that exists in parallel with the classes of the higherlevel io library packages and  a channel implementation can be obtained from a highlevel data transfer class such as   or  and vice versa channels are analogous to file descriptors found in unixlike operating systems file channels  can use arbitrary buffers but can also establish a buffer directly mapped to file contents using memorymapped file they can also interact with file system locks similarly socket channels  and  allow for data transfer between sockets and nio buffers codice can be used to do a file copy which is potentially far more efficient than using old readwrite with a byte array the typical code for this is selectors a selector  and subclasses provides a mechanism for waiting on channels and recognizing when one or more become available for data transfer when a number of channels are registered with the selector it enables blocking of the program flow until at least one channel is ready for use or until an interruption condition occurs although this multiplexing behavior could be implemented with threads the selector can provide a significantly more efficient implementation using lowerlevel operating system constructs a posixcompliant operating system for example would have direct representations of these concepts select a notable application of this design would be the common paradigm in server software which involves simultaneously waiting for responses on a number of sessions character sets in java a character set is a mapping between unicode characters or a subset of them and bytes the package of nio provides facilities for identifying character sets and providing encoding and decoding algorithms for new mappings jdk  and nio jdk  includes a javaniofile package which with the javaniofilepath class also new to jdk  among other features provides extended capabilities for filesystem tasks eg can work with symbolichard links and dump big directory listings into buffers more quickly than the old file class does the javaniofile package and its related package javaniofileattribute provide comprehensive support for file io and for accessing the file system a zip file system provider is also available in jdk 