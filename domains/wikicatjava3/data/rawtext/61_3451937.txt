java media framework the java media framework jmf is a java library that enables audio video and other timebased media to be added to java applications and applets this optional package which can capture play stream and transcode multiple media formats extends the java platform standard edition java se and allows development of crossplatform multimedia applications versions and licensing an initial playbackonly version of jmf was developed by sun microsystems silicon graphics and intel and released as jmf  in  jmf  developed by sun and ibm came out in  and added capture streaming pluggable codecs and transcoding jmf is branded as part of suns desktop technology of jse opposed to the java serverside and clientside application frameworks the notable exceptions are java applets and java web start which have access to the full jmf in the web browsers or appletviewers underlying jre jmf  originally shipped with an mp decoder and encoder this was removed in  and a new mp playbackonly plugin was posted in  jmf binaries are available under a custom license and the source is available under the scsl the current version ships with four jar files and shell scripts to launch four jmfbased applications jmf is available in an alljava version and as platformspecific performance packs which can contain nativecode players for the platform andor hooks into a multimedia engine specific to that platform jmf  offers performance packs for linux solaris on sparc and windows in january  tudor holton of bentokit project released a debian package for the jmf to alleviate difficulties that had arisen over time when installing the jmf on debian and ubuntu gnulinux this package does not contain the jmf but presents the user with the jmf license retrieves it from the oracle website and then installs it a similar debian package installer for the jmf mp plugin was also built in february  design concepts jmf abstracts the media it works with into codices for media being read into jmf and codices for data being exported out it does not afford the developer significant access to the particulars of any given format rather media is represented as sources themselves obtained from urls that can be read in and played processed and exported though not all codecs support processing and transcoding a codice class offers static methods that are the primary pointofcontact with jmf for applications criticism and alternatives many jmf developers have complained that the jmf implementation supplied in uptodate jres supports relatively few uptodate codecs and formats its alljava version for example cannot play mpeg mpeg windows media realmedia most quicktime movies flash content newer than flash  and needs a plugin to play the ubiquitous mp format while the performance packs offer the ability to use the native platforms media library theyre only offered for linux solaris and windows in particular ms windowsbased jmf developers new to jmf often expect support for some newer formats on all platforms when such formats are only in fact supported on ms windows while jmf is considered a very useful framework the freely available implementation provided by oracle is suffering from a lack of updates and maintenance jmf does not get much maintenance effort from oracle the api has not been enhanced since  and the last news item on jmfs home page was posted in september  while jmf is built for extensibility there are few such thirdparty extensions furthermore content editing functionality in jmf is effectively nonexistent you can do simple recording and playback for audio and video but the implementation provided by oracle can do little else platforms beyond those that oracle provides support to are left to their corresponding jre vendors while sun still provides a forum for discussion of its implementation there have been several efforts to implement opensource alternatives alternatives depending on a developers needs several other libraries may be more suitable than jmf these include code example the following example shows an awt fileselection dialog and attempts to load and play the media file selected by the user much of the example is involved with the building of the awt gui only two lines touch jmf codice implicitly creates a codice from a url representation of the file creates a codice and realizes it meaning that all resources necessary for playback are allocated and initialized the codice asks the codice for an awt codice suitable for use in a gui if a control component were desired it would be obtained with codice and added to the gui separately note that the developer is not concerned with the format of the media  this code works equally well for any media format that jmf can import and read