embedded c embedded c is a set of language extensions for the c programming language by the c standards committee to address commonality issues that exist between c extensions for different embedded systems historically embedded c programming requires nonstandard extensions to the c language in order to support exotic features such as fixedpoint arithmetic multiple distinct memory banks and basic io operations in  the c standards committee extended the c language to address these issues by providing a common standard for all implementations to adhere to it includes a number of features not available in normal c such as fixedpoint arithmetic named address spaces and basic io hardware addressing embedded c uses most of the syntax and semantics of standard c eg main function variable definition datatype declaration conditional statements if switch case loops while for functions arrays and strings structures and union bit operations macros etc a technical report was published in  and a second revision in  necessity during immature years of microprocessor based systems programs were developed using assemblers and fused into the eproms there used to be no mechanism to find what the program was doing leds switches etc were used to check for correct execution of the program only a select few developers had incircuit emulators ices but they were too costly and were not very reliable as time progressed use of microprocessorspecific assemblyonly as the programming language reduced and embedded systems moved onto c as the embedded programming language of choice c is the most widely used programming language for embedded processorscontrollers assembly is also used but mainly to implement those portions of the code where very high timing accuracy code size efficiency etc are prime requirements as assembly language programs are specific to a processor assembly language didnt offer portability across systems to overcome this disadvantage several high level languages including c came up some other languages like plm modula pascal etc also came but could not find wide acceptance amongst those c got wide acceptance for not only embedded systems but also for desktop applications even though c might have lost its sheen as a mainstream language for general purpose applications it still has a stronghold in embedded programming due to the wide acceptance of c in embedded systems various kinds of support tools like compilers and crosscompilers ice etc came up and all this facilitated development of embedded systems using c assembly language seems to be an obvious choice for programming embedded devices however use of assembly language is restricted to developing efficient codes in terms of size and speed also assembly codes lead to higher software development costs and code portability is not there developing small codes are not much of a problem but large programsprojects become increasingly difficult to manage in assembly language finding good assembly programmers has also become difficult hence high level languages are preferred for embedded systems programming other highlevel programming language like pascal fortran also provide some of the advantages