java classloader the java classloader is a part of the java runtime environment that dynamically loads java classes into the java virtual machine usually classes are only loaded on demand the java run time system does not need to know about files and file systems because of classloaders delegation is an important concept to understand when learning about classloaders a software library is a collection of related object code in the java language libraries are typically packaged in jar files libraries can contain objects of different types the most important type of object contained in a jar file is a java class a class can be thought of as a named unit of code the class loader is responsible for locating libraries reading their contents and loading the classes contained within the libraries this loading is typically done on demand in that it does not occur until the class is called by the program a class with a given name can only be loaded once by a given classloader each java class must be loaded by a class loader furthermore java programs may make use of external libraries that is libraries written and provided by someone other than the author of the program or they may be composed at least in part of a number of libraries when the jvm is started three class loaders are used the bootstrap class loader loads the core java libraries located in the codice directory this class loader which is part of the core jvm is written in native code the extensions class loader loads the code in the extensions directories codice or any other directory specified by the codice system property it is implemented by the codice class the system class loader loads code found on codice which maps to the codice environment variable this is implemented by the codice class userdefined class loaders the java class loader is written in java it is therefore possible to create your own class loader without understanding the finer details of the java virtual machine every java class loader has a parent class loader defined when a new class loader is instantiated or set to the virtual machines system default class loader this makes it possible for example class loaders in java ee java platform enterprise edition java ee application servers typically load classes from a deployed war or ear archive by a tree of classloaders isolating the application from other applications but sharing classes between deployed modules socalled servlet containers are typically implemented in terms of multiple classloaders jar hell jar hell is a term similar to dll hell used to describe all the various ways in which the classloading process can end up not working three ways jar hell can occur are the osgi alliance specified starting as jsr  in  a modularity framework that aims to solve jar hell for current and future vms in me se and ee that is widely adopted using metadata in the jar manifest jar files called bundles are wired on a perpackage basis bundles can export packages import packages and keep packages private providing the basic constructs of modularity and versioned dependency management to remedy the jar hell problems a java community process jsr  was initiated in  the resolution java module system intended to introduce a new distribution format a modules versioning scheme and a common modules repository similar in purpose to microsoft nets global assembly cache in december  sun announced that jsr  was put on hold the java module system was later rebooted as project jigsaw which should be included in java 