erlang programming language erlang   is a generalpurpose concurrent functional programming language it is also a garbagecollected runtime system the sequential subset of erlang supports eager evaluation single assignment and dynamic typing erlang is known for its designs that are well suited for systems with the following characteristics it was originally a proprietary language within ericsson developed by joe armstrong robert virding and mike williams in  but was released as open source in  erlang along with otp a collection of middleware and libraries in erlang are now supported and maintained by the otp product unit at ericsson and have been widely referred to as erlangotp history the name erlang attributed to bjarne dcker has been presumed by those working on the telephony switches for whom the language was designed to be a reference to danish mathematician and engineer agner krarup erlang or the ubiquitous use of the unit named for him and initially at least simultaneously as a syllabic abbreviation of ericsson language erlang was designed with the aim of improving the development of telephony applications the initial version of erlang was implemented in prolog and was influenced by the programming language plex used in earlier ericsson exchanges by  erlang had proven that it was suitable for prototyping telephone exchanges but the prolog interpreter was far too slow one group within ericsson estimated that it would need to be  times faster in order to be suitable for production use in  work began on the beam virtual machine which compiles erlang to c using a mix of natively compiled code and threaded code to strike a balance between performance and disk space according to armstrong the language went from lab product to real applications following the collapse of the nextgeneration axe exchange named axen in  as a result erlang was chosen for the next atm exchange axd in  ericsson announced the axd switch containing over a million lines of erlang and reported to achieve a high availability of nine s shortly thereafter ericsson radio systems banned the inhouse use of erlang for new products citing a preference for nonproprietary languages the ban caused armstrong and others to leave ericsson the implementation was opensourced at the end of the year ericsson eventually lifted the ban it rehired armstrong in  in  native symmetric multiprocessing support was added to the runtime system and virtual machine erlang has now been adopted by companies worldwide including nortel and tmobile erlang is used in ericssons support nodes and in gprs g and lte mobile networks worldwide as tim bray director of web technologies at sun microsystems expressed in his keynote at oscon in july  functional programming examples an erlang function that uses recursion to count to ten a factorial algorithm implemented in erlang a fibonacci algorithm implemented in erlang note this is only for demonstrating the erlang syntax this algorithm is rather slow quicksort in erlang using list comprehension the above example recursively invokes the function codice until nothing remains to be sorted the expression codice is a list comprehension meaning construct a list of elements codice such that codice is a member of codice and codice is less than codice codice is the list concatenation operator a comparison function can be used for more complicated structures for the sake of readability the following code would sort lists according to length here again a codice is taken from the first parameter given to codice and the rest of codice is named codice note that the expression is no different in form from in the previous example except for the use of a comparison function in the last part saying construct a list of elements codice such that codice is a member of codice and codice is true with codice being defined earlier as note also that the anonymous function is named codice in the parameter list of the second definition of codice so that it can be referenced by that name within that function it is not named in the first definition of codice which deals with the base case of an empty list and thus has no need of this function let alone a name for it data types erlang has eight primitive data types and three compound data types two forms of syntactic sugar are provided erlang has no method of defining classes although there are external libraries available concurrency and distribution orientation erlangs main strength is support for concurrency it has a small but powerful set of primitives to create processes and communicate among them erlang is conceptually similar to the occam programming language though it recasts the ideas of communicating sequential processes csp in a functional framework and uses asynchronous message passing processes are the primary means to structure an erlang application they are neither operating system processes nor operating system threads but lightweight processes that are scheduled by erlangs beam vm like operating system processes but unlike operating system threads they share no state with each other the estimated minimal overhead for each is  words thus many processes can be created without degrading performance a benchmark with  million processes has been successfully performed erlang has supported symmetric multiprocessing since release rb of may  while threads require external library support in most languages erlang provides languagelevel features for creating and managing processes with the aim of simplifying concurrent programming though all concurrency is explicit in erlang processes communicate using message passing instead of shared variables which removes the need for explicit locks a locking scheme is still used internally by the vm interprocess communication works via a sharednothing asynchronous message passing system every process has a mailbox a queue of messages that have been sent by other processes and not yet consumed a process uses the codice primitive to retrieve messages that match desired patterns a messagehandling routine tests messages in turn against each pattern until one of them matches when the message is consumed and removed from the mailbox the process resumes execution a message may comprise any erlang structure including primitives integers floats characters atoms tuples lists and functions the code example below shows the builtin support for distributed processes as the example shows processes may be created on remote nodes and communication with them is transparent in the sense that communication with remote processes works exactly as communication with local processes concurrency supports the primary method of errorhandling in erlang when a process crashes it neatly exits and sends a message to the controlling process which can then take action such as for instance starting a new process that takes over the old processs task implementation the ericsson erlang implementation loads virtual machine bytecode which is converted to threaded code at load time it also includes a native code compiler on most platforms developed by the high performance erlang project hipe at uppsala university since october  the hipe system is fully integrated in ericssons open source erlangotp system it also supports interpreting directly from source code via abstract syntax tree via script as of rb release of erlang hot code loading and modules erlang supports languagelevel dynamic software updating to implement this code is loaded and managed as module units the module is a compilation unit the system can keep two versions of a module in memory at the same time and processes can concurrently run code from each the versions are referred to as the new and the old version a process will not move into the new version until it makes an external call to its module an example of the mechanism of hot code loading for the second version we add the possibility to reset the count to zero only when receiving a message consisting of the atom codeswitch will the loop execute an external call to codeswitch codice is a preprocessor macro for the current module if there is a new version of the counter module in memory then its codeswitch function will be called the practice of having a specific entrypoint into a new version allows the programmer to transform state to what is required in the newer version in our example we keep the state as an integer in practice systems are built up using design principles from the open telecom platform which leads to more code upgradable designs successful hot code loading is a tricky subject code needs to be written with care to make use of erlangs facilities distribution in  ericsson released erlang as open source to ensure its independence from a single vendor and to increase awareness of the language erlang together with libraries and the realtime distributed database mnesia forms the open telecom platform otp collection of libraries ericsson and a few other companies offer commercial support for erlang since the open source release erlang has been used by several firms worldwide including nortel and tmobile although erlang was designed to fill a niche and has remained an obscure language for most of its existence its popularity is growing due to demand for concurrent services erlang has found some use in fielding mmorpg servers erlang in industry companies using erlang companies using erlang in their production systems include