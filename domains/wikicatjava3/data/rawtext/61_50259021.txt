eclipse che eclipse che is an opensource java based developer workspace server and cloud integrated development environment ide which provides a remote development platform for multiuser purpose the workspace server comes with a restful webservice and provides high flexibility it also contains a sdk which can be used to create plugins for languages frameworks or tools the main difference between eclipse che and the standard eclipse ide is its ability to create docker containers to execute applications eclipse che is an eclipse cloud development ecd toplevel project and all contributions are welcomed and encouraged history eclipse che was first announced in october  one of its main contributors codenvy delivered the technological stack which che is based on the idea behind the cloud based ide and its development came up in early  by the exo platform after three years of ongoing development the project raised  million and developed a standalone business called codenvy after announcing the che project including intellectual property donation and participation in the eclipse cloud development project the development of the che project began codenvy itself is today a commercial product built on top of eclipse che today there are a lot more contributors besides codenvy like ibm redhat samsung sap microsoft intuit exo platform wso serli as well as numerous open source contributors from brazil canada china france india russia sri lanka ukraine and united states licensing eclipse che is released under the eclipse public license epl which is similar to the common public license name the name che is based on the fact that most of the development is done in cherkasy ukraine supported languages and frameworks by default the following programming languages and frameworks are supported approach che itself is a workspace server running on an application server che provides an integrated ide which can be used via a browser after the initial load the ide provides a dynamic user interface including known components like wizards editors toolbars and many more the user has the opportunity to create workspaces projects environments machines and many other modules that are needed to build a project from scratch the communication between the user interface and the server is done using restful apis that interact with the socalled workspace master one workspace may include zero or more projects and must at least include one environment which itself contains at least one machine a machine is a runtime that has the necessary software installed if the user adds for example a project which uses apache maven the workspace master installs maven on any machine in the workspace to ensure the project can be executed on each machine che comes with some predefined technology stacks to quickly set up a new machine to ensure high flexibility and extensibility the user may also define custom technology stacks which can be used to set up new machines technological stack eclipse che is a java application which runs by default on an apache tomcat server the ide which is used inside the browser is written using the google web toolkit gwt che is highly extensible since it delivers a sdk which can be used to develop new plugins which can be bundled to so called assemblies later on an assembly can be executed as a standalone server application or desktop client using the included installers the machines where the projects can be executed are managed by docker users che divides its users in three groups the developers are the actual users of the ide this can either be by accessing a remote che server or by having a local instance of che running product owners may use che to provide ondemand workspaces plugin providers can develop either client side ide or server side workspace manager plugins features eclipse che comes with a lot of new functionality and flexibility scaling since che is a server application it can be accessed by multiple developers at once each developer can connect to the same workspace using the browser ide right now eclipse che implements a lastwritewins policy when multiple users modify the same file in a future release it is planned to include multicursor visuals to enable collaborative multiuser editing of a single file workspaces may be getting very large because a workspace can have a lot of machines included if a single host is no longer enough it is recommended to provide an own che instance for each user or user group that means that you can have many servers running che in the same ecosystem codenvy also offers a scaling ecosystem that can be installed ondemand or can be used as saas in future releases it is also planned to enable remote docker containers so you dont need to have all containers running on the same host