jar file format a jar java archive is a package file format typically used to aggregate many java class files and associated metadata and resources text images etc into one file to distribute application software or libraries on the java platform jar files are archive files with which include a java specific manifest file  they are built on the zip file format and typically have the codice file extension design a jar file allows java runtimes to efficiently deploy a set of classes and their associated resources the elements in a jar file may be compressed along with the ability to download an entire application in a single request makes downloading a jar file simpler than downloading multiple files to form a single java application a jar file has an optional manifest file located in the path codice the entries in the manifest file determine how one can use the jar file for instance a classpath entry can be used to specify other jar files for loading with the jar the contents of a jar file may be extracted using any standard unzip software or the codice command line utility codice developers can digitally sign jar files in that case the signature information becomes part of the embedded manifest file the jar itself is not signed but instead every file inside the archive is listed along with its checksum it is these checksums that are signed multiple entities may sign the jar file changing the jar file itself with each signing although the signed files themselves remain valid when the java runtime loads signed jar files it can validate the signatures and refuse to load classes that do not match the signature it can also support sealed packages in which the classloader will only permit java classes to be loaded into the same package if they are all signed by the same entities this prevents malicious code from being inserted into an existing package and so gaining access to packagescoped classes and data the content of jar files may be obfuscated to make reverse engineering more difficult executable jar files an executable java program can be packaged in a jar file along with any libraries the program uses executable jar files have the manifest specifying the entry point class with codice and an explicit classpath and the cp argument is ignored some operating systems can run these directly when clicked the typical invocation is codice from a command line native launchers can be created on most platforms for instance microsoft windows users who prefer having windows exe files can use tools such as jsmooth launchj winrunj or nullsoft scriptable install system to wrap single jar files into executables manifest on the java platform a manifest file is a specific file contained within a jar file it is used to define extension and packagerelated data it is a metadata file that contains namevalue pairs organized in different sections if a jar file is intended to be used as an executable file the manifest file specifies the main class of the application the manifest file is named codice it is not uncommon to find a computer file described as a manifest in situations unrelated to java specifications a jar file includes a manifest at the canonical location codice there can be only one manifest file in an archive and it must be in the codice directory the content of the manifest file in a jar file created with version  of the java development kit is the following all the entries are as namevalue pairs the name of a header is separated from its value by a colon the default manifest shows that it conforms to version  of the manifest specification the manifest can also contain information about the other files that are packaged in the archive exactly what file information is recorded in the manifest will depend on the intended use for the jar file the default manifest file makes no assumptions about what information it should record about other files so its single line contains data only about itself specialpurpose manifest headers depending on the intended role of the jar file the default manifest may have to be modified if the jar file is created only for the purpose of archival then the codice file is of no purpose most uses of jar files go beyond simple archiving and compression and require special information to be in the manifest file summarized below are brief descriptions of the headers that are required for some specialpurpose jarfile functions applications bundled as jar files if an application is bundled in a jar file the java virtual machine needs to be told what the entry point to the application is an entry point is any class with a codice method this information is provided in the mainclass header which has the general form in this example codice will be executed package sealing optionally a package within a jar file can be sealed which means that all classes defined in that package must be archived in the same jar file a package might be sealed to ensure version consistency among the classes in the software or as a security measure to seal a package a name header needs to be added for the package followed by a sealed header similar to this the name headers value is the packages relative pathname note that it ends with a  to distinguish it from a filename any headers following a name header without any intervening blank lines apply to the file or package specified in the name header in the above example because the sealed header occurs after the name mycompanymypackage header with no blank lines between the sealed header will be interpreted as applying only to the package mycompanymypackage package versioning the package versioning specification defines several manifest headers to hold versioning information one set of such headers can be assigned to each package the versioning headers should appear directly beneath the name header for the package this example shows all the versioning headers specify dependencies the codice file can be used to specify all the classes that must be loaded for an application to be able to run source the sun servlet specification page  servletfrspecpdf see also the java tech notes note that classpath entries are delimited with spaces not with the system path delimiter apache ant zipjar support the apache ant build tool has its own package to read and write zip and jar archives including support for the unix filesystem extensions the orgapachetoolszip package is released under the apache software foundation license and is designed to be usable outside ant related formats several related file formats build on the jar format