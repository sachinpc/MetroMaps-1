timesten timesten is an inmemory relational database management system with persistence and recoverability originally designed and implemented at hewlettpackard labs in palo alto california timesten was spun out into a separate startup in  and acquired by oracle corporation in  all data within a timesten database is located in physical memory ram which means no disk io is required for any data operation this is unlike traditional diskoptimized relational databases such as the oracle database db informix or sql server whose designs must contain algorithms that attempt to minimize disk accesses timesten provides applications with short consistent response times and very high throughput required by applications with databaseintensive workloads as memory is far faster than hard disk timesten is heavily used in applications where service level agreements require very low and predictable response times such as telecommunication realtime financial services trading applications network equipment and large web applications also unlike other memory caching systems that use keyvalue pairs such as memcached hazelcast or coherence timesten is a fullfeatured relational database that can be accessed with standard apis like odbc jdbc oci procc and odpnet and provides the rich functionality of the sql query language applications with existing data residing in an oracle database can utilize the combination of the oracle database and timesten through the oracle inmemory database cache database option in which timesten functions as an inmemory cache database in front of the oracle database timesten runs on most major unixlinux platforms and on various windows platforms in both bit and bit modes technical overview timesten is an inmemory database management technology that provides very fast data access time the reason timesten is so fast is because it was built from the ground up around the idea that all its data will reside in physical memory ram during run time the result is very low response times which enable high throughput even on commodity hardware architecture and component overview shared libraries timesten functionality is contained in a set of shared libraries that application developers link to their application allowing timesten to execute as part of the applications process this shared library approach is different than conventional rdbms systems where the database is essentially a set of distinct processes to which applications connect via some form of interprocess communication this communication may take the form of a clientserver connection spanning over a network or it may be some form of intrasystem ipc such as a unix domain socket connection or a shared memory based connection mechanism memoryresident database the data for each active timesten database is stored in a shared memory segment allowing multiple timesten databases to be active concurrently and also allowing an application to simultaneously access several timesten databases on the same system on bit platforms the size of a timesten database is practically limited only by the amount of ram available on its host computer one customer has a production timesten database approaching two terabytes in size utilized for online transaction processing database processes starting timesten requires starting a background process called the timesten main daemon which then starts multiple timesten subdaemon processes to manage each database created in the system these subdaemon processes perform database operations such as connection modes client applications that connect to traditional diskbased relational databases typically use tcpip or another ipc mechanism to communicate with a database server process in timesten applications that reside in the same server as the timesten database can connect directly to the inmemory image of the database by using the timesten direct driver eliminating the need for any interprocess communication of any kind thus providing extremely fast performance if the application resides on a remote server the application can also connect to the timesten database using the traditional clientserver model of data access data availability and integrity checkpoint and transaction log files all timesten data exists in ram however timesten does utilize nonvolatile storage such as a hard disk for database persistence and recoverability a timesten database stores all transactional data modifications in an inmemory log buffer which is eventually persisted to disk in the form of transaction log files in addition timesten also persists snapshots of the inmemory database called checkpoint files to disk the combination of checkpoint files and transaction log files allow timesten to provide recoverability in the event of a system failure timesten implements a parallel log manager in order to maximize throughput on large smp systems by default timesten operates in nondurable commit mode in this mode a commit operation occurs purely in memory and the writing of the log records for the transaction to disk occurs asynchronously to the commit this provides for very low response times and very high throughput at the cost of the potential for some small amount of data loss in the event of a system failure a true synchronous commit mode durable commit mode is also provided this mode avoids the possibility of any data loss at the cost of reduced performance when operating in synchronous commit mode timesten provides automatic group commit optimization timesten allows the architect  developer to balance performance versus data safety by providing control of the commit mode at three different levels database connection and transaction another option for data protection and highavailability is to use timesten replication replication the timesten replication mechanism enables you to design a highly available system by sending database updates between two or more hosts with timesten replication a master host sends updates to one or more subscriber hosts timesten recommends an activestandby pair configuration for highest availability an activestandby pair consists of two master databases an active and a standby database in addition to the active and standby databases multiple subscriber databases can be configured to serve as disaster recovery copies or readonly farms replication in timesten is implemented by the replication agent a daemon process that aims at every timesten database involved in replication the replication agent sends and receives updates between databases by communicating with the replication agents of other databases involved in the same replication scheme change capture is via logmining with inmemory optimization under normal operating conditions change records are captured from the inmemory log buffer with no need for any disk io communication between replication agents is via an efficient streamoriented protocol built on top of regular tcpip connections the replication agent is multithreaded and in the  release timesten supports parallel replication for increased throughput the replication workload is automatically parallelized to maximize throughput while still maintaining correctness inmemory database cache timesten provides the capability to cache data from an oracle database source when used in this fashion timesten is referred to as oracle inmemory database cache imdb cache an oracle database product option to utilize oracle database caching one defines one or more sql objects known as cache groups a cache group is a set of one or more related database tables and allows for subsets of its rows andor columns database tables in a cache group must each have a defined primary key or a unique index declared across a set of nonnullable columns and must be related in a parentchild hierarchy via primary keyforeign key constraints sql predicates can be used to control what data is to be cached once a cache group is defined the cache group can then be loaded allowing oracle database data to be cached in timesten applications can then read from and write to cache groups and all data modifications will then be synchronized with the corresponding oracle database tables either automatically or manually event notification timesten provides an event notification mechanism through the timesten transaction log api xla xla provides functions which allow applications to be notified of data changes occurring in timesten tables and also ddl occurring in the timesten database xla can also be used in conjunction with materialized views to simplify the process of monitoring changes made to rows spanning multiple tables xla works by mining the timesten transaction log stream in a similar manner to the replication agent database application deployments that do not include an oracle database which want to use timesten as an inmemory cache database can use xla to capture updates made to the timesten database and via custom application code apply these updates to their backend database they can also utilize a realtime data integration tool like oracle goldengate to replicate changes from their backend database into timesten history timesten was founded in hp labs by marieanne neimat sherry listgarten and kurt shoens under the name of smallbase at hp jeanren bouvier decided to embed smallbase into hp opencall which made the first commercial use of the product in  in  the product was spun off into a separate venture capital funded startup company based in mountain view california under the leadership of ceo jim groff the product became popular for telecommunications equipment as response times in the milliseconds or even microseconds were required for applications like packet switching the company had  employees and was profitable when it was acquired by oracle corporation in  after the acquisition neimat remained as the director of timesten development at oracle adding many oracle database features to the product such as support for plsql and integration with oracle sql developer and oracle enterprise manager customers over  companies around the globe use timesten for their realtime applications timesten is also embedded in the oracle exalytics appliance released in 