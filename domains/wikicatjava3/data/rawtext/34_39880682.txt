tcl tcl originally from tool command language but conventionally spelled tcl rather than tcl pronounced as tickle or teeseeell is a scripting language created by john ousterhout originally born out of frustration according to the author with programmers devising their own languages intended to be embedded into applications tcl gained acceptance on its own it is commonly used for rapid prototyping scripted applications guis and testing tcl is used on embedded systems platforms both in its full form and in several other smallfootprint versions the combination of tcl and the tk gui toolkit is referred to as tcltk history the tcl programming language was created in the spring of  by john ousterhout while working at the university of california berkeley tcl conferences and workshops are held in both the united states and europe features tcls features include tcl did not originally have object oriented oo syntax  provides an oo system in tcl core so oo functionality was provided by extension packages such as incr tcl and xotcl even purely scripted oo packages exist such as snit and stooop simple tclonly objectoriented programming safetcl is a subset of tcl that has restricted features file system access is limited and arbitrary system commands are prevented from execution it uses a dual interpreter model with the untrusted interpreter running code in an untrusted script it was designed by nathaniel borenstein and marshall rose to include active messages in email safetcl can be included in email when the applicationsafetcl and multipartenabledmail are supported the functionality of safetcl has since been incorporated as part of the standard tcltk releases syntax and fundamental semantics the syntax and semantics are covered by the twelve rules of the dodecalogue alternative wording a tcl script consists of several command invocations a command invocation is a list of words separated by whitespace and terminated by a newline or semicolon the first word is the name of a command which is not built into the language but which is in the library the following words are arguments so we have an example using the puts command to display a string on the host console is this sends the string hello world to the stdout device with an appended newline character variables and the results of other commands can be substituted inside strings too such as in this example where we use set and expr no assignment operator  to store a calculation result in a variable and puts short for put string to print the result together with some explanatory text there is one basic construct the command and a set of simple substitution rules formally words are either written asis with doublequotes around them allowing whitespace characters to be embedded or with curlybrace characters around them which suppresses all substitutions inside except for backslashnewline elimination in bare and doublequoted words three types of substitution occur once in a single lefttoright scan through the word from tcl  onwards any word may be prefixed by  to cause that word to be split apart into its constituent subwords for the purposes of building the command invocation similar to the  sequence of lisps quasiquote feature as a consequence of these rules the result of any command may be used as an argument to any other command also there is no operator or command for string concatenation as the language concatenates directly note that unlike in unix command shells tcl does not reparse any string unless explicitly directed to do so which makes interactive use more cumbersome but scripted use more predictable eg the presence of spaces in filenames does not cause difficulties the single equality sign  for example is not used at all and the double equality sign  is the test for equality and even then only in expression contexts such as the codice command or the first argument to codice both of those commands are just part of the standard library they have no particularly special place in the library and can be replaced if so desired the majority of tcl commands especially in the standard library are variadic and the codice the constructor for scripted command procedures allows one to define default values for unspecified arguments and a catchall argument to allow the code to process arbitrary numbers of arguments tcl is not statically typed each variable may contain integers floats strings lists command names dictionaries or any other value values are reinterpreted subject to syntactic constraints as other types on demand however values are immutable and operations that appear to change them actually just return a new value instead basic commands the most important commands that refer to program execution and data operations are the usual execution control commands are those above looping commands can be additionally controlled by the following commands additionally important commands interfacing with other languages tcl interfaces natively with the c language this is because it was originally written to be a framework for providing a syntactic frontend to commands written in c and all commands in the language including things that might otherwise be keywords such as codice or codice are implemented this way each command implementation function is passed an array of values that describe the already substituted arguments to the command and is free to interpret those values as it sees fit digital logic simulators often include a tcl scripting interface for simulating verilog vhdl and systemverilog hardware languages tools exist eg swig ffidl to automatically generate the necessary code to connect arbitrary c functions and the tcl runtime and critcl does the reverse allowing embedding of arbitrary c code inside a tcl script and compiling it at runtime into a dll module files environment modules are written in the tcl tool command language and are interpreted by the modulecmd program via the module user interface extension packages the tcl language has always allowed for extension packages which provide additional functionality such as a gui terminalbased application automation database access and so on commonly used extensions include