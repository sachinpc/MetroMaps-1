ruby programming language ruby is a dynamic reflective objectoriented generalpurpose programming language it was designed and developed in the mids by yukihiro matz matsumoto in japan according to its creator ruby was influenced by perl smalltalk eiffel ada and lisp it supports multiple programming paradigms including functional objectoriented and imperative it also has a dynamic type system and automatic memory management history early concept ruby was conceived on february   in a  post to the rubytalk mailing list ruby author yukihiro matsumoto describes some of his early ideas about the language matsumoto describes the design of ruby as being like a simple lisp language at its core with an object system like that of smalltalk blocks inspired by higherorder functions and practical utility like that of perl the name ruby the name ruby originated during an online chat session between matsumoto and keiju ishitsuka on february   before any code had been written for the language initially two names were proposed coral and ruby matsumoto chose the latter in a later email to ishitsuka matsumoto later noted a factor in choosing the name ruby it was the birthstone of one of his colleagues first publication the first public release of ruby  was announced on japanese domestic newsgroups on december   subsequently three more versions of ruby were released in two days the release coincided with the launch of the japaneselanguage rubylist mailing list which was the first mailing list for the new language already present at this stage of development were many of the features familiar in later releases of ruby including objectoriented design classes with inheritance mixins iterators closures exception handling and garbage collection early releases following the release of ruby  in  several stable versions of ruby were released in the following years in  the first article about ruby was published on the web in the same year matsumoto was hired by netlabjp to work on ruby as a fulltime developer in  the ruby application archive was launched by matsumoto along with a simple englishlanguage homepage for ruby in  the first english language mailing list rubytalk began which signaled a growing interest in the language outside japan in this same year matsumoto and keiju ishitsuka wrote the first book on ruby the objectoriented scripting language ruby  ruby which was published in japan in october  it would be followed in the early s by around  books on ruby published in japanese by  ruby was more popular than python in japan in september  the first english language book programming ruby was printed which was later freely released to the public further widening the adoption of ruby amongst english speakers in early  the englishlanguage rubytalk mailing list was receiving more messages than the japaneselanguage rubylist demonstrating rubys increasing popularity in the englishspeaking world ruby  ruby  was initially released in august  was stable for a long time and was retired june  although deprecated there is still code based on it ruby  is only partially compatible with ruby  ruby  has been the subject of several industry standards the language specifications for ruby were developed by the open standards promotion center of the informationtechnology promotion agency a japanese government agency for submission to the japanese industrial standards committee jisc and then to the international organization for standardization iso it was accepted as a japanese industrial standard jis x  in  and an international standard isoiec  in  around  interest in the ruby language surged in tandem with ruby on rails a web framework written in ruby rails is frequently credited with increasing awareness of ruby ruby  ruby  was released in december  effective with ruby  released october   ruby switched from being duallicensed under the ruby license and the gpl to being duallicensed under the ruby license and the twoclause bsd license adoption of  was slowed by changes from  that required many popular third party gems to be rewritten ruby  introduces many significant changes over the  series examples ruby  has been obsolete since february   and it will no longer receive bug and security fixes users are advised to upgrade to a more recent version ruby  ruby  added several new features including ruby  is intended to be fully backward compatible with ruby  as of the official  release on february   there were only five known minor incompatibilities it has been obsolete since february   and it will no longer receive bug and security fixes users are advised to upgrade to a more recent version ruby  ruby  was released on christmas day in  the release includes speedups bugfixes and library updates starting with  rubys versioning policy is more like semantic versioning although similar rubys versioning policy is not compatible with semantic versioning semantic versioning also provides additional labels for prerelease and build metadata are available as extensions to the majorminorpatch format not available at ruby ruby  ruby  was released on christmas day in  the release includes speedups bugfixes and library updates and removes some deprecated apis most notably ruby  introduces changes to memory handling an incremental garbage collector support for garbage collection of symbols and the option to compile directly against jemalloc it also contains experimental support for using vfork with system and spawn and added support for the unicode  specification features that were made obsolete or removed include callcc the dl library digesthmac librationalrb libcomplexrb gserver loggerapplication as well as various c api functions ruby  ruby  was released on christmas day in  a few notable changes include the  branch also includes many performance improvements updates and bugfixes including changes to proccall socket and io use of exception keywords threadname handling default passive netftp connections and rake being removed from stdlib philosophy matsumoto has said that ruby is designed for programmer productivity and fun following the principles of good user interface design at a google tech talk in  matsumoto further stated i hope to see ruby help every programmer in the world to be productive and to enjoy programming and to be happy that is the primary purpose of ruby language he stresses that systems design needs to emphasize human rather than computer needs ruby is said to follow the principle of least astonishment pola meaning that the language should behave in such a way as to minimize confusion for experienced users matsumoto has said his primary design goal was to make a language that he himself enjoyed using by minimizing programmer work and possible confusion he has said that he had not applied the principle of least astonishment to the design of ruby but nevertheless the phrase has come to be closely associated with the ruby programming language the phrase has itself been a source of surprise as novice users may take it to mean that rubys behaviors try to closely match behaviors familiar from other languages in a may  discussion on the newsgroup complangruby matsumoto attempted to distance ruby from pola explaining that because any design choice will be surprising to someone he uses a personal standard in evaluating surprise if that personal standard remains consistent there would be few surprises for those familiar with the standard matsumoto defined it this way in an interview semantics ruby is objectoriented every value is an object including classes and instances of types that many other languages designate as primitives such as integers booleans and null variables always hold references to objects every function is a method and methods are always called on an object methods defined at the top level scope become members of the object class since this class is an ancestor of every other class such methods can be called on any object they are also visible in all scopes effectively serving as global procedures ruby supports inheritance with dynamic dispatch mixins and singleton methods belonging to and defined for a single instance rather than being defined on the class though ruby does not support multiple inheritance classes can import modules as mixins ruby has been described as a multiparadigm programming language it allows procedural programming defining functionsvariables outside classes makes them part of the root self object with object orientation everything is an object or functional programming it has anonymous functions closures and continuations statements all have values and functions return the last evaluation it has support for introspection reflection and metaprogramming as well as support for interpreterbased threads ruby features dynamic typing and supports parametric polymorphism according to the ruby faq the syntax is similar to perl and the semantics are similar to smalltalk but it differs greatly from python syntax the syntax of ruby is broadly similar to that of perl and python class and method definitions are signaled by keywords whereas code blocks can be both defined by keywords or braces in contrast to perl variables are not obligatorily prefixed with a sigil when used the sigil changes the semantics of scope of the variable for practical purposes there is no distinction between expressions and statements line breaks are significant and taken as the end of a statement a semicolon may be equivalently used unlike python indentation is not significant one of the differences of ruby compared to python and perl is that ruby keeps all of its instance variables completely private to the class and only exposes them through accessor methods codice codice etc unlike the getter and setter methods of other languages like c or java accessor methods in ruby can be created with a single line of code via metaprogramming however accessor methods can also be created in the traditional fashion of c and java as invocation of these methods does not require the use of parentheses it is trivial to change an instance variable into a full function without modifying a single line of calling code or having to do any refactoring achieving similar functionality to c and vbnet property members pythons property descriptors are similar but come with a tradeoff in the development process if one begins in python by using a publicly exposed instance variable and later changes the implementation to use a private instance variable exposed through a property descriptor code internal to the class may need to be adjusted to use the private variable rather than the public property rubys design forces all instance variables to be private but also provides a simple way to declare codice and codice methods this is in keeping with the idea that in ruby one never directly accesses the internal members of a class from outside the class rather one passes a message to the class and receives a response see the examples section below for samples of code demonstrating ruby syntax differences from other languages some features that differ notably from languages such as c or perl a list of socalled gotchas may be found in hal fultons book the ruby way nd ed isbn  section  a similar list in the st edition pertained to an older version of ruby version  some problems of which have been fixed in the meantime for example codice now works with codice codice and codice as well as with iterators interaction the ruby official distribution also includes codice an interactive commandline interpreter that can be used to test code quickly the following code fragment represents a sample session using codice examples the following examples can be run in a ruby shell such as interactive ruby shell or saved in a file and run from the command line by typing codice classic hello world example some basic ruby code input conversions strings there are a variety of ways to define strings in ruby the following assignments are equivalent strings support variable interpolation the following assignments are equivalent and produce raw strings collections constructing and using an array constructing and using an associative array in ruby called a hash control structures if statement blocks and iterators the two syntaxes for creating a code block a code block can be passed to a method as an optional block argument many builtin methods have such arguments parameterpassing a block to be a closure computer scienceclosure creating an anonymous function returning closure computer scienceclosures from a method yielding the flow of program control to a block that was provided at calling time iterating over enumerations and arrays using blocks a method such as codice can accept both a parameter and a block the codice method iterates over each member of a list performing some function on it while retaining an aggregate this is analogous to the codice function in functional programming languages for example on the first pass the block receives  the argument to inject as codice and  the first element of the array as codice this returns  which then becomes codice on the next pass it is added to  to get  which is then added to  on the third pass to finally return  using an enumeration and a block to square the numbers  to  using a range or invoke a method on each item codice is a synonym for codice classes the following code defines a class named codice in addition to codice the usual constructor to create new objects it has two methods one to override the codice comparison operator so codice can sort by age and the other to override the codice method so codice can format its output here codice is an example of metaprogramming in ruby codice defines getter and setter methods of instance variables but codice only getter methods the last evaluated statement in a method is its return value allowing the omission of an explicit codice statement the preceding code prints three names in reverse age order codice is a constant and is a reference to a codice object open classes in ruby classes are never closed methods can always be added to an existing class this applies to all classes including the standard builtin classes all that is needed to do is open up a class definition for an existing class and the new contents specified will be added to the existing contents a simple example of adding a new method to the standard librarys codice class adding methods to previously defined classes is often called monkey patchmonkeypatching if performed recklessly the practice can lead to both behavior collisions with subsequent unexpected results and code scalability problems exceptions an exception is raised with a codice call an optional message can be added to the exception exceptions can also be specified by the programmer alternatively an exception instance can be passed to the codice method this last construct is useful when raising an instance of a custom exception class featuring a constructor that takes more than one argument exceptions are handled by the codice clause such a clause can catch exceptions that inherit from codice other flow control keywords that can be used when handling exceptions are codice and codice it is a common mistake to attempt to catch all exceptions with a simple rescue clause to catch all exceptions one must write or catch particular exceptions it is also possible to specify that the exception object be made available to the handler clause alternatively the most recent exception is stored in the magic global codice several exceptions can also be caught metaprogramming ruby code can programmatically modify at run time program lifecycle phaseruntime aspects of its own structure that would be fixed in more rigid languages such as class and method definitions this sort of metaprogramming can be used to write more concise code and effectively extend the language for example the following ruby code generates new methods for the builtin codice class based on a list of colors the methods wrap the contents of the string with an html tag styled with the respective color the generated methods could then be used like this to implement the equivalent in many other languages the programmer would have to write each method codice codice codice etc separately some other possible uses for ruby metaprogramming include more examples more sample ruby code is available as algorithms in the following article implementations matzs ruby interpreter the official ruby interpreter computer softwareinterpreter often referred to as the ruby mrimatzs ruby interpreter or mri this implementation is written in c and uses its own rubyspecific virtual machine the standardized and retired ruby  ruby mriimplementation was written in c programming languagec as a singlepass interpreted language starting with ruby  and continuing with ruby x and above the official ruby interpreter has been yarv yet another ruby vm and this implementation has superseded the slower virtual machine used in previous releases of mri alternate implementations  there are a number of alternative implementations of ruby including jruby rubinius maglev softwaremaglev ironruby macruby and its ios counterpart rubymotion mruby hotruby topaz ruby implementationtopaz and opal ruby implementationopal each takes a different approach with ironruby jruby macruby and rubinius providing justintime compilation and macruby and mruby also providing aheadoftime compilation ruby has two major alternate implementations other ruby implementations include other now defunct ruby implementations were the maturity of ruby implementations tends to be measured by their ability to run the ruby on rails rails framework because it is complex to implement and uses many rubyspecific features the point when a particular implementation achieves this goal is called the rails singularity the reference implementation ruby mrimri jruby and rubinius are all able to run rails unmodified in a production environment platform support matsumoto originally did ruby development on the bsdbsdbased sony newssony newsos x but later migrated his work to sunos x and finally to linux by  ruby was known to work across many different operating systems including newsos sunos aix svr solaris operating systemsolaris nec upux nextstep bsd linux classic mac osmac os dos windows operating systemwindows and beos modern ruby versions and implementations are available on many operating systems such as linux bsd solaris aix os x windows windows phone windows ce symbian os beos and ibm i repositories and libraries rubygems is rubys package manager a ruby package is called a gem and can easily be installed via the command line most gems are libraries though a few exist that are applications such as integrated development environmentides there are over  ruby gems hosted on rubygemsorg many new and existing ruby libraries are hosted on github a service that offers revision controlversion control repository hosting for git softwaregit categoryruby programming language  external links categoryarticles with example ruby code categoryclassbased programming languages categorydynamically typed programming languages categoryfree software programmed in c categoryiso standards categoryobjectoriented programming languages categoryprogramming languages created in  categoryscripting languages categorysoftware using the bsd license categorytextoriented programming languages