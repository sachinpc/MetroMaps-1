cg programming language cg short for c for graphics is a highlevel shading language developed by nvidia in close collaboration with microsoft for programming vertex and pixel shaders cg is based on the c programming language and although they share the same syntax some features of c were modified and new data types were added to make cg more suitable for programming graphics processing units this language is only suitable for gpu programming and is not a general programming language the cg compiler outputs directx or opengl shader programs since  cg is deprecated with no additional development or support available background due to technical advances in graphics hardware some areas of d graphics programming have become quite complex to simplify the process new features were added to graphics cards including the ability to modify their rendering pipelines using vertex and pixel shaders in the beginning vertex and pixel shaders were programmed at a very low level with only the assembly language of the graphics processing unit although using the assembly language gave the programmer complete control over code and flexibility it was fairly hard to use a portable higher level language for programming the gpu was needed so cg was created to overcome these problems and make shader development easier some of the benefits of using cg over assembly are details data types cg has six basic data types some of them are the same as in c while others are especially added for gpu programming these types are cg also features vector and matrix data types that are based on the basic data types such as float and floatx such data types are quite common when dealing with d graphics programming cg also has struct and array data types which work in a similar way to their c equivalents operators cg supports a wide range of operators including the common arithmetic operators from c the equivalent arithmetic operators for vector and matrix data types and the common logical operators functions and control structures cg shares the basic control structures with c like ifelse while and for it also has a similar way of defining functions the standard cg library as in c cg features a set of functions for common tasks in gpu programming some of the functions have equivalents in c like the mathematical functions abs and sin while others are specialized in gpu programming tasks like the texture mapping functions texd and texd the cg runtime library cg programs are merely vertex and pixel shaders and they need supporting programs that handle the rest of the rendering process cg can be used with two graphics apis opengl or directx each has its own set of cg functions to communicate with the cg program like setting the current cg shader passing parameters and such tasks in addition to being able to compile cg source to assembly code the cg runtime also has the ability to compile shaders during execution of the supporting program this allows the runtime to compile the shader using the latest optimizations available for hardware that the program is currently executing on however this technique requires that the source code for the shader be available in plain text to the compiler allowing the user of the program to access the sourcecode for the shader some developers view this as a major drawback of this technique to avoid exposing the source code of the shader and still maintain some of the hardware specific optimizations the concept of profiles was developed shaders can be compiled to suit different graphics hardware platforms according to profiles when executing the supporting program the bestmost optimized shader is loaded according to its profile for instance there might be a profile for a graphics card that supports complex pixel shaders and another profile for one that supports only minimal pixel shaders by creating a pixel shader for each of these profiles a supporting program enlarges the number of supported hardware platforms without sacrificing picture quality on powerful systems