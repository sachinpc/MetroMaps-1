java package a java package is a technique for organizing java classes into namespaces similar to the modules of modula providing modular programming in java java packages can be stored in compressed files called jar files allowing classes to be downloaded faster as groups rather than individually programmers also typically use packages to organize classes belonging to the same category or providing similar functionality a package provides a unique namespace for the types it contains classes in the same package can access each others packageprivate and protected members overview in general a package can contain the following kinds of types a package allows a developer to group classes and interfaces together these classes will all be related in some way  they might all have to do with a specific application or perform a specific set of tasks using packages in a java source file the package that this files class or classes belong to is specified with the codice keyword this keyword is usually the first keyword in the source file at most one package declaration can appear in a source file to use a packages classes inside a java source file it is convenient to import the classes from the package with an codice declaration the following declaration imports all classes from the codice package while the next declaration imports only the codice class from the package after either of these import declarations the codice class can be referenced using its simple class name classes can also be used directly without an import declaration by using the fully qualified name of the class for example does not require a preceding import declaration note that if you do not use a package declaration your class ends up in an unnamed package classes in an unnamed package cannot be imported by classes in any other package package access protection public members and classes are visible everywhere and private members are visible only in the same class classes within a package can access classes and members declared with default packageprivate access as well as class members declared with the codice access modifier default packageprivate access is enforced when a class or member has not been declared as codice codice or codice by contrast classes in other packages cannot access classes and members declared with default access however class members declared as codice can be accessed from the classes in the same package as well as classes in other packages that are subclasses of the declaring class creation of jar files jar files are created with the jar commandline utility the command compresses all class files into the jar file mypackagejar the c option on the command line tells the jar command to create new archive the  f  option tells it to create a file the files name comes next before the contents of the jar file package naming conventions packages are usually defined using a hierarchical naming pattern with some levels in the hierarchy separated by periods codice pronounced dot although packages lower in the naming hierarchy are often referred to as subpackages of the corresponding packages higher in the hierarchy there is almost no semantic relationship between packages the java language specification establishes package naming conventions to avoid the possibility of two published packages having the same name the naming conventions describe how to create unique package names so that packages that are widely distributed will have unique namespaces this allows packages to be separately easily and automatically installed and catalogued in general a package name begins with the top level domain name of the organization and then the organizations domain and then any subdomains listed in reverse order the organization can then choose a specific name for its package subsequent components of the package name vary according to an organizations own internal naming conventions for example if an organization in canada called mysoft creates a package to deal with fractions naming the package camysoftfractions distinguishes the fractions package from another similar package created by another company if a german company named mysoft also creates a fractions package but names it demysoftfractions then the classes in these two packages are defined in a unique and separate namespace complete conventions for disambiguating package names and rules for naming packages when the internet domain name cannot be directly used as a package name are described in section  of the java language specification core packages in java se  the javalang package is available without the use of an import statement modules in java  modules a kind of collection of packages are planned as part of project jigsaw these were earlier called superpackages and originally planned for java  modules will describe their dependencies in a module declaration which will be placed in a file named moduleinfojava at the root of the modules sourcefile hierarchy the jdk will be able to check them both at compiletime and runtime the jdk itself will be modularized for java 