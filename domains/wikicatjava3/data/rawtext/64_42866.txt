java message service the java message service jms api is a java message oriented middleware mom api for sending messages between two or more clients it is an implementation to handle the producerconsumer problem jms is a part of the java platform enterprise edition and is defined by a specification developed under the java community process as jsr  it is a messaging standard that allows application components based on the java enterprise edition java ee to create send receive and read messages it allows the communication between different components of a distributed application to be loosely coupled reliable and asynchronous general idea of messaging messaging is a form of loosely coupled distributed communication where in this context the term communication can be understood as an exchange of messages between software components messageoriented technologies attempt to relax tightly coupled communication such as tcp network sockets corba or rmi by the introduction of an intermediary component this approach allows software components to communicate indirectly with each other benefits of this include message senders not needing to have precise knowledge of their receivers the advantages of messaging include the ability to integrate heterogeneous platforms reduce system bottlenecks increase scalability and respond more quickly to change jms  is maintained under the java community process as jsr  elements the following are jms elements models the jms api supports two models pointtopoint model in the pointtopoint messaging system messages are routed to an individual consumer which maintains a queue of incoming messages this messaging type is built on the concept of message queues senders and receivers each message is addressed to a specific queue and the receiving clients extract messages from the queues established to hold their messages while any number of producers can send messages to the queue each message is guaranteed to be delivered and consumed by one consumer queues retain all messages sent to them until the messages are consumed or until the messages expire if no consumers are registered to consume the messages the queue holds them until a consumer registers to consume them publishsubscribe model the publishsubscribe model supports publishing messages to a particular message topic subscribers may register interest in receiving messages on a particular message topic in this model neither the publisher nor the subscriber knows about each other a good analogy for this is an anonymous bulletin board jms provides a way of separating the application from the transport layer of providing data the same java classes can be used to communicate with different jms providers by using the java naming and directory interface jndi information for the desired provider the classes first use a connection factory to connect to the queue or topic and then use populate and send or publish the messages on the receiving side the clients then receive or subscribe to the messages uri scheme rfc  defines a jms uri scheme for the java message service provider implementations to use jms one must have a jms provider that can manage the sessions queues and topics starting from java ee version  jms provider has to be contained in all java ee application servers this can be implemented using the message inflow management of the java ee connector architecture which was first made available in that version the following is a list of jms providers a historical comparison matrix of jms providers from  is available at httpwwwtheserversidecomreviewsmatrixtss