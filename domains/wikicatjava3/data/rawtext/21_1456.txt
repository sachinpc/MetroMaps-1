awk awk is a programming language designed for text processing and typically used as a data extraction and reporting tool it is a standard feature of most unixlike operating systems the awk language is a datadriven scripting language consisting of a set of actions to be taken against streams of textual data  either run directly on files or used as part of a pipeline  for purposes of extracting or transforming text such as producing formatted reports the language extensively uses the string datatype associative arrays that is arrays indexed by key strings and regular expressions while awk has a limited intended application domain and was especially designed to support oneliner programs the language is turingcomplete and even the early bell labs users of awk often wrote wellstructured large awk programs awk was created at bell labs in the s and its name is derived from the surnames of its authors  alfred aho peter weinberger and brian kernighan the acronym is pronounced the same as the name of the bird auk which acts as an emblem of the language such as on the awk programming language book cover  the book is often referred to by the abbreviation tapl when written in all lowercase letters as codice it refers to the unix or plan  program that runs scripts written in the awk programming language history awk was initially developed in  by alfred aho peter weinberger and brian kernighan from whose initials the language takes its name as one of the early tools to appear in version  unix awk added computational features to a unix pipeline besides the bourne shell the only scripting language available in a standard unix environment it is one of the mandatory utilities of the single unix specification and is required by the linux standard base specification awk was significantly revised and expanded in  resulting in the gnu awk implementation written by paul rubin jay fenlason and richard stallman released in  gnu awk is the most widely deployed version because it is included with gnubased linux packages gnu awk has been maintained solely by arnold robbins since  brian kernighans nawk new awk source was first released in  unpublicized and publicly since the late s many bsd systems use it to avoid gpl license awk was preceded by sed  both were designed for text processing they share the lineoriented datadriven paradigm and are particularly suited to writing oneliner programs due to the implicit main loop and current line variables the power and terseness of early awk programs  notably the powerful regular expression handling and conciseness due to implicit variables which facilitate oneliners  together with the limitations of awk at the time were important inspirations for the perl language  in the s perl became very popular competing with awk in the niche of unix textprocessing languages structure of awk programs awk is a language for processing text files a file is treated as a sequence of records and by default each line is a record each line is broken up into a sequence of fields so we can think of the first word in a line as the first field the second word as the second field and so on an awk program is a sequence of patternaction statements awk reads the input a line at a time a line is scanned for each pattern in the program and for each pattern that matches the associated action is executed  alfred v aho an awk program is a series of pattern action pairs written as where condition is typically an expression and action is a series of commands the input is split into records where by default records are separated by newline characters so that the input is split into lines the program tests each record against each of the conditions in turn and executes the action for each expression that is true either the condition or the action may be omitted the condition defaults to matching every record the default action is to print the record this is the same patternaction structure as sed in addition to a simple awk expression such as codice or codice the condition can be begin or end causing the action to be executed before or after all records have been read or pattern pattern which matches the range of records starting with a record that matches pattern up to and including the record that matches pattern before again trying to match against pattern on future lines in addition to normal arithmetic and logical operators awk expressions include the tilde operator  which matches a regular expression against a string as handy syntactic sugar regexp without using the tilde operator matches against the current record this syntax derives from sed which in turn inherited it from the ed editor where codice is used for searching this syntax of using slashes as delimiters for regular expressions was subsequently adopted by perl and ecmascript and is now quite common the tilde operator was also adopted by perl but has not seen as wide use awk commands awk commands are the statements that are substituted for action in the examples above awk commands can include function calls variable assignments calculations or any combination thereof awk contains builtin support for many functions many more are provided by the various flavors of awk also some flavors support the inclusion of dynamically linked libraries which can also provide more functions for brevity the enclosing curly braces     will be omitted from these examples the print command the print command is used to output text the output text is always terminated with a predefined string called the output record separator ors whose default value is a newline the simplest form of this command is although these fields x may bear resemblance to variables the  symbol indicates variables in perl they actually refer to the fields of the current record a special case  refers to the entire record in fact the commands codice and codice are identical in functionality the print command can also display the results of calculations andor function calls output may be sent to a file or through a pipe builtin variables awks builtin variables include the field variables    and so on  represents the entire record they hold the text or values in the individual textfields in a record other variables include variables and syntax variable names can use any of the characters azaz with the exception of language keywords the operators     represent addition subtraction multiplication and division respectively for string concatenation simply place two variables or string constants next to each other it is optional to use a space in between if string constants are involved but two variable names placed adjacent to each other require a space in between double quotes delimit string constants statements need not end with semicolons finally comments can be added to programs by using  as the first character on a line userdefined functions in a format similar to c function definitions consist of the keyword codice the function name argument names and the function body here is an example of a function this statement can be invoked as follows functions can have variables that are in the local scope the names of these are added to the end of the argument list though values for these should be omitted when calling the function it is convention to add some whitespace in the argument list before the local variables to indicate where the parameters end and the local variables begin sample applications hello world here is the customary hello world program written in awk note that an explicit codice statement is not needed here since the only pattern is codice no commandline arguments are processed print lines longer than  characters print all lines longer than  characters note that the default action is to print the current line print a count of words count words in the input and print the number of lines words and characters like wc as there is no pattern for the first line of the program every line of input matches by default so the increment actions are executed for every line note that codice is shorthand for codice sum last word s is incremented by the numeric value of nf which is the last word on the line as defined by awks field separator by default whitespace nf is the number of fields in the current line eg  since  is the value of the fourth field nf is the value of the last field in the line regardless of how many fields this line has or whether it has more or fewer fields than surrounding lines  is actually a unary operator with the highest operator precedence if the line has no fields then nf is   is the whole line which in this case is empty apart from possible whitespace and so has the numeric value  at the end of the input the end pattern matches so s is printed however since there may have been no lines of input at all in which case no value has ever been assigned to s it will by default be an empty string adding zero to a variable is an awk idiom for coercing it from a string to a numeric value concatenating an empty string is to coerce from a number to a string eg s  note theres no operator to concatenate strings theyre just placed adjacently with the coercion the program prints  on an empty input without it an empty line is printed match a range of input lines the action statement prints each line numbered the printf function emulates the standard c printf and works similarly to the print command described above the pattern to match however works as follows nr is the number of records typically lines of input awk has so far read ie the current line number starting at  for the first line of input  is the modulo operator nr     is true for the st th th etc lines of input likewise nr     is true for the rd th th etc lines of input the range pattern is false until the first part matches on line  and then remains true up to and including when the second part matches on line  it then stays false until the first part matches again on line  the first part of a range pattern being constantly true eg  can be used to start the range at the beginning of input similarly if the second part is constantly false eg  the range continues until the end of input for example prints lines of input from the first line matching the regular expression cut here that is a line containing only the phrase cut here to the end calculate word frequencies word frequency using associative arrays the begin block sets the field separator to any sequence of nonalphabetic characters note that separators can be regular expressions after that we get to a bare action which performs the action on every input line in this case for every field on the line we add one to the number of times that word first converted to lowercase appears finally in the end block we print the words with their frequencies the line creates a loop that goes through the array words setting i to each subscript of the array this is different from most languages where such a loop goes through each value in the array the loop thus prints out each word followed by its frequency count codice was an addition to the one true awk see below made after the book was published match pattern from command line this program can be represented in several ways the first one uses the bourne shell to make a shell script that does everything it is the shortest of these methods the codice in the awk command is not protected by single quotes so that the shell does expand the variable but it needs to be put in double quotes to properly handle patterns containing spaces a pattern by itself in the usual way checks to see if the whole line codice matches codice contains the current filename awk has no explicit concatenation operator two adjacent strings concatenate them codice expands to the original unchanged input line there are alternate ways of writing this this shell script accesses the environment directly from within awk this is a shell script that uses codice an array introduced in a newer version of the one true awk after the book was published the subscript of codice is the name of an environment variable its result is the variables value this is like the getenv function in various standard libraries and posix the shell script makes an environment variable codice containing the first argument then drops that argument and has awk look for the pattern in each file codice checks to see if its left operand matches its right operand codice is its inverse note that a regular expression is just a string and can be stored in variables the next way uses commandline variable assignment in which an argument to awk can be seen as an assignment to a variable or you can use the v varvalue command line option eg awk v patternpattern  finally this is written in pure awk without help from a shell or without the need to know too much about the implementation of the awk script as the variable assignment on command line one does but is a bit lengthy the codice is necessary not only to extract the first argument but also to prevent it from being interpreted as a filename after the codice block ends codice the number of arguments is always guaranteed to be  as codice is the name of the command that executed the script most often the string codice also note that codice is the empty string codice codice initiates a comment that expands to the end of the line note the codice block awk only checks to see if it should read from standard input before it runs the command this means that only works because the fact that there are no filenames is only checked before codice is run if you explicitly set codice to  so that there are no arguments awk will simply quit because it feels there are no more input files therefore you need to explicitly say to read from standard input with the special filename codice selfcontained awk scripts on unixlike operating systems selfcontained awk scripts can be constructed using the shebang syntax for example a script called codice that prints the string hello world may be built by creating a file named codice containing the following lines the codice tells awk that the argument that follows is the file to read the awk program from which is the same flag that is used in sed both these programs default to executing a program given as a commandline argument rather than a separate file  since they are often used for oneliners versions and implementations awk was originally written in  and distributed with version  unix in  its authors started expanding the language most significantly by adding userdefined functions the language is described in the book the awk programming language published  and its implementation was made available in releases of unix system v to avoid confusion with the incompatible older version this version was sometimes called new awk or nawk this implementation was released under a free software license in  and is still maintained by brian kernighan see external links below old versions of unix such as unixv included codice which converted awk to c kernighan wrote a program to turn awk into c its state is not known