java class file a java class file is a file with the class filename extension containing java bytecode that can be executed on the java virtual machine jvm a java class file is produced by a java compiler from java programming language source files java files containing java classes if a source file has more than one class each class is compiled into a separate class file jvms are available for many platforms and a class file compiled on one platform will execute on a jvm of another platform this makes java platformindependent history on  december  the class file format was modified under java specification request jsr  file layout and structure sections there are  basic sections to the java class file structure magic number class files are identified by the following  byte header in hexadecimal codice the first  entries in the table below the history of this magic number was explained by james gosling referring to a restaurant in palo alto we used to go to lunch at a place called st michaels alley according to local legend in the deep dark past the grateful dead used to perform there before they made it big it was a pretty funky place that was definitely a grateful dead kinda place when jerry died they even put up a little buddhistesque shrine when we used to go there we referred to the place as cafe dead somewhere along the line it was noticed that this was a hex number i was revamping some file format code and needed a couple of magic numbers one for the persistent object file and one for classes i used cafedead for the object file format and in grepping for  character hex words that fit after cafe it seemed to be a good theme i hit on babe and decided to use it at that time it didnt seem terribly important or destined to go anywhere but the trashcan of history so cafebabe became the class file format and cafedead was the persistent object format but the persistent object facility went away and along with it went the use of cafedead  it was eventually replaced by rmi general layout because the class file contains variablesized items and does not also contain embedded file offsets or pointers it is typically parsed sequentially from the first byte toward the end at the lowest level the file format is described in terms of a few fundamental data types some of these fundamental types are then reinterpreted as higherlevel values such as strings or floatingpoint numbers depending on context there is no enforcement of word alignment and so no padding bytes are ever used the overall layout of the class file is as shown in the following table representation in a clike programming language since c doesnt support multiple variable length arrays within a struct the code below wont compile and only serves as a demonstration the constant pool the constant pool table is where most of the literal constant values are stored this includes values such as numbers of all sorts strings identifier names references to classes and methods and type descriptors all indexes or references to specific constants in the constant pool table are given by bit type u numbers where index value  refers to the first constant in the table index value  is invalid due to historic choices made during the file format development the number of constants in the constant pool table is not actually the same as the constant pool count which precedes the table first the table is indexed starting at  rather than  but the count should actually be interpreted as the maximum index plus one additionally two types of constants longs and doubles take up two consecutive slots in the table although the second such slot is a phantom index that is never directly used the type of each item constant in the constant pool is identified by an initial byte tag the number of bytes following this tag and their interpretation are then dependent upon the tag value the valid constant types and their tag values are there are only two integral constant types integer and long other integral types appearing in the highlevel language such as boolean byte and short must be represented as an integer constant class names in java when fully qualified are traditionally dotseparated such as javalangobject however within the lowlevel class reference constants an internal form appears which uses slashes instead such as javalangobject the unicode strings despite the moniker utf string are not actually encoded according to the unicode standard although it is similar there are two differences see utf for a complete discussion the first is that the codepoint u is encoded as the twobyte sequence codice in hex instead of the standard singlebyte encoding codice the second difference is that supplementary characters those outside the bmp at u and above are encoded using a surrogatepair construction similar to utf rather than being directly encoded using utf in this case each of the two surrogates is encoded separately in utf for example ude is encoded as the byte sequence codice rather than the correct byte utf encoding of codice