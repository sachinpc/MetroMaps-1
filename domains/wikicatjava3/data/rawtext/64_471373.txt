marker interface pattern the marker interface pattern is a design pattern in computer science used with languages that provide runtime type information about objects it provides a means to associate metadata with a class where the language does not have explicit support for such metadata to use this pattern a class implements a marker interface also called tagging interface and methods that interact with instances of that class test for the existence of the interface whereas a typical interface specifies functionality in the form of method declarations that an implementing class must support a marker interface need not do so the mere presence of such an interface indicates specific behavior on the part of the implementing class hybrid interfaces which both act as markers and specify required methods are possible but may prove confusing if improperly used an example of the application of marker interfaces from the java programming language is the interface a class implements this interface to indicate that its nontransient data members can be written to an  the codice private method codice contains a series of codice tests to determine writeability one of which looks for the codice interface if any of these tests fails the method throws a codice critique a major problem with marker interfaces is that an interface defines a contract for implementing classes and that contract is inherited by all subclasses this means that you cannot unimplement a marker in the example given if you create a subclass that you do not want to serialize perhaps because it depends on transient state you must resort to explicitly throwing codice per codice docs another solution is for the language to support metadata directly