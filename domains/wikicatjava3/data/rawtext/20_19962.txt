mesa programming language mesa is an innovative programming language superseded by the cedar language developed in the late s at the xerox palo alto research center in palo alto california united states the language name was a pun based upon the programming language catchphrases of the time because mesa is a high level programming language mesa is an algollike language with strong support for modular programming every library module has at least two source files a definitions file specifying the librarys interface plus one or more program files specifying the implementation of the procedures in the interface to use a library a program or higherlevel library must import the definitions the mesa compiler typechecks all uses of imported entities this combination of separate compilation with typechecking was unusual at the time mesa introduced several other innovations in language design and implementation notably in the handling of software exceptions thread synchronization and incremental compilation mesa was developed on the xerox alto one of the first personal computers with a graphical user interface however most of the altos system software was written in bcpl mesa was the system programming language of the later xerox star workstations and for the globalview desktop environment xerox parc later developed cedar which was a superset of mesa mesa and cedar had a major influence on the design of other important languages such as modula and java and was an important vehicle for the development and dissemination of the fundamentals of guis networked environments and the other advances xerox contributed to the field of computer science history mesa was originally designed in the computer systems laboratory csl a branch of the xerox palo alto research center for the alto an experimental microcoded workstation initially its spread was confined to parc and a few universities to which xerox had donated some altos mesa was later adopted as the systems programming language for xeroxs commercial workstations such as the xerox  xerox star dandelion and xerox  daybreak in particular for the pilot operating system a secondary development environment called the xerox development environment xde allowed developers to debug both the operating system pilot as well as viewpoint gui applications using a world swap mechanism this allowed the entire state of the world to be swapped out and allowed low level system crashes which paralyzed the whole system to be debugged this technique did not scale very well to large application images several megabytes and so the pilotmesa world in later releases moved away from the world swap view when the microcoded machines were phased out in favor of sparc workstations and intel pcs running a mesa princops emulator for the basic hardware instruction set mesa was compiled into a stackmachine language purportedly with the highest code density ever achieved roughly  bytes per highlevel language statement this was touted in a  paper where implementors from the xerox systems development department then the development arm of parc tuned up the instruction set and published a paper on the resultant code density mesa was taught via the mesa programming course that took people through the wide range of technology xerox had available at the time and ended with the programmer writing a hack a workable program designed to be useful an actual example of such a hack is the bwsmagnifier which was written in  and allowed people to magnify sections of the workstation screen as defined by a resizable window and a changeable magnification factor trained mesa programmers from xerox were well versed in the fundamental of guis networking exceptions and multithreaded programming almost a decade before they became standard tools of the trade within xerox mesa was eventually superseded by the cedar programming language many mesa programmers and developers left xerox in  some of them went to dec systems research center where they used their experience with mesa in the design of modula and later of modula main features semantics mesa was a strongly typed programming language with typechecking across module boundaries but with enough flexibility in its type system that heap allocators could be written in mesa because of its strict separation between interface and implementation mesa allows true incremental compilation and encourages architecture and platformindependent programming they also simplified sourcelevel debugging including remote debugging via the ethernet mesa had rich exception handling facilities with four types of exceptions it had support for thread synchronization via monitors mesa was the first language to implement monitor broadcast a concept introduced by the pilot operating system syntax mesa has an imperative and algebraic syntax based on algol and pascal rather than on bcpl or c for instance compound commands are indicated by the and keywords rather than braces in mesa all keywords are written in uppercase due to a peculiarity of the ascii variant used at parc the altos character set included a leftpointing arrow  rather than an underscore the result of this is that alto programmers including those using mesa smalltalk etc conventionally used camelcase for compound identifiers a practice which was incorporated in parcs standard programming style on the other hand the availability of the leftpointing arrow allowed them to use it for the assignment operator as it originally had been in algol when the mesa designers wanted to implement an exception facility they hired a recent ms graduate from colorado who had written his thesis on exception handling facilities in algorithmic languages this led to the richest exception facility for its time with primitives      and  because the language did not have typesafe checks to verify full coverage for signal handling uncaught exceptions were a common cause of bugs in released software cedar xerox parc later developed cedar which was a superset of mesa with a number of additions including garbage collection better string support called ropes and later a native compiler for sun sparc workstations most importantly cedar contained a typesafe subset and the compiler had a subsetchecking mode to ensure deterministic execution and no memory leaks from conformant cedar code mesa was the precursor to the programming language cedar cedars main additions were garbage collection dynamic types a limited form of type parameterization and special syntax to identify the typesafe parts of a multimodule software package