opengl open graphics library opengl is a crosslanguage crossplatform application programming interface api for rendering d and d vector graphics the api is typically used to interact with a graphics processing unit gpu to achieve hardwareaccelerated rendering silicon graphics inc sgi started developing opengl in  and released it in january  applications use it extensively in the fields of computeraided design cad virtual reality scientific visualization information visualization flight simulation and video games opengl is managed by the nonprofit technology consortium khronos group design the opengl specification describes an abstract api for drawing d and d graphics although it is possible for the api to be implemented entirely in software it is designed to be implemented mostly or entirely in hardware the api is defined as a set of functions which may be called by the client program alongside a set of named integer constants for example the constant gltextured which corresponds to the decimal number  although the function definitions are superficially similar to those of the programming language c they are languageindependent as such opengl has many language bindings some of the most noteworthy being the javascript binding webgl api based on opengl es  for d rendering from within a web browser the c bindings wgl glx and cgl the c binding provided by ios and the java and c bindings provided by android in addition to being languageindependent opengl is also crossplatform the specification says nothing on the subject of obtaining and managing an opengl context leaving this as a detail of the underlying windowing system for the same reason opengl is purely concerned with rendering providing no apis related to input audio or windowing development opengl is an evolving api new versions of the opengl specifications are regularly released by the khronos group each of which extends the api to support various new features the details of each version are decided by consensus between the groups members including graphics card manufacturers operating system designers and general technology companies such as mozilla and google in addition to the features required by the core api graphics processing unit gpu vendors may provide additional functionality in the form of extensions extensions may introduce new functions and new constants and may relax or remove restrictions on existing opengl functions vendors can use extensions to expose custom apis without needing support from other vendors or the khronos group as a whole which greatly increases the flexibility of opengl all extensions are collected in and defined by the opengl registry each extension is associated with a short identifier based on the name of the company which developed it for example nvidias identifier is nv which is part of the extension name codice the constant codice and the function codice if multiple vendors agree to implement the same functionality using the same api a shared extension may be released using the identifier ext in such cases it could also happen that the khronos groups architecture review board gives the extension their explicit approval in which case the identifier arb is used the features introduced by each new version of opengl are typically formed from the combined features of several widely implemented extensions especially extensions of type arb or ext documentation opengls popularity is partially due to the quality of its official documentation the opengl architecture review board released a series of manuals along with the specification which have been updated to track changes in the api these are almost universally known by the colors of their covers historic books preopengl  associated libraries the earliest versions of opengl were released with a companion library called the opengl utility library glu it provided simple useful features which were unlikely to be supported in contemporary hardware such as tessellating and generating mipmaps and primitive shapes the glu specification was last updated in  and the latest version depends on features which were deprecated with the release of opengl  in  context and window toolkits given that creating an opengl context is quite a complex process and given that it varies between operating systems automatic opengl context creation has become a common feature of several gamedevelopment and userinterface libraries including sdl allegro sfml fltk and qt a few libraries have been designed solely to produce an openglcapable window the first such library was opengl utility toolkit glut later superseded by freeglut glfw is a newer alternative extension loading libraries given the high workload involved in identifying and loading opengl extensions a few libraries have been designed which load all available extensions and functions automatically examples include glee glew and glbinding extensions are also loaded automatically by most language bindings such as jogl and pyopengl implementations mesa d is an opensource implementation of opengl it can do pure software rendering and it may also use hardware acceleration on bsd linux and other platforms by taking advantage of the direct rendering infrastructure as of version  it implements version  of the opengl standard history in the s developing software that could function with a wide range of graphics hardware was a real challenge software developers wrote custom interfaces and drivers for each piece of hardware this was expensive and resulted in multiplication of effort by the early s silicon graphics sgi was a leader in d graphics for workstations their iris gl api was considered stateoftheart and became the de facto industry standard overshadowing the open standardsbased phigs this was because iris gl was considered easier to use and because it supported immediate mode rendering by contrast phigs was considered difficult to use and outdated in functionality sgis competitors including sun microsystems hewlettpackard and ibm were also able to bring to market d hardware supported by extensions made to the phigs standard this in turn caused sgi market share to weaken as more d graphics hardware suppliers entered the market in an effort to influence the market sgi decided to turn the irisgl api into an open standard  opengl however sgi had many software customers for whom the change from irisgl to opengl would demand significant investment moreover irisgl had api functions that were irrelevant to d graphics for example it included a windowing keyboard and mouse api in part because it was developed before the x window system and suns news and irisgl libraries were unsuitable for opening due to licensing and patent issues these factors required sgi to continue to support the advanced and proprietary iris inventor and iris performer programming apis while market support for opengl matured one of the restrictions of irisgl was that it only provided access to features supported by the underlying hardware if the graphics hardware did not support a feature then the application could not use it opengl overcame this problem by providing support in software for features unsupported by hardware allowing applications to use advanced graphics on relatively lowpowered systems opengl standardized access to hardware pushed the development responsibility of hardware interface programs sometimes called device drivers to hardware manufacturers and delegated windowing functions to the underlying operating system with so many different kinds of graphics hardware getting them all to speak the same language in this way had a remarkable impact by giving software developers a higher level platform for dsoftware development in  sgi led the creation of the opengl architecture review board opengl arb the group of companies that would maintain and expand the opengl specification in the future in  sgi played with the idea of releasing something called opengl which included elements such as a scenegraph api presumably based on their performer technology the specification was circulated among a few interested parties  but never turned into a product microsoft released directd in  which eventually became the main competitor of opengl on december   microsoft and sgi initiated the fahrenheit project which was a joint effort with the goal of unifying the opengl and directd interfaces and adding a scenegraph api too in  hewlettpackard joined the project it initially showed some promise of bringing order to the world of interactive d computer graphics apis but on account of financial constraints at sgi strategic reasons at microsoft and general lack of industry support it was abandoned in  in july  the opengl architecture review board voted to transfer control of the opengl api standard to the khronos group version history the first version of opengl version  was released in january  by mark segal and kurt akeley since then opengl has occasionally been extended by releasing a new version of the specification such releases define a baseline set of features which all conforming graphics cards must support and against which new extensions can more easily be written each new version of opengl tends to incorporate several extensions which have widespread support among graphicscard vendors although the details of those extensions may be changed opengl  release date march   opengl  release date march   one notable feature of opengl  was the introduction of the imaging subset this is a set of features which are very useful to imageprocessing applications but which have limited usefulness elsewhere implementation of this subset has always been optional support is indicated by advertising the extension string arbimaging opengl  release date october   opengl  was a minor release appearing only seven months after the release of version  it introduced the concept of arb extensions and defined the extension arbmultitexture without yet incorporating it into the opengl core specification opengl  release date august   opengl  release date july   opengl  release date july   alongside the release of opengl  the arb released the opengl shading language specification and the extensions arbshaderobjects arbvertexshader and arbfragmentshader however these would not be incorporated into the core specification until the next release opengl  release date september   opengl  was originally conceived by dlabs to address concerns that opengl was stagnating and lacked a strong direction dlabs proposed a number of major additions to the standard most of these were at the time rejected by the arb or otherwise never came to fruition in the form that dlabs proposed however their proposal for a cstyle shading language was eventually completed resulting in the current formulation of the opengl shading language glsl or glslang like the assemblylike shading languages it was replacing it allowed replacing the fixedfunction vertex and fragment pipe with shaders though this time written in a clike highlevel language the design of glsl was notable for making relatively few concessions to the limits of the hardware then available this hearkened back to the earlier tradition of opengl setting an ambitious forwardlooking target for d accelerators rather than merely tracking the state of currently available hardware the final opengl  specification includes support for glsl opengl  release date july   opengl  required implementations to support version  of the opengl shading language longs peak and opengl  before the release of opengl  the new revision had the codename longs peak at the time of its original announcement longs peak was presented as the first major api revision in opengls lifetime it consisted of an overhaul to the way that opengl works calling for fundamental changes to the api the draft introduced a change to object management the gl  object model was built upon the statebased design of opengl that is to modify an object or to use it one needs to bind the object to the state system then make modifications to the state or perform function calls that use the bound object because of opengls use of a state system objects must be mutable that is the basic structure of an object can change at any time even if the rendering pipeline is asynchronously using that object a texture object can be redefined from d to d this requires any opengl implementations to add a degree of complexity to internal object management under the longs peak api object creation would become atomic using templates to define the properties of an object which would be created with one function call the object could then be used immediately across multiple threads objects would also be immutable however they could have their contents changed and updated for example a texture could change its image but its size and format could not be changed to support backwards compatibility the old state based api would still be available but no new functionality would be exposed via the old api in later versions of opengl this would have allowed legacy code bases such as the majority of cad products to continue to run while other software could be written against or ported to the new api longs peak was initially due to be finalized in september  under the name opengl  but the khronos group announced on october  that it had run into several issues that it wished to address before releasing the specification as a result the spec was delayed and the khronos group went into a media blackout until the release of the final opengl  spec the final specification proved far less revolutionary than the longs peak proposal instead of removing all immediate mode and fixed functionality nonshader mode the spec included them as deprecated features the proposed object model was not included and no plans have been announced to include it in any future revisions as a result the api remained largely the same with a few existing extensions being promoted to core functionality among some developer groups this decision caused something of an uproar with many developers professing that they would switch to directx in protest most complaints revolved around the lack of communication by khronos to the development community and multiple features being discarded that were viewed favorably by many other frustrations included the requirement of directx  level hardware to use opengl  and the absence of geometry shaders and instanced rendering as core features other sources reported that the community reaction was not quite as severe as originally presented with many vendors showing support for the update opengl  release date august   opengl  introduced a deprecation mechanism to simplify future revisions of the api certain features marked as deprecated could be completely disabled by requesting a forwardcompatible context from the windowing system opengl  features could still be accessed alongside these deprecated features however by requesting a full context deprecated features include opengl  release date march   opengl  fully removed all of the features which were deprecated in version  with the exception of wide lines from this version onwards its not possible to access new features using a full context or to access deprecated features using a forwardcompatible context an exception to the former rule is made if the implementation supports the arbcompatibility extension but this is not guaranteed opengl  release date august   opengl  further built on the deprecation mechanisms introduced by opengl  by dividing the specification into a core profile and compatibility profile compatibility contexts include the previouslyremoved fixedfunction apis equivalent to the arbcompatibility extension released alongside opengl  while core contexts do not opengl  also included an upgrade to glsl version  opengl  release date march   opengl  was released alongside version  it was designed to target hardware able to support directd  opengl  release date march   opengl  was released alongside version  it was designed for hardware able to support directd  as in opengl  this version of opengl contains a high number of fairly inconsequential extensions designed to thoroughly expose the abilities of directd class hardware only the most influential extensions are listed below hardware support nvidia geforce  series and newer ati radeon hd  series and newer intel hd graphics in intel ivy bridge processors and newer opengl  release date july   hardware support nvidia geforce  series and newer ati radeon hd  series and intel hd graphics in intel ivy bridge processors and newer opengl  release date august   hardware support nvidia geforce  series and newer ati radeon hd  series and intel hd graphics in intel haswell processors and newer opengl  release date august   hardware support nvidia geforce  series and newer ati radeon hd  series and newer intel hd graphics in intel haswell processors and newer opengl  release date july   hardware support nvidia geforce  series and newer amd radeon hd  series and newer intel hd graphics in intel broadwell processors and newer tegra k opengl  release date august   hardware support nvidia geforce  series and newer amd radeon hd  series and newer intel hd graphics in intel broadwell processors and newer tegra k and tegra x vulkan vulkan formerly named the next generation opengl initiative glnext is a groundsup redesign effort to unify opengl and opengl es into one common api that will not be backwards compatible with existing opengl versions the initial version of the api was released on  february 