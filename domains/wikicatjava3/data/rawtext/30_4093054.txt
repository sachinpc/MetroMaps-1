java annotation in the java computer programming language an annotation is a form of syntactic metadata that can be added to java source code classes methods variables parameters and packages may be annotated unlike javadoc tags java annotations can be reflective in that they can be embedded in class files generated by the compiler and may be retained by the java vm to be made retrievable at runtime it is possible to create metaannotations out of the existing ones in java history the java platform has various adhoc annotation mechanismsfor example the transient modifier or the deprecated javadoc tag jsr introduced the generalpurpose annotation also known as metadata facility to the java community process in  it gained approval in september  annotations became available in the language itself beginning with version  of the jdk the apt tool provided a provisional interface for compiletime annotation processing in jdk version  jsr formalized this and it became integrated into the javac compiler in version  builtin annotations java defines a set of annotations that are built into the language annotations applied to java code annotations applied to other annotations also known as meta annotations example builtin annotations this example shows the use of the override annotation it instructs the compiler to check parent classes for matching methods in this case an error is generated as the gettype method of class cat does not in fact override gettype of class animal as desired if the override annotation was absent a new method of name gettype would be created in class cat custom annotations annotation type declarations are similar to normal interface declarations an atsign  precedes the interface keyword each method declaration defines an element of the annotation type method declarations must not have any parameters or a throws clause return types are restricted to primitives string class enums annotations and arrays of the preceding types methods can have default values annotations may include an optional list of keyvalue pairs annotations themselves may be annotated to indicate where and when they can be used the compiler reserves a set of special annotations including deprecated override and suppresswarnings for syntactic purposes annotations are often used by frameworks as a way of conveniently applying behaviours to userdefined classes and methods that must otherwise be declared in an external source such as an xml configuration file or programmatically with api calls the following for example is an annotated jpa data class the annotations are not method calls and will not by themselves do anything rather the class object is passed to the jpa implementation at runtime which then extracts the annotations to generate an objectrelational mapping a complete example is given below processing when java source code is compiled annotations can be processed by compiler plugins called annotation processors processors can produce informational messages or create additional java source files or resources which in turn may be compiled and processed and also modify the annotated code itself the java compiler conditionally stores annotation metadata in the class files if the annotation has a retentionpolicy of class or runtime later the jvm or other programs can look for the metadata to determine how to interact with the program elements or change their behavior in addition to processing an annotation using an annotation processor a java programmer can write their own code that uses reflections to process the annotation java se  supports a new interface that is defined in the javalangreflect package this package contains the interface called annotatedelement that is implemented by the java reflection classes including class constructor field method and package the implementations of this interface are used to represent an annotated element of the program currently running in the java virtual machine this interface allows annotations to be read reflectively the annotatedelement interface provides access to annotations having runtime retention this access is provided by the getannotation getannotations and isannotationpresent methods because annotation types are compiled and stored in byte code files just like classes the annotations returned by these methods can be queried just like any regular java object a complete example of processing an annotation is provided below