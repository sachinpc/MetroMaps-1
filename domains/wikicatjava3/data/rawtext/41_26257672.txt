java database connectivity java database connectivity jdbc is an application programming interface api for the programming language java which defines how a client may access a database it is part of the java standard edition platform from oracle corporation it provides methods to query and update data in a database and is oriented towards relational databases a jdbctoodbc bridge enables connections to any odbcaccessible data source in the java virtual machine jvm host environment history and implementation sun microsystems released jdbc as part of java development kit jdk  on february   since then it has been part of the java platform standard edition java se the jdbc classes are contained in the java package and  starting with version  jdbc has been developed under the java community process jsr  specifies jdbc  included in jse  jsr  specifies the jdbc rowset additions and jsr  is the specification of jdbc  included in java se  jdbc  is specified by a maintenance release  of jsr  and is included in java se  the latest version jdbc  is specified by a maintenance release  of jsr  and is included in java se  functionality jdbc allows multiple implementations to exist and be used by the same application the api provides a mechanism for dynamically loading the correct java packages and registering them with the jdbc driver manager the driver manager is used as a connection factory for creating jdbc connections jdbc connections support creating and executing statements these may be update statements such as sqls create insert update and delete or they may be query statements such as select additionally stored procedures may be invoked through a jdbc connection jdbc represents statements using one of the following classes update statements such as insert update and delete return an update count that indicates how many rows were affected in the database these statements do not return any other information query statements return a jdbc row result set the row result set is used to walk over the result set individual columns in a row are retrieved either by name or by column number there may be any number of rows in the result set the row result set has metadata that describes the names of the columns and their types there is an extension to the basic jdbc api in the  jdbc connections are often managed via a connection pool rather than obtained directly from the driver examples when a java application needs a database connection one of the codice methods is used to create a jdbc connection the url used is dependent upon the particular database and jdbc driver it will always begin with the jdbc protocol but the rest is up to the particular vendor starting from java se  you can use javas trywithresources statement to make the above code cleaner once a connection is established a statement can be created note that connections statements and resultsets often tie up operating system resources such as sockets or file descriptors in the case of connections to remote database servers further resources are tied up on the server eg cursors for currently open resultsets it is vital to codice any jdbc object as soon as it has played its part garbage collection should not be relied upon the above trywithresources construct is a code pattern that obviates this data is retrieved from the database using a database query mechanism the example below shows creating a statement and executing a query an example of a codice query using codice and class from first example if a database operation fails jdbc raises an  there is typically very little one can do to recover from such an error apart from logging it with as much detail as possible it is recommended that the sqlexception be translated into an application domain exception an unchecked one that eventually results in a transaction rollback and a notification to the user an example of a database transaction here are examples of host database types which java can convert to with a function for an example of a codice to call stored procedures in the database see the  jdbc drivers jdbc drivers are clientside adapters installed on the client machine not on the server that convert requests from java programs to a protocol that the dbms can understand types there are commercial and free drivers available for most relational database servers these drivers fall into one of the following types there is also a type called internal jdbc driver driver embedded with jre in javaenabled sql databases it is used for java stored procedures this does not belong to the above classification although it would likely be either a type  or type  driver depending on whether the database itself is implemented in java or not an example of this is the kprb driver supplied with oracle rdbms jdbcdefaultconnection is a relatively standard way of referring making such a connection at least oracle and apache derby support it the distinction here is that the jdbc client is actually running as part of the database being accessed so access can be made directly rather than through network protocols