function prototype in computer programming a function prototype or function interface is a declaration of a function that specifies the functions name and type signature arity data types of parameters and return type but omits the function body while a function definition specifies how the function does what it does the implementation a function prototype merely specifies its interface ie what data types go in and come out of it the term function prototype is particularly used in the context of the programming languages c and c where placing forward declarations of functions in header files allows for splitting a programm into translation units ie into parts that a compiler can separately translate into object files to be combined by a linker into an executable or a library in a prototype parameter names are optional and in cc have function prototype scope meaning their scope ends at the end of the prototype however the type is necessary along with all modifiers eg if it is a pointer or a const parameter in objectoriented programming interfaces and abstract methods serve much the same purpose example consider the following function prototypes this prototype specifies that in this program there is a function named myfunction which takes a single integer argument n and returns a double elsewhere in the program a function definition must be provided if one wishes to use this function its important to be aware that a declaration of a function does not need to include any arguments the following is an argumentless function declaration which just declares the function name and its return type but doesnt tell what parameter types the definition expects uses in earlier versions of c if a function is not previously declared and its name occurred in an expression followed by a left parenthesis it is implicitly declared as a function that returns an codice and nothing was assumed about its arguments in this case the compiler will not be able to perform compiletime checking of argument types and syntax arity when the function is applied to some arguments this can cause problems the following code illustrates a situation in which the behavior of an implicitly declared function is undefined the function myfunction expects an integer argument to be on the stack or in a register when it is called if the prototype is omitted the compiler will have no way of enforcing this and myfunction will end up operating on some other datum on the stack possibly a return address or the value of a variable that is currently not in scope by including the function prototype you inform the compiler that the function myfunction takes one integer argument and you enable the compiler to catch these kinds of errors and make the compilation process run smoothly this feature was removed from the c standard thus omission of a function prototype will result in a compile error creating library interfaces by placing function prototypes in a header file one can specify an interface for a library class declaration in c function prototypes are also used in class definitions