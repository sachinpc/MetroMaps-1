facelets in computing facelets is an open source web template system under the apache license and the default view handler technology aka view declaration language for javaserver faces jsf the language requires valid input xml documents to work facelets supports all of the jsf ui components and focuses completely on building the jsf component tree reflecting the view for a jsf application although both jsp and jsf technologies have been improved to work better together facelets eliminates the issues noted in hans bergstens article improving jsf by dumping jsp facelets draws on some of the ideas from apache tapestry and is similar enough to draw comparison the project is conceptually similar to tapestrys which treats blocks of html elements as framework components backed by java classes facelets also has some similarities to the apache tiles framework with respect to support templating as well as composition facelets was originally created by jacob hookom in  as a separate alternative view declaration language for jsf  and jsf  which both used jsp as the default view declaration language starting from jsf  facelets has been promoted by the jsf expert group to be the default view declaration language jsp has been deprecated as a legacy fall back element conversion in facelets templates tags from a tag library can be entered in two forms directly as a qualified xml element or indirectly via the codice attribute on an arbitrary nonqualified element in the latter case the facelet compiler will ignore the actual element and will process the element asif it was the one given by the codice attribute the following example shows the direct usage of qualified tags using the codice attribute the same code can also be expressed as the example given below the above code can be viewed in a browser and edited with conventional wysiwyg design tools this is not possible when directly using the qualified tags nevertheless directly using qualified tags is the most popular way of using facelets in practice and is the style most used in books and examples templating facelets provides a facility for templating a facelets file can reference a master template and provide content for the placeholders this master template defines the file that references such a template is called the template client template clients themselves can again be used as a template for other template clients and as such a hierarchy of templates can be created the following shows an example of a simple master template templatesmastertemplatexhtml the above code contains a default html frame and a single placeholder called bodycontent a template client can use this template as follows templateclientxhtml the above code makes use of the template codice and provides content for the placeholder in that template the final result will be a page called codice which has the content of codice but with codice replaced by this is a template client page that uses the master template content reuse in addition to templating facelets provides support for reuse by letting the user include content that resides in a different file including such content can be done in  different ways referencing a file the simplest way to include the content of another facelet is referencing it by name using the codice tag this causes the content in the referenced file to be directly included in the calling facelet by the facelets compiler besides reusing content at multiple locations this can be used to break down a large facelet into smaller parts the following shows an example templatesstertemplatexhtml htmlheadxhtml custom tags facelets supports indirection for including content via custom tags such a custom tag can be associated with a facelet in taglib file occurrences of that tag will then be replaced with the content of the associated facelet the following shows an example of this templatesmastertemplatexhtml the code above uses the tag codice to mark the point in the facelet where content is to be inserted such a tag has to be declared in a taglib file where it can be associated with a facelet as follows exampletaglibxml the following shows an example of what the actual content facelet could look like spacerxhtml composite components besides including content directly facelets provides the composite component mechanism that makes content available as a firstclass jsf component composite components do not need to be declared in a taglib file but instead have to be put in a special directory by convention the content is then automatically assigned a namespace and a tag name the namespace is constructed of the fixed string httpjavasuncomjsfcomposite concatenated with the directory name in which the content file resides relative to the resources directory the tag name becomes the file name without the xhtml suffix the following shows an example of this resourcesmyspacerxhtml the above facelet is automatically available as a component in namespace httpjavasuncomjsfcompositemy and tag name spacer parameterized includes to customize included content facelets allows parameters to be used via those parameters objects can be passed into the included content where they can be used as variables for the codice mechanism the codice can be used for this while for the custom tags and composite components normal tag attributes can be used composite components require parameters to be declared in their interface section while for custom tags there is no such requirement and values provided for arbitrary attributes are made available as variables with the same name as said attribute