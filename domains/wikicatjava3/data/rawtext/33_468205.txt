standard widget toolkit the standard widget toolkit swt is a graphical widget toolkit for use with the java platform it was originally developed by stephen northover at ibm and is now maintained by the eclipse foundation in tandem with the eclipse ide it is an alternative to the abstract window toolkit awt and swing java gui toolkits provided by sun microsystems as part of the java platform standard edition to display gui elements the swt implementation accesses the native gui libraries of the operating system using jni java native interface in a manner that is similar to those programs written using operating systemspecific apis programs that call swt are portable but the implementation of the toolkit despite part of it being written in java is unique for each platform the toolkit is licensed under the eclipse public license an open source license approved by the open source initiative history awt the abstract window toolkit was the first java gui toolkit introduced with jdk  as one component of the sun microsystems java platform the original awt was a simple java wrapper around native operating systemsupplied widgets such as menus windows and buttons swing was the next generation gui toolkit introduced by sun in jse  swing was developed in order to provide a richer set of gui components than awt swing gui elements are  java with no native code instead of wrapping native gui components swing draws its own components by using java d to call low level operating system drawing routines the roots of swt go back to work that object technology international or oti did in the s when creating multiplatform portable native widget interfaces for smalltalk originally for oti smalltalk which became ibm smalltalk in  ibm smalltalks common widget layer provided fast native access to multiple platform widget sets while still providing a common api without suffering the lowest common denominator problem typical of other portable graphical user interface gui toolkits ibm was developing visualage an integrated development environment ide written in smalltalk they decided to opensource the project which led to the development of eclipse intended to compete against other ides such as microsoft visual studio eclipse is written in java and ibm developers deciding that they needed a toolkit that had native look and feel and native performance created swt as a swing replacement design swt is a wrapper around native code objects such as gtk objects motif objects etc because of this swt widgets are often referred to as heavyweight evoking images of a light java wrapper around a heavy native object in cases where native platform gui libraries do not support the functionality required for swt swt implements its own gui code in java similar to swing in essence swt is a compromise between the low level performance and look and feel of awt and the high level ease of use of swing according to the eclipse foundation swt and swing are different tools that were built with different goals in mind the purpose of swt is to provide a common api for accessing native widgets across a spectrum of platforms the primary design goals are high performance native look and feel and deep platform integration swing on the other hand is designed to allow for a highly customizable look and feel that is common across all platforms it has been argued that swt features a clean design in part inspired by erich gamma of design patterns fame swt is a simpler toolkit than swing with less possibly extraneous functionality for the average developer this has led some people to argue that swt lacks functionality when compared to swing james gosling the creator of the java language has argued that swt is too simple and that swt is a difficult toolkit to port to new platforms for the same reason that awt used to have porting problems that it is too simple too low level and too tied to the win gui api leading to problems adapting the swt api to other gui toolkits such as motif and os x carbon although swt does not implement the popular modelviewcontroller architecture used in swing and many other high level gui toolkits the jface library which is developed as part of the same eclipse project does provide a platformindependent higherlevel modelviewcontroller abstraction on top of swt developers may choose to use jface to provide more flexible and abstract data models for complex swt controls such as trees tables and lists or access those controls directly as needed look and feel swt widgets have the same look and feel as native widgets because they often are the same native widgets this is in contrast to the swing toolkit where all widgets are emulations of native widgets in some cases the difference is distinguishable for example the os x tree widget features a subtle animation when a tree is expanded and default buttons actually have an animated pulsing glow to focus the users attention on them the default swing version of these widgets do not animate since swt is simply a wrapper around native gui code it does not require large numbers of updates when that native code is changed providing that operating system vendors are careful not to break clients of their api when the operating systems are updated the same cannot be said of swing swing supports the ability to change the look and feel of the running application with pluggable look and feels which enable emulating the native platform user interface using themes which must be updated to mirror operating system gui changes such as theme or other look and feel updates swt aims for deep platform integration the eclipse reference to swts use of native widgets according to mauro marinillia of developercom whenever one needs a tight integration with the native platform swt can be a plus this deep integration can be useful in a number of ways for example enabling swt to wrap activex objects on microsoft windows programming the following is a basic hello world program using swt it shows a window shell and a label contrary to swing a display class is necessary to access the underlying operating system and its resources must be explicitly disposed of when they are no longer used platform support swt must be ported to every new gui library that needs supporting unlike swing and awt swt is not available on every javasupported platform since swt is not part of the java release there is also some evidence that the performance of swt on platforms other than windows is noticeably less efficient since swt uses a different native library for each platform swt developers may be exposed to platformspecific bugs swt exposes developers to more low level details than swing this is because swt is technically just a layer over native library provided gui functionality exposing the programmer to native gui code is part of the design intent of swt its goal is not to provide a rich userinterface design framework but rather the thinnest possible userinterface api that can be implemented uniformly on the largest possible set of platforms while still providing sufficient functionality to build rich graphical user interface gui applications since the swt implementation is different for each platform a platformspecific swt library jar file must be distributed with each application  swt supports the following platforms andor gui libraries performance swt was designed to be a high performance gui toolkit faster more responsive and lighter on system resource usage than swing there has been some attempted benchmarking of swt and swing which concluded that swt should be more efficient than swing although the applications benchmarked in this case were not complex enough to draw solid conclusions for all possible swt or swing uses a fairly thorough set of benchmarks concluded that neither swing nor swt clearly outperformed the other in the general case extensibility and comparison to other java code due to the use of native code swt classes do not allow for easy inheritance for all widget classes which some people consider can hurt extensibility this can make customizing existing widgets more difficult to achieve with swt than if one were using swing both toolkits support writing new widgets using only java code however in swt extra work is needed to make the new widget work on every platform swt widgets unlike almost any other java toolkit requires manual object deallocation as opposed to the standard java practice of automatic garbage collection swt objects must be explicitly deallocated using the dispose method which is analogous to the c languages free if this is not done memory leaks or other unintended behavior may result on this matter some have commented that explicitly deallocating the resources could be a step back in development time and costs at least for the average java developer and that this is a mixed blessing it means more control and more complexity for the swt developer instead of more automation and slowness when using swing the need for manual object deallocation when using swt is largely due to swts use of native objects as these objects are not tracked by the java jvm the jvm is unable to ascertain whether or not these native objects are in use and thus unable to garbage collect them at an appropriate time in practice the only swt objects which a developer must explicitly dispose are the subclasses of resource such as image color and font objects development there is some activity to enable combining swing and swt there are two different approaches being attempted starting in  there was a swt port to the d programming language called dwt since then the project supports windows bit and also linux gtk bit for swt the dwt project also has an addon package that contains a port of jface and eclipse forms uses applications alphabetically sorted using swt include recent open source efforts in the eclipse community have led to a porting of swt and jface into a widget toolkit appropriate for the web the result has been the eclipse rap which combines the qooxdoo ajax library with the swt api like other java ajax projects such as echo vaadin and google web toolkit the usage of the swt api allows developers to quickly develop applications for the web in much the same way as they would for the desktop