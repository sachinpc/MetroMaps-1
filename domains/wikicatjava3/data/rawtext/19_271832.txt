abap abap advanced business application programming originally allgemeiner berichtsaufbereitungsprozessor german for general report creation processor is a highlevel programming language created by the german software company sap se it is currently positioned alongside java as the language for programming the sap application server which is part of the netweaver platform for building business applications introduction abap is one of the many applicationspecific fourthgeneration languages gls first developed in the s it was originally the report language for sap r a platform that enabled large corporations to build mainframe business applications for materials management and financial and management accounting abap used to be an abbreviation of allgemeiner berichtsaufbereitungsprozessor german for generic report preparation processor but was later renamed to the english advanced business application programming abap was one of the first languages to include the concept of logical databases ldbs which provides a high level of abstraction from the basic database levels the abap language was originally used by developers to develop the sap r platform it was also intended to be used by sap customers to enhance sap applications  customers can develop custom reports and interfaces with abap programming the language was geared towards more technical customers with programming experience abap remains as the language for creating programs for the clientserver r system which sap first released in  as computer hardware evolved through the s more and more of saps applications and systems were written in abap by  all but the most basic functions were written in abap in  sap released an objectoriented extension to abap called abap objects along with r release  saps current development platform netweaver supports both abap and java abap has an abstraction between the business applications the operating system and database this ensures that applications do not depend directly upon a specific server or database platform and can easily be ported from one platform to another sap netweaver currently runs on unix aix hpux solaris linux microsoft windows ios on ibm system i formerly iseries as and zos on ibm system z formerly zseries s supported databases are ibm db informix maxdb oracle and microsoft sql server support for informix was discontinued in sap basis release  abap runtime environment all abap programs reside inside the sap database they are not stored in separate external files like java or c programs in the database all abap code exists in two forms source code which can be viewed and edited with the abap workbench tools and generated code a binary representation somewhat comparable with java bytecode abap programs execute under the control of the runtime system which is part of the sap kernel the runtime system is responsible for processing abap statements controlling the flow logic of screens and responding to events such as a user clicking on a screen button in this respect it can be seen as a virtual machine comparable with the java vm a key component of the abap runtime system is the database interface which turns databaseindependent abap statements open sql into statements understood by the underlying dbms native sql the database interface handles all the communication with the relational database on behalf of abap programs it also contains extra features such as buffering of tables and frequently accessed data in the local memory of the application server sap systems and landscapes all sap data exists and all sap software runs in the context of a sap system a system consists of a central relational database and one or more application instances accessing the data and programs in this database an sap system contains at least one instance but may contain more mostly for reasons of sizing and performance in a system with multiple instances load balancing mechanisms ensure that the load is spread evenly over the available application servers installations of the web application server landscapes typically consist of three systems one for development one for testing and quality assurance and one for production the landscape may contain more systems eg separate systems for unit testing and preproduction testing or it may contain fewer eg only development and production without separate qa nevertheless three is the most common configuration abap programs are created and undergo first testing in the development system afterwards they are distributed to the other systems in the landscape these actions take place under control of the change and transport system cts which is responsible for concurrency control eg preventing two developers from changing the same code at the same time version management and deployment of programs on the qa and production systems the web application server consists of three layers the database layer the application layer and the presentation layer these layers may run on the same or on different physical machines the database layer contains the relational database and the database software the application layer knowledge contains the instance or instances of the system all application processes including the business transactions and the abap development run on the application layer the presentation layer handles the interaction with users of the system online access to abap application servers can go via a proprietary graphical interface which is called sap gui or via a web browser software layers abap software is deployed in software components examples for these are transactions a transaction in sap terminology is the execution of a program the normal way of executing abap code in the sap system is by entering a transaction code for instance va is the transaction code for create sales order transactions can be called via systemdefined or userspecific rolebased menus they can also be started by entering the transaction code directly into a command field which is present in every sap screen transactions can also be invoked programmatically by means of the abap statements call transaction and leave to transaction the general notion of a transaction is called a logical unit of work luw in sap terminology types of abap programs as in other programming languages an abap program is either an executable unit or a library which provides reusable code to other programs and is not independently executable abap distinguishes two types of executable programs reports follow a relatively simple programming model whereby a user optionally enters a set of parameters eg a selection over a subset of data and the program then uses the input parameters to produce a report in the form of an interactive list the term report can be somewhat misleading in that reports can also be designed to modify data the reason why these programs are called reports is the listoriented nature of the output they produce module pools define more complex patterns of user interaction using a collection of screens the term screen refers to the actual physical image that the user sees each screen also has a flow logic which refers to the abap code implicitly invoked by the screens which is divided into a pbo process before output and pai process after input section in sap documentation the term dynpro dynamic program refers to the combination of the screen and its flow logic the nonexecutable program types are an include module gets included at generation time into the calling unit it is often used to subdivide large programs subroutine pools contain abap subroutines blocks of code enclosed by formendform statements and invoked with perform function groups are libraries of selfcontained function modules enclosed by functionendfunction and invoked with call function object classes and interfaces are similar to java classes and interfaces the first define a set of methods and attributes the second contain empty method definitions for which any class implementing the interface must provide explicit code type pools define collections of data types and constants abap programs are composed of individual sentences statements the first word in a statement is called an abap keyword each statement ends with a period words must always be separated by at least one space statements can be indented as you wish with keywords additions and operands the abap runtime system does not differentiate between upper and lowercase statements can extend beyond one line you can have several statements in a single line though this is not recommended lines that begin with asterisk  in the first column are recognized as comment lines by the abap runtime system and are ignored double quotations marks  indicate that the remainder of a line is a comment development environment there are three possible ways to develop in abap the availability depends on the release of the abap system abap workbench the abap workbench is part of the abap system and is accessed via sapgui it contains different tools for editing programs the most important of these are transaction codes are shown in parentheses the object navigator transaction se provides a single integrated interface into these various tools abap development tools the abap development tools adt formally known as abap in eclipse is a set of plugins for the eclipse platform to develop abap in this scenario the abap developer installs the required tools on his computer and works locally whereas a continuous synchronization with the backend is performed sap web ide the sap web ide is a browser based development environment for abap development the web ide is installed on the abap system and is provided via the web server that is part of the sap system the developer uses a web browser to access the web ide abap coding dictionary the abap dictionary contains all metadata about the data in the sap system it is closely linked with the abap workbench in that any reference to data eg a table a view or a data type will be obtained from the dictionary developers use the abap dictionary transactions directly or through the se object navigator inside the abap workbench to display and maintain this metadata when a dictionary object is changed a program that references the changed object will automatically reference the new version the next time the program runs because abap is interpreted it is not necessary to recompile programs that reference changed dictionary objects a brief description of the most important types of dictionary objects follows abap syntax this brief description of the abap syntax begins inevitably with the ubiquitous hello world program hello world report test write hello world this example contains two statements codice and codice the program displays a list on the screen in this case the list consists of the single line hello world the codice statement indicates that this program is a report this program could be a module pool after replacing the codice statement with codice chained statements consecutive statements with an identical first leftmost part can be combined into a chained statement using the chain operator codice the common part of the statements is written to the left of the colon the differing parts are written to the right of the colon and separated by commas the colon operator is attached directly to the preceding token without a space the same applies to the commas in the token list on as can be seen in the examples below chaining is often used in codice statements codice accepts just one argument so if for instance you wanted to display three fields from a structure called flightinfo you would have to code write flightinfocityfrom write flightinfocityto write flightinfoairpto chaining the statements results in a more readable and more intuitive form write flightinfocityfrom flightinfocityto flightinfoairpto in a chain statement the first part before the colon is not limited to the statement name alone the entire common part of the consecutive statements can be placed before the colon example replace a with b into lastname replace a with b into firstname replace a with b into cityname could be rewritten in chained form as replace a with b into lastname firstname cityname comments abap has  ways of defining text as a comment example report bookings select  from flightinfo spaces code in abap is whitespacesensitive x  abc assigns to variable x the substring of the variable a starting from b with the length defined by the variable c x  a  b c  assigns to variable x the sum of the variable a and the result of the call to method b with the parameter c abap statements in contrast with languages like cc or java which define a limited set of languagespecific statements and provide most functionality via libraries abap contains an extensive amount of builtin statements these statements traditionally used sentencelike structures and avoided symbols making abap programs relatively verbose however in more recent versions of the abap language a terser style is possible an example of statement based syntax whose syntax originates in cobol versus expressionbased syntax as in cjava add tax to price price  price  tax data types and variables abap provides a set of builtin data types in addition every structure table view or data element defined in the abap dictionary can be used to type a variable also object classes and interfaces can be used as types the builtin data types are date variables or constants type d contain the number of days since january   ad time variables or constants type t contain the number of seconds since midnight a special characteristic of both types is that they can be accessed both as integers and as character strings with internal format yyyymmdd for dates and hhmmss for times which can be used for date and time handling for example the code snippet below calculates the last day of the previous month note sydatum is a systemdefined variable containing the current date data lasteom type d last endofmonth date lasteom  sydatum lasteom   lasteom  lasteom   all abap variables must be explicitly declared in order to be used normally all declarations are placed at the top of the code module program subroutine function before the first executable statement this placement is a convention and not an enforced syntax rule the declaration consists of the name type length where applicable additional modifiers eg the number of implied decimals for a packed decimal field and optionally an initial value data counter type i data origin type country data tflights type table of flightinfo data booking type ref to clfltbooking notice the use of the colon to chain together consecutive data statements abap objects the abap language supports objectoriented programming through a feature known as abap objects this helps to simplify applications and make them more controllable abap objects is fully compatible with the existing language so one can use existing statements and modularization units in programs that use abap objects and can also use abap objects in existing abap programs syntax checking is stronger in abap objects programs and some syntactical forms usually older ones of certain statements are not permitted objects form a capsule which combines the character to the respective behavior objects should enable programmers to map a real problem and its proposed software solution on a onetoone basis typical objects in a business environment are for example customer order or invoice from release  onwards the business object repository bor of sap web application server abap has contained examples of such objects the bor object model will be integrated into abap objects in the next release by migrating the bor object types to the abap class library a comprehensive introduction to object orientation as a whole would go far beyond the limits of this introduction to abap objects this documentation introduces a selection of terms that are used universally in object orientation and also occur in abap objects in subsequent sections it goes on to discuss in more detail how these terms are used in abap objects the end of this section contains a list of further reading with a selection of titles about object orientation in objectoriented programming objects usually have the following properties internal tables in abap internal tables are an important feature of the abap language an internal table is defined similarly to a vector of structs in c or a vector of objects in java the main difference with these languages is that abap provides a collection of statements to easily access and manipulate the contents of internal tables note that abap does not support arrays the only way to define a multielement data object is to use an internal table internal tables are a way to store variable data sets of a fixed structure in the working memory of abap and provides the functionality of dynamic arrays the data is stored on a rowbyrow basis where each row has the same structure internal tables are preferably used to store and format the content of database tables from within a program furthermore internal tables in connection with structures are an important means of defining complex data structures in an abap program the following example defines an internal table with two fields with the format of database table vbrk types begin of tvbrk data  gtvbrk type standard table of tvbrk data  gsvbrk type tvbrk types ttvbrk type standard table of tvbrk history the following list only gives a rough overview about some important milestones in the history of the language abap for more details see abap  releasespecific changes