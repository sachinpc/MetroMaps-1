parrot virtual machine parrot is a registerbased process virtual machine designed to run dynamic languages efficiently it is possible to compile parrot assembly language and pir an intermediate language to parrot bytecode and execute it parrot is free and open source software parrot was started by the perl community and is developed with help from the open source and free software communities as a result it is focused on license compatibility with perl artistic license  platform compatibility across a broad array of systems processor architecture compatibility across most modern processors speed of execution small size around k depending on platform and the flexibility to handle the varying demands made by perl  and other modern dynamic languages version  with a stable api for development was released on march   the current version is release  andean parakeet history the name parrot came from an april fools joke which announced a hypothetical language named parrot that would unify python and perl the name was later adopted by this project initially a part of the perl  development effort which aims to support perl  python and other programming languages several languages are being ported to run on the parrot virtual machine the parrot foundation was created in  to hold the copyright and trademarks of the parrot project to help drive development of language implementations and the core codebase to provide a base for growing the parrot community and to reach out to other language communities languages the goal of the parrot virtual machine is to host client languages and allow interoperation between them several hurdles exist in accomplishing this goal in particular the difficulty of mapping highlevel concepts data and data structures between languages static and dynamic languages the differing properties of statically and dynamically typed languages have motivated the design of parrot current popular virtual machines such as the java virtual machine and the common language runtime for the net platform have been designed for statically typed languages while the languages targeted by parrot are dynamically typed virtual machines such as the java virtual machine and the current perl  virtual machine are also stack based parrot developers see parrots inclusion of registers as an advantage as it therefore more closely resembles a hardware design allowing the vast literature on compiler optimization to be used in generating bytecode for the parrot virtual machine that could run at speeds closer to machine code other registerbased virtual machines have inspired parts of parrots design including llvm the lua vm and infernos dis functional concepts parrot has rich support for several features of functional programming including closures and continuations both of which can be particularly difficult to implement correctly and portably especially in conjunction with exception handling and threading the biggest advantage is the dynamic extendability of objects with methods which allows for polymorphic containers pmcs and associated opcodes implementing solutions to these problems at the virtual machine level prevents repeated efforts to solve these problems in the individual client languages compiler tools parrot provides a suite of compilerwriting tools which includes the parser grammar engine pge a hybrid parsergenerator that can express a recursive descent parser as well as an operatorprecedence parser allowing free transition between the two in a single grammar the pge feeds into the tree grammar engine tge which further transforms the parsetree generated by pge for optimization and ultimately for code generation existing client languages many languages already have compiler frontends designed for parrot however many of them are still only partially functional as of july  actively maintained languages are inactive languages as of july  are the following internals there are three forms of program code for parrot examples registers parrot is registerbased like most hardware cpus and unlike most virtual machines which are stackbased parrot provides four types of registers parrot provides an arbitrary number of registers this number is fixed at compile time per subroutine arithmetic operations in pasm in pir development until late  dan sugalski was the lead designer and chief architect of parrot chip salzenberg a longtime perl linux kernel and c hacker took over until mid when he became the lead developer allison randal the lead developer of punie and chief architect of parrots compiler tools was the chief architect until midoctober  when she stepped down and chose christoph otto as the new chief architect development discussions take place primarily on the parrot channel on ircperlorg in addition there are weekly moderated meetings for parrot and language developers hosted in parrotsketch on the same network much discussion also occurs on the parrotdev mailing list hosted by parrotorg design discussions exist in the form of parrot design documents or pdds in the parrot repository the chief architect or another designated designer produces these documents to explain the philosophy of a feature as well as its interface and design notes parrot hackers turn these documents into executable tests and then existing features the parrot team releases a new stable version of the software on the third tuesday of every month core committers take turns producing releases in a revolving schedule where no single committer is responsible for multiple releases in a row this practice has improved the projects velocity and stability